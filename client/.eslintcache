[{"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\index.js":"1","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\reportWebVitals.js":"2","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\App.js":"3","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\store\\ftp\\ftpReducer.js":"4","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\pages\\Dashboard\\Dashboard.js":"5","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\pages\\Home\\Home.js":"6","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\pages\\FileExplorer\\FileExplorer.js":"7","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\store\\ftp\\ftpTypes.js":"8","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\pages\\Contact\\Contact.js":"9","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\pages\\About\\About.js":"10","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\pages\\FileExplorer\\ExplorerMenu\\ExplorerMenu.js":"11","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\SideBar\\Sidebar2.js":"12","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\pages\\Dashboard\\FilesMenu\\FilesMenu2.js":"13","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\PhoneSection\\Phone.js":"14","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\Header\\Header.js":"15","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\Footer\\Footer.js":"16","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\Modal\\Modal.js":"17","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\Snackbar\\Snackbar.js":"18","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\DragAndDrop\\DragAndDrop.js":"19","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\FileExplorer\\FileComponent\\FileComponent.js":"20","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\Errors\\NoFiles\\NoFiles.js":"21","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\FileExplorer\\ExplorerMenu\\DownloadPopup\\DownloadPopup.js":"22","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\FileExplorer\\ExplorerMenu\\SearchBar\\SearchBar.js":"23","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\Errors\\NoConnection\\NoConnection.js":"24","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\FileExplorer\\ExplorerMenu\\CreateFolder\\CreateFolder.js":"25","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\hoc\\Auxiliary.js":"26","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\Backdrop\\Backdrop.js":"27","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\FileExplorer\\FileComponent\\IconComponent\\IconComponent.js":"28","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\helpers\\useSingleClick\\useSingleAndDoubleClicks.js":"29","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\skeleton\\FileSkeleton.js":"30","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\skeleton\\FileSkeleton2.js":"31","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\FileExplorer\\ExplorerMenu\\ConfirmDelete\\ConfirmDelete.js":"32"},{"size":902,"mtime":1616608934668,"results":"33","hashOfConfig":"34"},{"size":362,"mtime":499162500000,"results":"35","hashOfConfig":"34"},{"size":766,"mtime":1617887867958,"results":"36","hashOfConfig":"34"},{"size":977,"mtime":1617513895155,"results":"37","hashOfConfig":"34"},{"size":325,"mtime":1617771741453,"results":"38","hashOfConfig":"34"},{"size":4800,"mtime":1617877961157,"results":"39","hashOfConfig":"34"},{"size":360,"mtime":1617780192755,"results":"40","hashOfConfig":"34"},{"size":48,"mtime":1614944642533,"results":"41","hashOfConfig":"34"},{"size":1406,"mtime":1618114505743,"results":"42","hashOfConfig":"34"},{"size":183,"mtime":1617771611415,"results":"43","hashOfConfig":"34"},{"size":28781,"mtime":1621134292899,"results":"44","hashOfConfig":"34"},{"size":3759,"mtime":1620277485613,"results":"45","hashOfConfig":"34"},{"size":23118,"mtime":1620276204309,"results":"46","hashOfConfig":"34"},{"size":1101,"mtime":1617098330278,"results":"47","hashOfConfig":"34"},{"size":2913,"mtime":1618114086160,"results":"48","hashOfConfig":"34"},{"size":866,"mtime":1617116597372,"results":"49","hashOfConfig":"34"},{"size":575,"mtime":1614071993197,"results":"50","hashOfConfig":"34"},{"size":1331,"mtime":1618242751814,"results":"51","hashOfConfig":"34"},{"size":3176,"mtime":1614079843966,"results":"52","hashOfConfig":"34"},{"size":2533,"mtime":1617810213608,"results":"53","hashOfConfig":"34"},{"size":310,"mtime":1617433793436,"results":"54","hashOfConfig":"34"},{"size":1769,"mtime":1616822081561,"results":"55","hashOfConfig":"34"},{"size":1711,"mtime":1617851162637,"results":"56","hashOfConfig":"34"},{"size":837,"mtime":1617950770165,"results":"57","hashOfConfig":"34"},{"size":977,"mtime":1615967210310,"results":"58","hashOfConfig":"34"},{"size":61,"mtime":1614060767137,"results":"59","hashOfConfig":"34"},{"size":234,"mtime":1614071982320,"results":"60","hashOfConfig":"34"},{"size":2591,"mtime":1613912867391,"results":"61","hashOfConfig":"34"},{"size":1747,"mtime":1617851083435,"results":"62","hashOfConfig":"34"},{"size":3408,"mtime":1619703192666,"results":"63","hashOfConfig":"34"},{"size":2656,"mtime":1619704830873,"results":"64","hashOfConfig":"34"},{"size":874,"mtime":1621141618972,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"1c85vuj",{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"68"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"68"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"68"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"68"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"68"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"68"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"68"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\index.js",[],["139","140"],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\reportWebVitals.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\App.js",["141"],"import React from 'react'\nimport './App.css';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\nimport Home from './pages/Home/Home'\nimport Dashboard from './pages/Dashboard/Dashboard'\nimport FileExplorer from './pages/FileExplorer/FileExplorer'\nimport About from './pages/About/About';\nimport Contact from './pages/Contact/Contact';\n\nfunction App() {\n\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <Switch>\n          <Route path='/dashboard' exact component={Dashboard} />\n          <Route path='/' exact component={Home} />\n          <Route path='/explorer' exact component={FileExplorer} />\n          <Route path='/about' exact component={About} />\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\store\\ftp\\ftpReducer.js",["142","143"],"import * as actionTypes from './ftpTypes'\r\n\r\nconst initialState = {\r\n    connectionDetails: {\r\n        host: null,\r\n        port: null,\r\n        username: null,\r\n        password: null,\r\n        secure: null,\r\n        totalSize: null,\r\n        usedSpace: null,\r\n        totalSize: null\r\n    }\r\n}\r\n\r\nconst ftpReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case actionTypes.STORE_USER_DATA: return {\r\n            ...state,\r\n            connectionDetails: {\r\n                host: action.value.host,\r\n                port: action.value.port,\r\n                username: action.value.username,\r\n                password: action.value.password,\r\n                secure: action.value.secure,\r\n                totalSize: action.value.totalSize,\r\n                usedSpace: action.value.usedSpace,\r\n                totalSize: action.value.totalSize\r\n            }\r\n        }\r\n\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default ftpReducer;","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\pages\\Dashboard\\Dashboard.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\pages\\Home\\Home.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\pages\\FileExplorer\\FileExplorer.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\store\\ftp\\ftpTypes.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\pages\\Contact\\Contact.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\pages\\About\\About.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\pages\\FileExplorer\\ExplorerMenu\\ExplorerMenu.js",["144","145","146","147","148","149","150","151","152","153"],"import { React, useEffect, useState, useRef } from \"react\";\r\nimport FileComponent from \"../../../components/FileExplorer/FileComponent/FileComponent\";\r\nimport Modal from \"../../../components/Modal/Modal\";\r\nimport axios from \"axios\";\r\nimport \"./ExplorerMenu.css\";\r\nimport DragAndDrop from \"../../../components/DragAndDrop/DragAndDrop\";\r\nimport CreateFolder from \"../../../components/FileExplorer/ExplorerMenu/CreateFolder/CreateFolder\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport DownloadPopup from \"../../../components/FileExplorer/ExplorerMenu/DownloadPopup/DownloadPopup\";\r\nimport FileSkeleton from \"../../../components/skeleton/FileSkeleton2\";\r\n\r\n// import { Menu, Item, useContextMenu } from \"react-contexify\";\r\nimport { MenuItem, ControlledMenu } from \"@szhsin/react-menu\";\r\nimport \"@szhsin/react-menu/dist/index.css\";\r\nimport Snackbar from \"../../../components/Snackbar/Snackbar\";\r\nimport NoFiles from \"../../../Errors/NoFiles/NoFiles\";\r\nimport SearchBar from \"../../../components/FileExplorer/ExplorerMenu/SearchBar/SearchBar\";\r\nimport NoConnection from \"../../../Errors/NoConnection/NoConnection\";\r\nimport ConfirmDelete from \"../../../components/FileExplorer/ExplorerMenu/ConfirmDelete/ConfirmDelete\";\r\n\r\n// const MENU_ID = \"menu-id\";\r\n\r\nconst ExplorerMenu = () => {\r\n  // fetching the ftp details\r\n  const connectionDetails = useSelector((state) =>\r\n    state != null ? state.connectionDetails : null\r\n  );\r\n  const [connectionLiveStatus, setConnectionLiveStatus] = useState(true);\r\n\r\n  const [fileList, setFileList] = useState([]);\r\n  const [currentDirectoryPath, setCurrentDirectoryPath] = useState(\"/\");\r\n  const [modalState, setModalState] = useState(false);\r\n  const [renameModalState, setRenameModalState] = useState(false);\r\n  const [transferModalState, setTransferModalState] = useState(false);\r\n  const [deleteModalState, setDeleteModalState] = useState(false);\r\n\r\n  const [transferItemDetails, setTransferItemDetails] = useState({\r\n    fileName: \"filename\",\r\n    fileType: 1,\r\n    fileSize: \"200 Mb\",\r\n    transferType: \"Download\",\r\n  });\r\n\r\n  const [errorSVG, setErrorSVG] = useState(null);\r\n\r\n  // used for menu's.\r\n  // const [menuProp, setMenuProp] = useState(null);\r\n  const [isOpen, setOpen] = useState(false);\r\n  const [anchorPoint, setAnchorPoint] = useState({ x: 0, y: 0 });\r\n  const [itemDataa, setItemDataa] = useState({\r\n    fileName: \"fileName\",\r\n    fileType: 1,\r\n    fileSize: \"230 Mb\",\r\n  });\r\n\r\n  // File transfer\r\n  const [transferPercent, setTransferPercent] = useState(0);\r\n  const [files, setFiles] = useState(() => []);\r\n  // const [downloadFile, downloaderComponentUI] = useFileDownloader();\r\n  const [downloaderComponentUI, setDownloaderComponentUI] = useState(true);\r\n  const [snackbarStatus, setSnackbarStatus] = useState(false);\r\n\r\n  // Search\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [searchResults, setSearchResults] = useState([]);\r\n\r\n  // ref for scroll\r\n  const ref = useRef();\r\n\r\n  //LazyLoading\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (currentDirectoryPath === \"/\") {\r\n      console.log(connectionDetails);\r\n      axios\r\n        .post(\"/rootDirectory\", { connectionDetails: connectionDetails })\r\n        .then((res) => {\r\n          setFileList(res.data);\r\n          // refreshScrollBar();\r\n          setLoading(false);\r\n        })\r\n        .catch((e) => {\r\n          console.log(\"error while fetching files list \" + e);\r\n          setLoading(false);\r\n          setConnectionLiveStatus(false);\r\n          setErrorSVG(\r\n            <div className=\"noFilesImage\">\r\n              <NoConnection svgHeight={500} svgWidth={336} />\r\n            </div>\r\n          );\r\n        });\r\n    } else {\r\n      axios\r\n        .post(\"/changePath\", {\r\n          path: currentDirectoryPath,\r\n          connectionDetails: connectionDetails,\r\n        })\r\n        .then((res) => {\r\n          setLoading(false);\r\n          setFileList(res.data);\r\n          setSearchTerm(\"\");\r\n          refreshScrollBar();\r\n        })\r\n        .catch((e) => {\r\n          setLoading(false);\r\n          console.log(\"error while fetching files list \" + e);\r\n          setConnectionLiveStatus(false);\r\n          setErrorSVG(\r\n            <div className=\"noFilesImage\">\r\n              <NoConnection svgHeight={500} svgWidth={336} />\r\n            </div>\r\n          );\r\n        });\r\n    }\r\n  }, [currentDirectoryPath]);\r\n\r\n  useEffect(() => {\r\n    let results = [];\r\n    if (fileList.length > 0) {\r\n      fileList.map((jsFrameworksSearch) => {\r\n        if (jsFrameworksSearch.name.toLowerCase().includes(searchTerm.trim()))\r\n          results.push(jsFrameworksSearch);\r\n      });\r\n    } else if (connectionDetails.host != null) {\r\n      setErrorSVG(\r\n        <div className=\"noFilesImage\">\r\n          <NoFiles />\r\n          <p>No Files</p>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    // fileList.map((jsFrameworksSearch) => {\r\n    //     if (jsFrameworksSearch.name.toLowerCase().includes(searchTerm.trim()))\r\n    //         results.push(jsFrameworksSearch)\r\n    // });\r\n    setSearchResults(results);\r\n  }, [searchTerm, fileList]);\r\n\r\n  const refreshScrollBar = () => {\r\n    ref.current.scrollTo(0, 0);\r\n  };\r\n\r\n  //CreateFolder\r\n  const createFolder = (folderName) => {\r\n    axios\r\n      .post(\"/createFolder\", {\r\n        name: folderName,\r\n        path: currentDirectoryPath,\r\n        connectionDetails: connectionDetails,\r\n      })\r\n      .then((res) => {\r\n        setFileList(res.data);\r\n      })\r\n      .catch((e) => {\r\n        console.log(\"error while fetching files list \" + e);\r\n        setConnectionLiveStatus(false);\r\n        setErrorSVG(\r\n          <div className=\"noFilesImage\">\r\n            <NoConnection svgHeight={500} svgWidth={336} />\r\n          </div>\r\n        );\r\n      });\r\n  };\r\n\r\n  const renameItem = (newName) => {\r\n    // let oldName = itemData.slice(0, -1);\r\n    let oldName = itemDataa.fileName;\r\n    let ext = oldName.split(\".\").pop();\r\n\r\n    newName = newName + \".\" + ext;\r\n\r\n    axios\r\n      .post(\"/renameFile\", {\r\n        oldName: oldName,\r\n        path: currentDirectoryPath,\r\n        newName: newName,\r\n        connectionDetails: connectionDetails,\r\n      })\r\n      .then((res) => {\r\n        setFileList(res.data);\r\n      })\r\n      .catch((e) => {\r\n        console.log(\"error while renaming file \" + e);\r\n        setConnectionLiveStatus(false);\r\n        setErrorSVG(\r\n          <div className=\"noFilesImage\">\r\n            <NoConnection svgHeight={500} svgWidth={336} />\r\n          </div>\r\n        );\r\n      });\r\n  };\r\n\r\n  const changePath = (name, type, size) => {\r\n    setTransferItemDetails({\r\n      fileSize: size,\r\n      fileType: type,\r\n      fileName: name,\r\n      transferType: \"Download\",\r\n    });\r\n    if (type === 2) {\r\n      setLoading(true);\r\n      setCurrentDirectoryPath(currentDirectoryPath + \"/\" + name); // works for ftp-server app\r\n      // setCurrentDirectoryPath(currentDirectoryPath + name)\r\n    } else {\r\n      // file name without extension = filename.split('.').slice(0, -1).join('.')\r\n\r\n      // const file = {\r\n      //     name: name,\r\n      //     // name: \"photo-1\",\r\n      //     thumb:\r\n      //         \"https://images.unsplash.com/photo-1604263439201-171fb8c0fddc?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=427&q=80 427w\",\r\n      //     file:\r\n      //         \"https://images.unsplash.com/photo-1604263439201-171fb8c0fddc?rnd=\" +\r\n      //         Math.random(),\r\n\r\n      //     filename: name,\r\n      //     // filename: \"photo-1.jpg\",\r\n      //     currentDirectoryPath: currentDirectoryPath,\r\n      //     connectionDetails: connectionDetails\r\n      // };\r\n\r\n      // downloadFile(file)\r\n\r\n      // Download file function..\r\n      setTransferModalState(true);\r\n      setDownloaderComponentUI(true);\r\n\r\n      console.log(\"Before download \" + downloaderComponentUI);\r\n\r\n      axios\r\n        .post(\"/downloadFile\", {\r\n          path: currentDirectoryPath,\r\n          name: name,\r\n          connectionDetails: connectionDetails,\r\n        })\r\n        .then((res) => {\r\n          console.log(\"After download: \" + downloaderComponentUI);\r\n          setDownloaderComponentUI(false);\r\n          setTransferModalState(false);\r\n          setSnackbarStatus(true);\r\n          // alert(res.data + ' Implement a download progress bar');\r\n        })\r\n        .catch((e) => {\r\n          setConnectionLiveStatus(false);\r\n          console.log(\"error while going back \" + e);\r\n          setErrorSVG(\r\n            <div className=\"noFilesImage\">\r\n              <NoConnection svgHeight={500} svgWidth={336} />\r\n            </div>\r\n          );\r\n        });\r\n      // }\r\n    }\r\n  };\r\n\r\n  const goBack = () => {\r\n    setLoading(true);\r\n    const p = currentDirectoryPath.slice(\r\n      0,\r\n      currentDirectoryPath.lastIndexOf(\"/\")\r\n    );\r\n    if (p !== \"\") {\r\n      axios\r\n        .post(\"/changePath\", { path: p, connectionDetails: connectionDetails })\r\n        .then((res) => {\r\n          setLoading(false);\r\n          setFileList(res.data);\r\n        })\r\n        .catch((e) => {\r\n          setLoading(false);\r\n          console.log(\"error while going back \" + e);\r\n          setConnectionLiveStatus(false);\r\n          setErrorSVG(\r\n            <div className=\"noFilesImage\">\r\n              <NoConnection svgHeight={500} svgWidth={336} />\r\n            </div>\r\n          );\r\n        });\r\n      setCurrentDirectoryPath(\r\n        currentDirectoryPath.slice(0, currentDirectoryPath.lastIndexOf(\"/\"))\r\n      );\r\n    } else {\r\n      alert(\"cannot go further 🙂\");\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getCodedBuffer = (file) => {\r\n    return new Promise(function (resolve, reject) {\r\n      let fileReader = new FileReader();\r\n      fileReader.readAsArrayBuffer(file);\r\n\r\n      fileReader.onload = function (ev) {\r\n        const array = new Uint8Array(ev.target.result);\r\n        // const fileByteArray = [];\r\n        let codedBuffer = \"\";\r\n\r\n        for (let i = 0; i < array.length; i++) {\r\n          // fileByteArray.push(array[i]);\r\n          codedBuffer += String.fromCharCode(array[i]);\r\n        }\r\n        resolve(codedBuffer); // successful\r\n      };\r\n      fileReader.onerror = reject; // call reject if error\r\n    });\r\n  };\r\n\r\n  const handleDrop = (files) => {\r\n    // Implement upload function\r\n    setTransferModalState(true);\r\n\r\n    for (let i = 0; i < files.length; i++) {\r\n      let fileType = \"Folder\";\r\n      let fileSize = files[i].size;\r\n\r\n      if (files[i].isFile) {\r\n        fileType = 1;\r\n        fileSize = files[i].size;\r\n        console.log(\"file size: \" + files[i].size);\r\n      }\r\n\r\n      setTransferItemDetails({\r\n        fileName: files[i].name,\r\n        fileType: fileType,\r\n        fileSize: fileSize,\r\n        transferType: \"Upload\",\r\n      });\r\n\r\n      getCodedBuffer(files[i]).then((result) => {\r\n        axios\r\n          .post(\"/handleDrop\", {\r\n            value: result,\r\n            fileName: files[i].name,\r\n            path: currentDirectoryPath,\r\n            connectionDetails: connectionDetails,\r\n          })\r\n          .then((res) => {\r\n            setTransferModalState(false);\r\n            setFileList(res.data);\r\n            setSnackbarStatus(true);\r\n          })\r\n          .catch((err) => {\r\n            alert(\"error occured while uploading \" + err);\r\n            setConnectionLiveStatus(false);\r\n            setErrorSVG(\r\n              <div className=\"noFilesImage\">\r\n                <NoConnection svgHeight={500} svgWidth={336} />\r\n              </div>\r\n            );\r\n          });\r\n      });\r\n    }\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setModalState(false);\r\n  };\r\n\r\n  const closeSnackbar = () => {\r\n    setSnackbarStatus(false);\r\n  };\r\n\r\n  const closeRenameModal = () => {\r\n    setRenameModalState(false);\r\n  };\r\n\r\n  const closeTransferModal = () => {\r\n    setTransferModalState(false);\r\n  };\r\n\r\n  const closeDeleteModal = () => {\r\n    setDeleteModalState(false);\r\n  };\r\n\r\n  // const { show } = useContextMenu({\r\n  //     id: MENU_ID,\r\n  // });\r\n\r\n  // const handleItemClick = ({ event, props, triggerEvent, data }) => {\r\n  //     console.log(event, props, triggerEvent, data);\r\n\r\n  //     let fileName = props.id.slice(0, -1);\r\n  //     let fileType = props.id.charAt(fileName.length);\r\n\r\n  //     switch (event.currentTarget.id) {\r\n  //         case \"rename\":\r\n  //             // logic to remove the row\r\n  //             console.log(props.id + \" \" + fileName + \" \" + \"rename\"); // contain to item.id passed by `show`\r\n  //             break;\r\n\r\n  //         case \"delete\":\r\n  //             console.log(props.id + \" delete \" + fileType);\r\n\r\n  //             let deletePath = currentDirectoryPath + '/' + fileName\r\n  //             console.log(deletePath);\r\n\r\n  //             if (fileType === \"2\") {\r\n  //                 // Delete a directory\r\n  //                 console.log('deleting a folder');\r\n  //                 axios.post('/deleteDir', { path: currentDirectoryPath, fileName: fileName })\r\n  //                     .then(res => {\r\n  //                         setFileList(res.data);\r\n  //                     })\r\n  //                     .catch(() => {\r\n  //                         console.log('error while deleting file');\r\n  //                     });\r\n  //             }\r\n  //             else {\r\n  //                 // Delete a file\r\n  //                 console.log('deleting a file');\r\n  //                 axios.post('/deleteFile', { path: currentDirectoryPath, fileName: fileName })\r\n  //                     .then(res => {\r\n  //                         setFileList(res.data);\r\n  //                     })\r\n  //                     .catch(() => {\r\n  //                         console.log('error while deleting file');\r\n  //                     });\r\n  //             }\r\n  //             break;\r\n\r\n  //         case \"download\":\r\n  //             console.log(fileType + \" download\");\r\n  //             // downloading a file..\r\n\r\n  //             if (fileType === \"2\") {\r\n  //                 console.log('downloading a folder');\r\n\r\n  //                 axios.post('/downloadDirectory', { path: currentDirectoryPath, name: fileName })\r\n  //                     .then(res => {\r\n  //                         alert(res.data + ' Implement a download progress bar');\r\n  //                     })\r\n  //                     .catch(() => {\r\n  //                         console.log('error while going back');\r\n  //                     });\r\n  //             }\r\n  //             else {\r\n  //                 // downloading a file\r\n  //                 console.log('downloading a File');\r\n  //                 axios.post('/downloadFile', { path: currentDirectoryPath, name: fileName })\r\n  //                     .then(res => {\r\n  //                         alert(res.data + ' Implement a download progress bar');\r\n  //                     })\r\n  //                     .catch(() => {\r\n  //                         console.log('error while going back');\r\n  //                     });\r\n  //             }\r\n  //             break;\r\n  //         default:\r\n  //             break;\r\n  //     }\r\n  // }\r\n\r\n  const confirmDel = () => {\r\n    let fileName = itemDataa.fileName;\r\n    let fileType = itemDataa.fileType;\r\n    let fileSize = itemDataa.fileSize;\r\n\r\n    let deletePath = currentDirectoryPath + \"/\" + fileName;\r\n    console.log(deletePath);\r\n\r\n    setTransferItemDetails({\r\n      fileSize: fileSize,\r\n      fileType: fileType,\r\n      fileName: fileName,\r\n      transferType: \"Delete\",\r\n    });\r\n\r\n    if (fileType === 2) {\r\n      setTransferModalState(true);\r\n\r\n      // Delete a directory\r\n      console.log(\"deleting a folder\");\r\n\r\n      axios\r\n        .post(\"/deleteDir\", {\r\n          path: currentDirectoryPath,\r\n          fileName: fileName,\r\n          connectionDetails: connectionDetails,\r\n        })\r\n        .then((res) => {\r\n          setTransferModalState(false);\r\n\r\n          setFileList(res.data);\r\n          setSnackbarStatus(true);\r\n          setSearchTerm(\"\");\r\n        })\r\n        .catch(() => {\r\n          setConnectionLiveStatus(false);\r\n          setErrorSVG(\r\n            <div className=\"noFilesImage\">\r\n              <NoConnection svgHeight={500} svgWidth={336} />\r\n            </div>\r\n          );\r\n          console.log(\"error while deleting file\");\r\n        });\r\n    } else {\r\n      setTransferModalState(true);\r\n\r\n      // Delete a file\r\n      console.log(\"deleting a file\");\r\n      axios\r\n        .post(\"/deleteFile\", {\r\n          path: currentDirectoryPath,\r\n          fileName: fileName,\r\n          connectionDetails: connectionDetails,\r\n        })\r\n        .then((res) => {\r\n          setTransferModalState(false);\r\n          setFileList(res.data);\r\n          setSnackbarStatus(true);\r\n          setSearchTerm(\"\");\r\n        })\r\n        .catch(() => {\r\n          console.log(\"error while deleting file\");\r\n          setConnectionLiveStatus(false);\r\n          setErrorSVG(\r\n            <div className=\"noFilesImage\">\r\n              <NoConnection svgHeight={500} svgWidth={336} />\r\n            </div>\r\n          );\r\n        });\r\n    }\r\n  };\r\n\r\n  const handleItemClick = (e) => {\r\n    let fileName = itemDataa.fileName;\r\n    let fileType = itemDataa.fileType;\r\n    let fileSize = itemDataa.fileSize;\r\n\r\n    switch (e.value) {\r\n      case \"rename\":\r\n        // logic to remove the row\r\n        console.log(fileName + \" \" + \"rename\"); // contain to item.id passed by `show`\r\n        setRenameModalState(true);\r\n        break;\r\n\r\n      case \"delete\":\r\n        console.log(\" delete \" + fileType);\r\n\r\n        setDeleteModalState(true);\r\n        // confirmDel(fileName, fileType, fileSize);\r\n        break;\r\n\r\n      case \"Download\":\r\n        console.log(fileType + \" download\");\r\n        // downloading a file..\r\n        setTransferItemDetails({\r\n          fileSize: fileSize,\r\n          fileType: fileType,\r\n          fileName: fileName,\r\n          transferType: \"Download\",\r\n        });\r\n\r\n        if (fileType === 2) {\r\n          console.log(\"downloading a folder\");\r\n\r\n          setTransferModalState(true);\r\n          setDownloaderComponentUI(true);\r\n\r\n          axios\r\n            .post(\"/downloadDirectory\", {\r\n              path: currentDirectoryPath,\r\n              name: fileName,\r\n              connectionDetails: connectionDetails,\r\n            })\r\n            .then((res) => {\r\n              setDownloaderComponentUI(false);\r\n              setTransferModalState(false);\r\n              setSnackbarStatus(true);\r\n              // alert(res.data + ' Implement a download progress bar');\r\n            })\r\n            .catch(() => {\r\n              console.log(\"error while downloading\");\r\n              setConnectionLiveStatus(false);\r\n              setErrorSVG(\r\n                <div className=\"noFilesImage\">\r\n                  <NoConnection svgHeight={500} svgWidth={336} />\r\n                </div>\r\n              );\r\n            });\r\n        } else {\r\n          // downloading a file\r\n          setTransferModalState(true);\r\n          setDownloaderComponentUI(true);\r\n\r\n          console.log(\"Before download \" + downloaderComponentUI);\r\n\r\n          axios\r\n            .post(\"/downloadFile\", {\r\n              path: currentDirectoryPath,\r\n              name: fileName,\r\n              connectionDetails: connectionDetails,\r\n            })\r\n            .then((res) => {\r\n              console.log(\"After download: \" + downloaderComponentUI);\r\n              setDownloaderComponentUI(false);\r\n              setTransferModalState(false);\r\n              setSnackbarStatus(true);\r\n              // alert(res.data + ' Implement a download progress bar');\r\n            })\r\n            .catch((e) => {\r\n              console.log(\"error while going back \" + e);\r\n              setConnectionLiveStatus(false);\r\n              setErrorSVG(\r\n                <div className=\"noFilesImage\">\r\n                  <NoConnection svgHeight={500} svgWidth={336} />\r\n                </div>\r\n              );\r\n            });\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const updateSearchResult = async (input) => {\r\n    // setSearchTerm(event.target.value)\r\n    let results = [];\r\n    if (fileList.length > 0) {\r\n      fileList.map((jsFrameworksSearch) => {\r\n        if (jsFrameworksSearch.name.toLowerCase().includes(input.trim()))\r\n          results.push(jsFrameworksSearch);\r\n      });\r\n    }\r\n    setSearchTerm(input);\r\n    setSearchResults(results);\r\n  };\r\n\r\n  // const displayMenu = (e) => {\r\n  //     // put whatever custom logic you need\r\n  //     // you can even decide to not display the Menu\r\n  //     console.log('reaching displayMenu (e)');\r\n  //     show(e, { props: { id: e.currentTarget.id } });\r\n  // }\r\n\r\n  const displayMenu = (e, fileName, fileType, fileSize) => {\r\n    e.preventDefault();\r\n    setAnchorPoint({ x: e.clientX, y: e.clientY });\r\n    setOpen(true);\r\n    setItemDataa({\r\n      fileName: fileName,\r\n      fileType: fileType,\r\n      fileSize: fileSize,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"explorer-main-menu\">\r\n      <div className=\"explorer-title\">\r\n        <h1 className=\"dashboard-copy poppins-bold-black-27-3px\">\r\n          File Explorer\r\n        </h1>\r\n        <div className=\"overlap-group2\">\r\n          {/* <img\r\n                        alt=\"magnifier\"\r\n                        className=\"oval-9\"\r\n                        src=\"/images/icons/Magnifier.svg\"\r\n                    />*/}\r\n          <SearchBar input={searchTerm} onChange={updateSearchResult} />\r\n          {/* <img\r\n                        className=\"path-6\"\r\n                        src=\"/images/icons/Magnifier.svg\"\r\n                    /> */}\r\n        </div>\r\n      </div>\r\n      <div className=\"directory-path\">\r\n        <div className=\"directory-path-section-1\">\r\n          <div className=\"overlap-group-1\">\r\n            <div className=\"rectangle-9\"></div>\r\n            <div className=\"rectangle-10\"></div>\r\n            <div className=\"rectangle-5-copy\"></div>\r\n          </div>\r\n          <p className=\"explorer-path valign-text-middle poppins-medium-black-14px\">\r\n            {currentDirectoryPath === \"/\"\r\n              ? \"Internal Storage >\"\r\n              : currentDirectoryPath.slice(2).replaceAll(\"/\", \" > \")}\r\n          </p>\r\n          <span className=\"goBack\">\r\n            <img\r\n              alt=\"goBack\"\r\n              onClick={() => goBack()}\r\n              className=\"goBackImg\"\r\n              src=\"/images/icons/goBack.svg\"\r\n            ></img>\r\n          </span>\r\n        </div>\r\n\r\n        <div className=\"frame-1\">\r\n          <div className=\"overlap-group\" onClick={() => setModalState(true)}>\r\n            <div className=\"rectangle-1 bizarre-border-1px\"></div>\r\n            <div className=\"rectangle-1 bizarre-border-1px\"></div>\r\n            <div className=\"create-folder valign-text-middle poppins-light-black-14px\">\r\n              Create Folder\r\n            </div>\r\n            <img\r\n              alt=\"addFolder\"\r\n              className=\"icons8-add-older-50-1\"\r\n              src=\"/images/icons/addFolder.svg\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/*\r\n                <span className=\"upload\">\r\n                    <input type=\"file\" name=\"u\" />\r\n                </span> */}\r\n      {/* Modal */}\r\n      <Modal show={modalState} modalClosed={closeModal} color=\"#fff\">\r\n        <CreateFolder\r\n          placeholder=\"Enter folder name\"\r\n          title=\"Create Folder\"\r\n          action=\"Create\"\r\n          create={(folderName) => createFolder(folderName)}\r\n          closeHandler={closeModal}\r\n          path={currentDirectoryPath}\r\n        />\r\n      </Modal>\r\n\r\n      <div className=\"explorer-snackbar\">\r\n        <Snackbar\r\n          // text={transferItemDetails.transferType === \"Download\" ? \"Downloaded Successfully!  Check Desktop/NoWires\" : \"Uploaded Successfully! \"}\r\n          transferType={transferItemDetails.transferType}\r\n          handleSnackbarClose={closeSnackbar}\r\n          show={snackbarStatus}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"explorer-header\">\r\n        <div className=\"place valign-text-middle poppins-light-black-14px\">\r\n          Name\r\n        </div>\r\n        <div className=\"explorer-last-modified valign-text-middle poppins-light-black-14px\">\r\n          Last Modified\r\n        </div>\r\n        <div className=\"size valign-text-middle poppins-light-black-14px\">\r\n          Size\r\n        </div>\r\n      </div>\r\n\r\n      {/* popup for rename */}\r\n      <Modal\r\n        show={renameModalState}\r\n        modalClosed={closeRenameModal}\r\n        color=\"#fff\"\r\n      >\r\n        <CreateFolder\r\n          placeholder=\"Enter new name\"\r\n          title={\"Rename \" + itemDataa.fileName}\r\n          create={(newName) => renameItem(newName)}\r\n          closeHandler={closeRenameModal}\r\n          action=\"Rename\"\r\n          path={currentDirectoryPath + \"/\" + itemDataa.fileName}\r\n        />\r\n      </Modal>\r\n\r\n      {/* popup for delete */}\r\n      <Modal\r\n        show={deleteModalState}\r\n        modalClosed={closeDeleteModal}\r\n        color=\"#fff\"\r\n      >\r\n        <ConfirmDelete\r\n          title={itemDataa.fileName}\r\n          delete={confirmDel}\r\n          closeHandler={closeDeleteModal}\r\n          path={currentDirectoryPath + \"/\" + itemDataa.fileName}\r\n        />\r\n      </Modal>\r\n\r\n      {/* popup for transfer progress */}\r\n      <Modal\r\n        show={transferModalState}\r\n        // modalClosed={closeTransferModal}\r\n        color=\"#fff\"\r\n      >\r\n        <DownloadPopup\r\n          placeholder={transferItemDetails.transferType}\r\n          name={transferItemDetails.fileName}\r\n          // create={(newName) => renameItem(newName)}\r\n          type={transferItemDetails.fileType}\r\n          closeHandler={closeTransferModal}\r\n          size={transferItemDetails.fileSize}\r\n          path={\r\n            currentDirectoryPath +\r\n            \"/\" +\r\n            transferItemDetails.fileName.split(\".\").slice(0, -1).join(\".\")\r\n          }\r\n        />\r\n      </Modal>\r\n\r\n      {/* popup for upload progress */}\r\n      {/* <Modal\r\n                show={transferModalState}\r\n                // modalClosed={closeTransferModal}\r\n                color=\"#fff\">\r\n                <DownloadPopup\r\n                    placeholder=\"Upload\"\r\n                    // name={transferItemDetails.fileName.split('.').slice(0, -1).join('.')}\r\n                    name={transferItemDetails.fileName}\r\n                    // create={(newName) => renameItem(newName)}\r\n                    type={transferItemDetails.fileType}\r\n                    closeHandler={closeTransferModal}\r\n                    size={transferItemDetails.fileSize}\r\n                    path={currentDirectoryPath + '/' + transferItemDetails.fileName.split('.').slice(0, -1).join('.')} />\r\n            </Modal> */}\r\n\r\n      <div className=\"App\">{loading && <FileSkeleton />}</div>\r\n      <DragAndDrop handleDrop={handleDrop}>\r\n        <div ref={ref} className=\"explorer-data\" id=\"explorer-data-files\">\r\n          {searchResults.length > 0 && connectionLiveStatus\r\n            ? searchResults.map((item, index) => {\r\n                return (\r\n                  <FileComponent\r\n                    key={index}\r\n                    id={item.name + item.type}\r\n                    onContextMenu={(e) =>\r\n                      displayMenu(e, item.name, item.type, item.size)\r\n                    }\r\n                    onClick={() => changePath(item.name, item.type, item.size)}\r\n                    onDoubleClick={() =>\r\n                      changePath(item.name, item.type, item.size)\r\n                    }\r\n                    name={item.name}\r\n                    type={item.type}\r\n                    size={item.size}\r\n                    lastMod={item.modifiedAt}\r\n                  />\r\n                );\r\n              })\r\n            : errorSVG}\r\n\r\n          {/* <Menu id={MENU_ID}>\r\n                        <Item id=\"rename\" onClick={handleItemClick}>\r\n                            Rename\r\n                        </Item>\r\n                        <Item id=\"delete\" onClick={handleItemClick}>\r\n                            Delete\r\n                        </Item>\r\n                        <Item id=\"download\" onClick={handleItemClick}>\r\n                            Download\r\n                        </Item>\r\n                    </Menu> */}\r\n\r\n          <ControlledMenu\r\n            anchorPoint={anchorPoint}\r\n            isOpen={isOpen}\r\n            onClose={() => setOpen(false)}\r\n          >\r\n            <MenuItem value=\"rename\" onClick={handleItemClick}>\r\n              Rename\r\n            </MenuItem>\r\n            <MenuItem value=\"delete\" onClick={handleItemClick}>\r\n              Delete\r\n            </MenuItem>\r\n            <MenuItem value=\"Download\" onClick={handleItemClick}>\r\n              Download\r\n            </MenuItem>\r\n          </ControlledMenu>\r\n        </div>\r\n      </DragAndDrop>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExplorerMenu;\r\n","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\SideBar\\Sidebar2.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\pages\\Dashboard\\FilesMenu\\FilesMenu2.js",["154","155","156","157","158","159","160"],"import { React, useEffect, useState, useRef } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport './FilesMenu2.css';\r\nimport DragAndDrop from '../../../components/DragAndDrop/DragAndDrop';\r\nimport FileComponent from '../../../components/FileExplorer/FileComponent/FileComponent';\r\nimport NoFiles from '../../../Errors/NoFiles/NoFiles';\r\nimport axios from 'axios';\r\nimport Snackbar from '../../../components/Snackbar/Snackbar';\r\nimport Modal from '../../../components/Modal/Modal';\r\nimport DownloadPopup from '../../../components/FileExplorer/ExplorerMenu/DownloadPopup/DownloadPopup';\r\nimport CreateFolder from '../../../components/FileExplorer/ExplorerMenu/CreateFolder/CreateFolder';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport SearchBar from '../../../components/FileExplorer/ExplorerMenu/SearchBar/SearchBar';\r\nimport NoConnection from '../../../Errors/NoConnection/NoConnection';\r\nimport FileSkeleton from '../../../components/skeleton/FileSkeleton2';\r\n\r\nimport {\r\n    MenuItem,\r\n    ControlledMenu\r\n} from '@szhsin/react-menu';\r\n\r\nconst FilesMenu2 = () => {\r\n\r\n    const connectionDetails = useSelector(state => state != null ? state.connectionDetails : null);\r\n    const [connectionLiveStatus, setConnectionLiveStatus] = useState(true);\r\n\r\n    const [fileList, setFileList] = useState([]);\r\n\r\n    const [isOpen, setOpen] = useState(false);\r\n    const [anchorPoint, setAnchorPoint] = useState({ x: 0, y: 0 });\r\n    const [itemDataa, setItemDataa] = useState({ fileName: \"fileName\", fileType: 1, fileSize: \"230 Mb\" });\r\n\r\n    // current directory and transfer states\r\n    const [currentDirectoryPath, setCurrentDirectoryPath] = useState('/Download');\r\n    const [transferModalState, setTransferModalState] = useState(false);\r\n    const [transferItemDetails, setTransferItemDetails] = useState({ fileName: \"filename\", fileType: 1, fileSize: \"200 Mb\", transferType: \"Download\" });\r\n\r\n    // rename states\r\n    const [renameModalState, setRenameModalState] = useState(false);\r\n\r\n    const [downloaderComponentUI, setDownloaderComponentUI] = useState(true);\r\n    const [snackbarStatus, setSnackbarStatus] = useState(false);\r\n\r\n    // Search states\r\n    const [searchTerm, setSearchTerm] = useState(\"\");\r\n    const [searchResults, setSearchResults] = useState([]);\r\n\r\n    // Error SVG\r\n    const [errorSVG, setErrorSVG] = useState(null);\r\n\r\n    let storagePercent = (connectionDetails.usedSpace / connectionDetails.totalSize) * 100;\r\n\r\n    // ref for scroll\r\n    const ref = useRef();\r\n\r\n    // lazy loading\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        axios.post('/changePath', { path: currentDirectoryPath, connectionDetails: connectionDetails })\r\n            .then(res => {\r\n                setFileList(res.data);\r\n                setLoading(false);\r\n                setSearchTerm(\"\");\r\n                refreshScrollBar();\r\n            })\r\n            .catch((e) => {\r\n                setConnectionLiveStatus(false);\r\n                setLoading(false);\r\n                console.log('error while fetching files list ' + e);\r\n                setErrorSVG(<div className=\"noFilesImageDashboard\" >\r\n                    <NoConnection svgHeight={290} svgWidth={336} />\r\n                </div>)\r\n            });\r\n    }, [currentDirectoryPath])\r\n\r\n    useEffect(() => {\r\n        let results = [];\r\n        if (fileList.length > 0) {\r\n            fileList.map(jsFrameworksSearch => {\r\n                if (jsFrameworksSearch.name.toLowerCase().includes(searchTerm.trim()))\r\n                    results.push(jsFrameworksSearch);\r\n            })\r\n        }\r\n        else if (connectionDetails.host != null) {\r\n            setErrorSVG(<div className=\"noFilesImageDashboard\" >\r\n                <NoFiles />\r\n                <p>No Files</p>\r\n            </div>)\r\n        }\r\n\r\n        setSearchResults(results);\r\n    }, [searchTerm, fileList])\r\n\r\n    const refreshScrollBar = () => {\r\n        ref.current.scrollTo(0, 0)\r\n    }\r\n\r\n    let history = useHistory();\r\n\r\n    const changeRoute = (path) => {\r\n        history.push(path);\r\n    }\r\n\r\n    const changePath = (name, type, size) => {\r\n        setTransferItemDetails({ fileSize: size, fileType: type, fileName: name, transferType: \"Download\" });\r\n        if (type === 2) {\r\n            setLoading(true);\r\n            setCurrentDirectoryPath(currentDirectoryPath + '/' + name); // works for ftp-server app\r\n            // setCurrentDirectoryPath(currentDirectoryPath + name) \r\n        }\r\n        else {\r\n\r\n            // file name without extension = filename.split('.').slice(0, -1).join('.')\r\n\r\n            // const file = {\r\n            //     name: name,\r\n            //     // name: \"photo-1\",\r\n            //     thumb:\r\n            //         \"https://images.unsplash.com/photo-1604263439201-171fb8c0fddc?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=427&q=80 427w\",\r\n            //     file:\r\n            //         \"https://images.unsplash.com/photo-1604263439201-171fb8c0fddc?rnd=\" +\r\n            //         Math.random(),\r\n\r\n            //     filename: name,\r\n            //     // filename: \"photo-1.jpg\",\r\n            //     currentDirectoryPath: currentDirectoryPath,\r\n            //     connectionDetails: connectionDetails\r\n            // };\r\n\r\n            // downloadFile(file)\r\n\r\n            // Download file function..\r\n            setTransferModalState(true);\r\n            setDownloaderComponentUI(true);\r\n\r\n            console.log(\"Before download \" + downloaderComponentUI);\r\n\r\n            axios.post('/downloadFile', { path: currentDirectoryPath, name: name, connectionDetails: connectionDetails })\r\n                .then(res => {\r\n                    console.log(\"After download: \" + downloaderComponentUI);\r\n                    setDownloaderComponentUI(false)\r\n                    setTransferModalState(false);\r\n                    setSnackbarStatus(true);\r\n                    // alert(res.data + ' Implement a download progress bar');\r\n                })\r\n                .catch((e) => {\r\n                    console.log('error while going back ' + e);\r\n                    setConnectionLiveStatus(false)\r\n                    setErrorSVG(<div className=\"noFilesImageDashboard\" >\r\n                        <NoConnection svgHeight={290} svgWidth={336} />\r\n                    </div>)\r\n                });\r\n            // }\r\n        }\r\n    }\r\n\r\n    const getCodedBuffer = file => {\r\n        return new Promise(function (resolve, reject) {\r\n            let fileReader = new FileReader();\r\n            fileReader.readAsArrayBuffer(file);\r\n\r\n            fileReader.onload = function (ev) {\r\n                const array = new Uint8Array(ev.target.result);\r\n                // const fileByteArray = [];\r\n                let codedBuffer = '';\r\n\r\n                for (let i = 0; i < array.length; i++) {\r\n                    // fileByteArray.push(array[i]);\r\n                    codedBuffer += String.fromCharCode(array[i]);\r\n                }\r\n                resolve(codedBuffer);  // successful\r\n            }\r\n            fileReader.onerror = reject; // call reject if error\r\n        })\r\n    }\r\n\r\n    const handleDrop = files => {\r\n        // Implement upload function\r\n        setTransferModalState(true);\r\n\r\n        for (let i = 0; i < files.length; i++) {\r\n\r\n            let fileType = \"Folder\";\r\n            let fileSize = files[i].size\r\n\r\n            if (files[i].isFile) {\r\n                fileType = 1;\r\n                fileSize = files[i].size;\r\n                console.log(\"file size: \" + files[i].size);\r\n            }\r\n\r\n            setTransferItemDetails({\r\n                fileName: files[i].name,\r\n                fileType: fileType,\r\n                fileSize: fileSize,\r\n                transferType: \"Upload\"\r\n            })\r\n\r\n            getCodedBuffer(files[i]).then(result => {\r\n                axios.post('/handleDrop', { value: result, fileName: files[i].name, path: currentDirectoryPath, connectionDetails: connectionDetails })\r\n                    .then(res => {\r\n                        setTransferModalState(false);\r\n                        setFileList(res.data);\r\n                        setSnackbarStatus(true);\r\n                    })\r\n                    .catch(err => {\r\n                        alert('error occured while uploading ' + err)\r\n                        setConnectionLiveStatus(false)\r\n                        setErrorSVG(<div className=\"noFilesImageDashboard\" >\r\n                            <NoConnection svgHeight={290} svgWidth={336} />\r\n                        </div>)\r\n                    });\r\n            })\r\n        }\r\n    }\r\n\r\n    const handleItemClick = e => {\r\n\r\n        let fileName = itemDataa.fileName;\r\n        let fileType = itemDataa.fileType;\r\n        let fileSize = itemDataa.fileSize;\r\n\r\n        switch (e.value) {\r\n            case \"rename\":\r\n                // logic to remove the row\r\n                console.log(fileName + \" \" + \"rename\"); // contain to item.id passed by `show`\r\n                setRenameModalState(true);\r\n                break;\r\n\r\n            case \"delete\":\r\n                console.log(\" delete \" + fileType);\r\n\r\n                setTransferItemDetails({ fileSize: fileSize, fileType: fileType, fileName: fileName, transferType: \"Delete\" });\r\n\r\n                let deletePath = currentDirectoryPath + '/' + fileName\r\n                console.log(deletePath);\r\n                console.log(fileType)\r\n\r\n                if (fileType === 2) {\r\n                    // Delete a directory\r\n                    console.log('deleting a folder');\r\n                    axios.post('/deleteDir', { path: currentDirectoryPath, fileName: fileName, connectionDetails: connectionDetails })\r\n                        .then(res => {\r\n                            setFileList(res.data);\r\n                            setSearchTerm(\"\")\r\n                            setSnackbarStatus(true);\r\n                        })\r\n                        .catch(() => {\r\n                            console.log('error while deleting file');\r\n                            setConnectionLiveStatus(false);\r\n                            setErrorSVG(<div className=\"noFilesImageDashboard\" >\r\n                                <NoConnection svgHeight={290} svgWidth={336} />\r\n                            </div>)\r\n                        });\r\n                }\r\n                else {\r\n                    // Delete a file\r\n                    console.log('deleting a file');\r\n                    axios.post('/deleteFile', { path: currentDirectoryPath, fileName: fileName, connectionDetails: connectionDetails })\r\n                        .then(res => {\r\n                            setFileList(res.data);\r\n                            setSearchTerm(\"\")\r\n                            setSnackbarStatus(true);\r\n                        })\r\n                        .catch(() => {\r\n                            console.log('error while deleting file');\r\n                            setConnectionLiveStatus(false);\r\n                            setErrorSVG(<div className=\"noFilesImageDashboard\" >\r\n                                <NoConnection svgHeight={290} svgWidth={336} />\r\n                            </div>)\r\n                        });\r\n                }\r\n                break;\r\n\r\n            case \"download\":\r\n                console.log(fileType + \" download\");\r\n                // downloading a file.. \r\n                setTransferItemDetails({ fileSize: fileSize, fileType: fileType, fileName: fileName, transferType: \"Download\" });\r\n\r\n                if (fileType === 2) {\r\n                    console.log('downloading a folder');\r\n\r\n                    setTransferModalState(true);\r\n                    setDownloaderComponentUI(\r\n                        true);\r\n\r\n                    axios.post('/downloadDirectory', { path: currentDirectoryPath, name: fileName, connectionDetails: connectionDetails })\r\n                        .then(res => {\r\n                            setDownloaderComponentUI(false)\r\n                            setTransferModalState(false);\r\n                            setSnackbarStatus(true);\r\n                            // alert(res.data + ' Implement a download progress bar');\r\n                        })\r\n                        .catch(() => {\r\n                            console.log('error while going back');\r\n                            setConnectionLiveStatus(false);\r\n                            setErrorSVG(<div className=\"noFilesImageDashboard\" >\r\n                                <NoConnection svgHeight={290} svgWidth={336} />\r\n                            </div>)\r\n                        });\r\n                }\r\n                else {\r\n                    // downloading a file\r\n                    setTransferModalState(true);\r\n                    setDownloaderComponentUI(\r\n                        true);\r\n\r\n                    console.log(\"Before download \" + downloaderComponentUI);\r\n\r\n                    axios.post('/downloadFile', { path: currentDirectoryPath, name: fileName, connectionDetails: connectionDetails })\r\n                        .then(res => {\r\n                            console.log(\"After download: \" + downloaderComponentUI);\r\n                            setDownloaderComponentUI(false)\r\n                            setTransferModalState(false);\r\n                            setSnackbarStatus(true);\r\n                            // alert(res.data + ' Implement a download progress bar');\r\n                        })\r\n                        .catch((e) => {\r\n                            setConnectionLiveStatus(false);\r\n                            setErrorSVG(<div className=\"noFilesImageDashboard\" >\r\n                                <NoConnection svgHeight={290} svgWidth={336} />\r\n                            </div>)\r\n                        });\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    const renameItem = newName => {\r\n        // let oldName = itemData.slice(0, -1);\r\n        let oldName = itemDataa.fileName;\r\n        let ext = oldName.split('.').pop();\r\n\r\n        newName = newName + '.' + ext;\r\n\r\n        axios.post('/renameFile', { oldName: oldName, path: currentDirectoryPath, newName: newName, connectionDetails: connectionDetails })\r\n            .then(res => {\r\n                setFileList(res.data);\r\n            })\r\n            .catch((e) => {\r\n                console.log('error while renaming file ' + e);\r\n            })\r\n    }\r\n\r\n    const closeRenameModal = () => {\r\n        setRenameModalState(false);\r\n    }\r\n\r\n    const closeTransferModal = () => {\r\n        setTransferModalState(false);\r\n    }\r\n\r\n    const closeSnackbar = () => {\r\n        setSnackbarStatus(false);\r\n    }\r\n\r\n    const goBack = () => {\r\n        setLoading(true);\r\n        const p = (currentDirectoryPath.slice(0, currentDirectoryPath.lastIndexOf('/')));\r\n        if (p !== '') {\r\n            axios.post('/changePath', { path: p, connectionDetails: connectionDetails })\r\n                .then(res => {\r\n                    setLoading(false);\r\n                    setFileList(res.data);\r\n                })\r\n                .catch((e) => {\r\n                    setLoading(false);\r\n                    console.log('error while going back ' + e);\r\n                });\r\n            setCurrentDirectoryPath(currentDirectoryPath.slice(0, currentDirectoryPath.lastIndexOf('/')))\r\n        }\r\n        else {\r\n            setLoading(false);\r\n            alert('nope nope')\r\n        }\r\n    }\r\n\r\n    const displayMenu = (e, fileName, fileType, fileSize) => {\r\n        e.preventDefault();\r\n        setAnchorPoint({ x: e.clientX, y: e.clientY });\r\n        setOpen(true);\r\n        setItemDataa({ fileName: fileName, fileType: fileType, fileSize: fileSize });\r\n    };\r\n\r\n    const updateSearchResult = async (input) => {\r\n        // setSearchTerm(event.target.value)\r\n        let results = [];\r\n        if (fileList.length > 0) {\r\n            fileList.map(jsFrameworksSearch => {\r\n                if (jsFrameworksSearch.name.toLowerCase().includes(input.trim()))\r\n                    results.push(jsFrameworksSearch)\r\n            })\r\n        }\r\n        setSearchTerm(input)\r\n        setSearchResults(results);\r\n    }\r\n\r\n    return (\r\n        <div className=\"dashboard-screen\">\r\n            <h1 className=\"dashboard-copy poppins-bold-black-27-3px\">Dashboard</h1>\r\n            <div className=\"dashboard-storage-details\">\r\n                <div className=\"dashboard-overlap-group\" onClick={() => changeRoute(\"/explorer\")}>\r\n                    <div className=\"dashboard-overlap-group-header\">\r\n                        <img className=\"macos-folder-icon\" src=\"/images/macos-folder-icon.png\" />\r\n                        <div className=\"internal-storage poppins-medium-black-14px\">Internal Storage</div>\r\n                    </div>\r\n                    <div className=\"storage-progress\">\r\n                        <progress max=\"100\" value={storagePercent}></progress>\r\n                        <div className=\"storage-progress-count poppins-regular-black-12px\">\r\n                            {console.log(connectionDetails)}\r\n                            <p>{connectionDetails.usedSpace + \" GB\"}</p>\r\n                            <p>{connectionDetails.totalSize + \" GB\"}</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"recently-used\">\r\n                <div className=\"dashboard-recently-used-title\">\r\n                    <div className=\"downloadsPath\">\r\n                        <div className=\"recently-used-1 poppins-medium-black-18px\">\r\n                            {currentDirectoryPath === '/Download' ? 'Downloads ' : currentDirectoryPath.slice(1).replaceAll('/', ' > ')}\r\n                        </div>\r\n                        {currentDirectoryPath != '/Download' ? <span className=\"goBack\">\r\n                            <img alt=\"goBack\" onClick={() => goBack()}\r\n                                className=\"goBackImg\" src=\"/images/icons/goBack.svg\"></img>\r\n                        </span> : null}\r\n                        {/* <span className=\"goBack\">\r\n                            <img alt=\"goBack\" onClick={() => goBack()}\r\n                                className=\"goBackImg\" src=\"/images/icons/goBack.svg\"></img>\r\n                        </span> */}\r\n                        <SearchBar input={searchTerm} onChange={updateSearchResult} />\r\n                    </div>\r\n                    <div className=\"view-all poppins-regular-normal-black-14px\"\r\n                        onClick={() => changeRoute(\"/explorer\")}>View all</div>\r\n                </div>\r\n                <div className=\"recently-used-data\">\r\n                    <div className=\"recently-used-name valign-text-middle poppins-light-black-14px\">Name</div>\r\n                    <div className=\"recently-used-last-m valign-text-middle poppins-light-black-14px\">Last Modified</div>\r\n                    <div className=\"size valign-text-middle poppins-light-black-14px\">Size</div>\r\n                </div>\r\n\r\n                {/* Rename */}\r\n                <Modal\r\n                    show={renameModalState}\r\n                    modalClosed={closeRenameModal}\r\n                    color=\"#fff\">\r\n                    <CreateFolder\r\n                        placeholder=\"Enter new name\"\r\n                        title={\"Rename \" + itemDataa.fileName}\r\n                        create={(newName) => renameItem(newName)}\r\n                        closeHandler={closeRenameModal}\r\n                        action=\"Rename\"\r\n                        path={currentDirectoryPath + '/' + itemDataa.fileName} />\r\n                </Modal>\r\n\r\n                {/* popup for transfer progress */}\r\n                <Modal\r\n                    show={transferModalState}\r\n                    // modalClosed={closeTransferModal}\r\n                    color=\"#fff\">\r\n                    <DownloadPopup\r\n                        placeholder={transferItemDetails.transferType}\r\n                        name={transferItemDetails.fileName}\r\n                        // create={(newName) => renameItem(newName)}\r\n                        type={transferItemDetails.fileType}\r\n                        closeHandler={closeTransferModal}\r\n                        size={transferItemDetails.fileSize}\r\n                        path={currentDirectoryPath + '/' + transferItemDetails.fileName.split('.').slice(0, -1).join('.')} />\r\n                </Modal>\r\n\r\n                {/* Snackbar */}\r\n                <div className=\"explorer-snackbar\">\r\n                    <Snackbar\r\n                        transferType={transferItemDetails.transferType}\r\n                        handleSnackbarClose={closeSnackbar}\r\n                        show={snackbarStatus} />\r\n                </div>\r\n\r\n                <div className=\"App\">\r\n                    {loading && <FileSkeleton />}\r\n                </div>\r\n\r\n                <DragAndDrop handleDrop={handleDrop}>\r\n                    <div className=\"recently-used-explorer-data\" ref={ref}>\r\n                        {searchResults.length > 0 && connectionLiveStatus ? searchResults.map((item, index) => {\r\n                            return (\r\n                                <FileComponent key={index}\r\n                                    id={item.name + item.type}\r\n                                    onContextMenu={(e) => displayMenu(e, item.name, item.type, item.size)}\r\n                                    onClick={() => changePath(item.name, item.type, item.size)}\r\n                                    name={item.name}\r\n                                    type={item.type}\r\n                                    size={item.size}\r\n                                    lastMod={item.modifiedAt} />\r\n                            )\r\n                        }) : errorSVG}\r\n\r\n                        {/* <Menu id={MENU_ID}>\r\n                        <Item id=\"rename\" onClick={handleItemClick}>\r\n                            Rename\r\n                        </Item>\r\n                        <Item id=\"delete\" onClick={handleItemClick}>\r\n                            Delete\r\n                        </Item>\r\n                        <Item id=\"download\" onClick={handleItemClick}>\r\n                            Download\r\n                        </Item>\r\n                    </Menu> */}\r\n\r\n                        <ControlledMenu anchorPoint={anchorPoint} isOpen={isOpen}\r\n                            onClose={() => setOpen(false)}>\r\n                            <MenuItem value=\"rename\" onClick={handleItemClick}>\r\n                                Rename\r\n                        </MenuItem>\r\n                            <MenuItem value=\"delete\" onClick={handleItemClick}>\r\n                                Delete\r\n                        </MenuItem>\r\n                            <MenuItem value=\"download\" onClick={handleItemClick}>\r\n                                Download\r\n                        </MenuItem>\r\n                        </ControlledMenu>\r\n\r\n                    </div>\r\n                </DragAndDrop>\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default FilesMenu2;","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\PhoneSection\\Phone.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\Header\\Header.js",["161","162","163"],"import React, { useEffect, useState } from 'react'\r\nimport './Header.css'\r\nimport { BiMenuAltLeft } from 'react-icons/bi';\r\nimport { IoCloseOutline } from 'react-icons/io5';\r\nimport { TweenMax } from 'gsap'\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Contact from '../../pages/Contact/Contact';\r\n// import { Link } from 'react-router-dom'\r\n\r\nconst Header = () => {\r\n\r\n    let history = useHistory();\r\n    const [contactPageStatus, setContactPageStatus] = useState(false);\r\n\r\n    const changeRoute = (path) => {\r\n        history.push(path);\r\n    }\r\n\r\n    useEffect(() => {\r\n        TweenMax.from('.navLogo', { autoAlpha: 0, duration: 1, opacity: 0, y: 10, delay: 2 });\r\n        TweenMax.from('.navToggle', { autoAlpha: 0, duration: 1, opacity: 0, y: 10, delay: 2 })\r\n        TweenMax.from('.navItem', { autoAlpha: 0, opacity: 0, duration: 1, delay: 2.1, y: 30, stagger: 0.2, })\r\n    }, [])\r\n\r\n    const revealContactPage = () => {\r\n        console.log('reached')\r\n        setContactPageStatus(true)\r\n    }\r\n\r\n    return (\r\n        <header className=\"l-header\">\r\n            <nav className=\"nav bd-grid-header\">\r\n                <div>\r\n                    <a href=\"/\" className=\"navLogo\">No Wires</a>\r\n                </div>\r\n\r\n                <div className=\"navToggle\" id=\"nav-toggle\" >\r\n                    <BiMenuAltLeft />\r\n                </div>\r\n\r\n                <div className=\"navMenu\" id=\"nav-menu\">\r\n                    <div className=\"navClose\" id=\"nav-close\">\r\n                        <IoCloseOutline />\r\n                    </div>\r\n\r\n                    <ul className=\"navList\">\r\n                        {/* <Link style={{ textDecoration: \"none\" }} to='/home'> */}\r\n                        <li className=\"navItem navLink\">Home</li>\r\n                        {/* </Link> */}\r\n\r\n                        {/* <Link style={{ textDecoration: \"none\" }} to='/myOrders'> */}\r\n                        <li className=\"navItem\" ><a onClick={() => changeRoute(\"/explorer\")} className=\"navLink\">Explorer</a></li>\r\n                        {/* </Link> */}\r\n\r\n                        {/* <Link style={{ textDecoration: \"none\" }} to='/about'> */}\r\n                        <li className=\"navItem\"><a onClick={() => changeRoute(\"/about\")} className=\"navLink\">About</a></li>\r\n                        {/* </Link> */}\r\n\r\n                        {/* <Link style={{ textDecoration: \"none\" }} to='/contact'> */}\r\n                        <li className=\"navItem\"><a onClick={() => revealContactPage()} className=\"navLink\">Contact</a></li>\r\n                        {/* </Link> */}\r\n\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n            {contactPageStatus && <div style={{\r\n                display: 'flex',\r\n                justifyContent: 'center',\r\n            }}><Contact closeHandler={() => setContactPageStatus(false)} /></div>}\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\Footer\\Footer.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\Modal\\Modal.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\Snackbar\\Snackbar.js",["164","165","166","167"],"import React, { useState, useEffect } from 'react';\r\nimport { GoVerified } from \"react-icons/go\";\r\nimport { VscClose } from \"react-icons/vsc\";\r\nimport './Snackbar.css'\r\n\r\nconst homeDir = require('os').homedir();\r\nconst desktopDir = `${homeDir}/Desktop`;\r\n\r\nconst Snackbar = (props) => {\r\n\r\n    const handleClose = () => {\r\n        props.handleSnackbarClose();\r\n    };\r\n\r\n    const openExplorerLink = () => {\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div class=\"snackbar-frame-1\" style={{ opacity: props.show ? '1' : '0' }}>\r\n                <div class=\"snackbar-verified\">\r\n                    <GoVerified />\r\n                </div>\r\n                <p class=\"snackbar-text-1 poppins-medium-black-14px\">{(() => {\r\n                    switch (props.transferType) {\r\n                        case \"Download\": return (\"Downloaded Successfully! Check Desktop/NoWires\");\r\n                        case \"Upload\": return (\"Uploaded Successfully!\");\r\n                        case \"Delete\": return (\"Deleted Successfully!\");\r\n                        default: return (\" \");\r\n                    }\r\n                })()}</p>\r\n                <div class=\"close\" onClick={handleClose}>\r\n                    <VscClose color=\"#484848\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Snackbar;","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\DragAndDrop\\DragAndDrop.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\FileExplorer\\FileComponent\\FileComponent.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\Errors\\NoFiles\\NoFiles.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\FileExplorer\\ExplorerMenu\\DownloadPopup\\DownloadPopup.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\FileExplorer\\ExplorerMenu\\SearchBar\\SearchBar.js",["168","169","170"],"import React from 'react';\r\nimport './SearchBar.css';\r\nimport { BiSearch } from \"react-icons/bi\";\r\n\r\nconst SearchBar = ({ input: keyword, onChange: setKeyword }) => {\r\n    const BarStyling = { width: \"10rem\", background: \"#F2F1F9\", border: \"none\", padding: \"0.5rem\" };\r\n\r\n    return (\r\n        // <input className=\"searchbar\"\r\n        //     style={BarStyling}\r\n        //     key=\"random1\"\r\n        //     value={keyword}\r\n        //     placeholder={\"search\"}\r\n        // autocomplete=\"off\"\r\n        //     onChange={(e) => setKeyword(e.target.value)}\r\n        // />\r\n        // <div>\r\n\r\n        //     <input id=\"searchBar-search-box\"\r\n        //         autocomplete=\"off\"\r\n        //         type=\"text\"\r\n        //         class=\"searchBar-search-box\"\r\n        //         name=\"q\" />\r\n        //     <label for=\"searchBar-search-box\">\r\n        //         <span class=\"searchBar-search-icon\">\r\n        //             <img src=\"https://img.icons8.com/android/14/000000/search.png\" />\r\n        //         </span>\r\n        //     </label>\r\n        // </div>\r\n\r\n        <div className=\"searchBar\">\r\n            <input id=\"searchBar-search-box\"\r\n                type=\"text\"\r\n                class=\"searchBar-search-box\"\r\n                name=\"q\"\r\n                onChange={(e) => setKeyword(e.target.value)}\r\n                value={keyword}\r\n                placeholder={\"search\"}\r\n                autocomplete=\"off\" />\r\n            <label for=\"searchBar-search-box\">\r\n                <span class=\"searchBar-search-icon\">\r\n                    <img src=\"https://img.icons8.com/android/14/000000/search.png\" />\r\n                </span>\r\n            </label>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBar;","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\Errors\\NoConnection\\NoConnection.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\FileExplorer\\ExplorerMenu\\CreateFolder\\CreateFolder.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\hoc\\Auxiliary.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\Backdrop\\Backdrop.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\FileExplorer\\FileComponent\\IconComponent\\IconComponent.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\helpers\\useSingleClick\\useSingleAndDoubleClicks.js",[],["171","172"],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\skeleton\\FileSkeleton.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\skeleton\\FileSkeleton2.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\FileExplorer\\ExplorerMenu\\ConfirmDelete\\ConfirmDelete.js",[],{"ruleId":"173","replacedBy":"174"},{"ruleId":"175","replacedBy":"176"},{"ruleId":"177","severity":1,"message":"178","line":8,"column":8,"nodeType":"179","messageId":"180","endLine":8,"endColumn":15},{"ruleId":"181","severity":1,"message":"182","line":12,"column":9,"nodeType":"183","messageId":"184","endLine":12,"endColumn":18},{"ruleId":"181","severity":1,"message":"182","line":29,"column":17,"nodeType":"183","messageId":"184","endLine":29,"endColumn":26},{"ruleId":"177","severity":1,"message":"185","line":8,"column":23,"nodeType":"179","messageId":"180","endLine":8,"endColumn":34},{"ruleId":"177","severity":1,"message":"186","line":57,"column":10,"nodeType":"179","messageId":"180","endLine":57,"endColumn":25},{"ruleId":"177","severity":1,"message":"187","line":57,"column":27,"nodeType":"179","messageId":"180","endLine":57,"endColumn":45},{"ruleId":"177","severity":1,"message":"188","line":58,"column":10,"nodeType":"179","messageId":"180","endLine":58,"endColumn":15},{"ruleId":"177","severity":1,"message":"189","line":58,"column":17,"nodeType":"179","messageId":"180","endLine":58,"endColumn":25},{"ruleId":"190","severity":1,"message":"191","line":116,"column":6,"nodeType":"192","endLine":116,"endColumn":28,"suggestions":"193"},{"ruleId":"194","severity":1,"message":"195","line":121,"column":41,"nodeType":"196","messageId":"197","endLine":121,"endColumn":43},{"ruleId":"190","severity":1,"message":"198","line":139,"column":6,"nodeType":"192","endLine":139,"endColumn":28,"suggestions":"199"},{"ruleId":"200","severity":1,"message":"201","line":535,"column":36,"nodeType":"202","messageId":"203","endLine":535,"endColumn":37},{"ruleId":"194","severity":1,"message":"195","line":623,"column":41,"nodeType":"196","messageId":"197","endLine":623,"endColumn":43},{"ruleId":"190","severity":1,"message":"191","line":75,"column":8,"nodeType":"192","endLine":75,"endColumn":30,"suggestions":"204"},{"ruleId":"194","severity":1,"message":"195","line":80,"column":45,"nodeType":"196","messageId":"197","endLine":80,"endColumn":47},{"ruleId":"190","severity":1,"message":"198","line":93,"column":8,"nodeType":"192","endLine":93,"endColumn":30,"suggestions":"205"},{"ruleId":"200","severity":1,"message":"201","line":227,"column":44,"nodeType":"202","messageId":"203","endLine":227,"endColumn":45},{"ruleId":"194","severity":1,"message":"195","line":392,"column":45,"nodeType":"196","messageId":"197","endLine":392,"endColumn":47},{"ruleId":"206","severity":1,"message":"207","line":407,"column":25,"nodeType":"208","endLine":407,"endColumn":98},{"ruleId":"209","severity":1,"message":"210","line":426,"column":47,"nodeType":"202","messageId":"184","endLine":426,"endColumn":49},{"ruleId":"211","severity":1,"message":"212","line":52,"column":50,"nodeType":"208","endLine":52,"endColumn":114},{"ruleId":"211","severity":1,"message":"212","line":56,"column":49,"nodeType":"208","endLine":56,"endColumn":110},{"ruleId":"211","severity":1,"message":"212","line":60,"column":49,"nodeType":"208","endLine":60,"endColumn":108},{"ruleId":"177","severity":1,"message":"213","line":1,"column":17,"nodeType":"179","messageId":"180","endLine":1,"endColumn":25},{"ruleId":"177","severity":1,"message":"214","line":1,"column":27,"nodeType":"179","messageId":"180","endLine":1,"endColumn":36},{"ruleId":"177","severity":1,"message":"215","line":7,"column":7,"nodeType":"179","messageId":"180","endLine":7,"endColumn":17},{"ruleId":"177","severity":1,"message":"216","line":15,"column":11,"nodeType":"179","messageId":"180","endLine":15,"endColumn":27},{"ruleId":"177","severity":1,"message":"217","line":3,"column":10,"nodeType":"179","messageId":"180","endLine":3,"endColumn":18},{"ruleId":"177","severity":1,"message":"218","line":6,"column":11,"nodeType":"179","messageId":"180","endLine":6,"endColumn":21},{"ruleId":"206","severity":1,"message":"207","line":42,"column":21,"nodeType":"208","endLine":42,"endColumn":86},{"ruleId":"173","replacedBy":"219"},{"ruleId":"175","replacedBy":"220"},"no-native-reassign",["221"],"no-negated-in-lhs",["222"],"no-unused-vars","'Contact' is defined but never used.","Identifier","unusedVar","no-dupe-keys","Duplicate key 'totalSize'.","ObjectExpression","unexpected","'useDispatch' is defined but never used.","'transferPercent' is assigned a value but never used.","'setTransferPercent' is assigned a value but never used.","'files' is assigned a value but never used.","'setFiles' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'connectionDetails'. Either include it or remove the dependency array.","ArrayExpression",["223"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'connectionDetails.host'. Either include it or remove the dependency array.",["224"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat",["225"],["226"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '!==' and instead saw '!='.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'useState' is defined but never used.","'useEffect' is defined but never used.","'desktopDir' is assigned a value but never used.","'openExplorerLink' is assigned a value but never used.","'BiSearch' is defined but never used.","'BarStyling' is assigned a value but never used.",["221"],["222"],"no-global-assign","no-unsafe-negation",{"desc":"227","fix":"228"},{"desc":"229","fix":"230"},{"desc":"227","fix":"231"},{"desc":"229","fix":"232"},"Update the dependencies array to be: [connectionDetails, currentDirectoryPath]",{"range":"233","text":"234"},"Update the dependencies array to be: [searchTerm, fileList, connectionDetails.host]",{"range":"235","text":"236"},{"range":"237","text":"234"},{"range":"238","text":"236"},[4382,4404],"[connectionDetails, currentDirectoryPath]",[5091,5113],"[searchTerm, fileList, connectionDetails.host]",[3282,3304],[3872,3894]]
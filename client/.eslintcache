[{"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\index.js":"1","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\reportWebVitals.js":"2","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\App.js":"3","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\store\\ftp\\ftpReducer.js":"4","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\pages\\Dashboard\\Dashboard.js":"5","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\pages\\Home\\Home.js":"6","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\pages\\FileExplorer\\FileExplorer.js":"7","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\store\\ftp\\ftpTypes.js":"8","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\pages\\Contact\\Contact.js":"9","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\pages\\About\\About.js":"10","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\pages\\FileExplorer\\ExplorerMenu\\ExplorerMenu.js":"11","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\SideBar\\Sidebar2.js":"12","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\pages\\Dashboard\\FilesMenu\\FilesMenu2.js":"13","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\PhoneSection\\Phone.js":"14","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\Header\\Header.js":"15","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\Footer\\Footer.js":"16","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\Modal\\Modal.js":"17","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\Snackbar\\Snackbar.js":"18","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\DragAndDrop\\DragAndDrop.js":"19","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\FileExplorer\\FileComponent\\FileComponent.js":"20","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\Errors\\NoFiles\\NoFiles.js":"21","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\FileExplorer\\ExplorerMenu\\DownloadPopup\\DownloadPopup.js":"22","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\FileExplorer\\ExplorerMenu\\SearchBar\\SearchBar.js":"23","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\Errors\\NoConnection\\NoConnection.js":"24","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\FileExplorer\\ExplorerMenu\\CreateFolder\\CreateFolder.js":"25","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\hoc\\Auxiliary.js":"26","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\Backdrop\\Backdrop.js":"27","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\FileExplorer\\FileComponent\\IconComponent\\IconComponent.js":"28","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\helpers\\useSingleClick\\useSingleAndDoubleClicks.js":"29","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\skeleton\\FileSkeleton.js":"30","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\skeleton\\FileSkeleton2.js":"31","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\FileExplorer\\ExplorerMenu\\ConfirmDelete\\ConfirmDelete.js":"32","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\FileExplorer\\ExplorerMenu\\ModifyContent\\ModifyContent.js":"33","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\PlainHeader\\PlainHeader.js":"34","D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\index.js":"35","D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\reportWebVitals.js":"36","D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\App.js":"37","D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\store\\ftp\\ftpReducer.js":"38","D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\store\\ftp\\ftpTypes.js":"39","D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\pages\\Dashboard\\Dashboard.js":"40","D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\pages\\Home\\Home.js":"41","D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\pages\\FileExplorer\\FileExplorer.js":"42","D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\pages\\About\\About.js":"43","D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\pages\\Contact\\Contact.js":"44","D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\pages\\Dashboard\\FilesMenu\\FilesMenu2.js":"45","D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\pages\\FileExplorer\\ExplorerMenu\\ExplorerMenu.js":"46","D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\components\\SideBar\\Sidebar2.js":"47","D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\components\\PlainHeader\\PlainHeader.js":"48","D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\components\\Footer\\Footer.js":"49","D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\components\\Header\\Header.js":"50","D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\components\\PhoneSection\\Phone.js":"51","D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\components\\Modal\\Modal.js":"52","D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\components\\Snackbar\\Snackbar.js":"53","D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\components\\DragAndDrop\\DragAndDrop.js":"54","D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\components\\skeleton\\FileSkeleton2.js":"55","D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\Errors\\NoConnection\\NoConnection.js":"56","D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\Errors\\NoFiles\\NoFiles.js":"57","D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\components\\FileExplorer\\ExplorerMenu\\SearchBar\\SearchBar.js":"58","D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\components\\FileExplorer\\ExplorerMenu\\DownloadPopup\\DownloadPopup.js":"59","D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\components\\FileExplorer\\FileComponent\\FileComponent.js":"60","D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\components\\FileExplorer\\ExplorerMenu\\CreateFolder\\CreateFolder.js":"61","D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\components\\FileExplorer\\ExplorerMenu\\ConfirmDelete\\ConfirmDelete.js":"62","D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\components\\FileExplorer\\ExplorerMenu\\ModifyContent\\ModifyContent.js":"63","D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\components\\Backdrop\\Backdrop.js":"64","D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\hoc\\Auxiliary.js":"65","D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\helpers\\useSingleClick\\useSingleAndDoubleClicks.js":"66","D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\components\\FileExplorer\\FileComponent\\IconComponent\\IconComponent.js":"67"},{"size":902,"mtime":1616608934668,"results":"68","hashOfConfig":"69"},{"size":362,"mtime":499162500000,"results":"70","hashOfConfig":"69"},{"size":766,"mtime":1617887867958,"results":"71","hashOfConfig":"69"},{"size":982,"mtime":1631801798366,"results":"72","hashOfConfig":"69"},{"size":325,"mtime":1617771741453,"results":"73","hashOfConfig":"69"},{"size":4420,"mtime":1622341871413,"results":"74","hashOfConfig":"69"},{"size":360,"mtime":1617780192755,"results":"75","hashOfConfig":"69"},{"size":48,"mtime":1614944642533,"results":"76","hashOfConfig":"69"},{"size":1375,"mtime":1621248047315,"results":"77","hashOfConfig":"69"},{"size":3248,"mtime":1631801880576,"results":"78","hashOfConfig":"69"},{"size":30278,"mtime":1631801848009,"results":"79","hashOfConfig":"69"},{"size":3759,"mtime":1620277485613,"results":"80","hashOfConfig":"69"},{"size":24087,"mtime":1631802069453,"results":"81","hashOfConfig":"69"},{"size":1119,"mtime":1630930046505,"results":"82","hashOfConfig":"69"},{"size":3110,"mtime":1621185700986,"results":"83","hashOfConfig":"69"},{"size":866,"mtime":1617116597372,"results":"84","hashOfConfig":"69"},{"size":575,"mtime":1614071993197,"results":"85","hashOfConfig":"69"},{"size":1342,"mtime":1631801959552,"results":"86","hashOfConfig":"69"},{"size":3176,"mtime":1614079843966,"results":"87","hashOfConfig":"69"},{"size":2533,"mtime":1617810213608,"results":"88","hashOfConfig":"69"},{"size":341,"mtime":1630923621090,"results":"89","hashOfConfig":"69"},{"size":1769,"mtime":1616822081561,"results":"90","hashOfConfig":"69"},{"size":808,"mtime":1631802176143,"results":"91","hashOfConfig":"69"},{"size":837,"mtime":1617950770165,"results":"92","hashOfConfig":"69"},{"size":977,"mtime":1615967210310,"results":"93","hashOfConfig":"69"},{"size":61,"mtime":1614060767137,"results":"94","hashOfConfig":"69"},{"size":234,"mtime":1614071982320,"results":"95","hashOfConfig":"69"},{"size":2591,"mtime":1613912867391,"results":"96","hashOfConfig":"69"},{"size":1747,"mtime":1617851083435,"results":"97","hashOfConfig":"69"},{"size":3408,"mtime":1619703192666,"results":"98","hashOfConfig":"99"},{"size":2764,"mtime":1622342238433,"results":"100","hashOfConfig":"69"},{"size":858,"mtime":1621145783446,"results":"101","hashOfConfig":"69"},{"size":1369,"mtime":1631802160002,"results":"102","hashOfConfig":"69"},{"size":2623,"mtime":1631801915675,"results":"103","hashOfConfig":"69"},{"size":902,"mtime":1616608934668,"results":"104","hashOfConfig":"105"},{"size":362,"mtime":499162500000,"results":"106","hashOfConfig":"105"},{"size":766,"mtime":1617887867958,"results":"107","hashOfConfig":"105"},{"size":977,"mtime":1617513895155,"results":"108","hashOfConfig":"105"},{"size":48,"mtime":1614944642533,"results":"109","hashOfConfig":"105"},{"size":325,"mtime":1617771741453,"results":"110","hashOfConfig":"105"},{"size":4420,"mtime":1622341871413,"results":"111","hashOfConfig":"105"},{"size":360,"mtime":1617780192755,"results":"112","hashOfConfig":"105"},{"size":3302,"mtime":1621250774460,"results":"113","hashOfConfig":"105"},{"size":1375,"mtime":1621248047315,"results":"114","hashOfConfig":"105"},{"size":24271,"mtime":1630923612605,"results":"115","hashOfConfig":"105"},{"size":30285,"mtime":1630923616149,"results":"116","hashOfConfig":"105"},{"size":3759,"mtime":1620277485613,"results":"117","hashOfConfig":"105"},{"size":2667,"mtime":1621249279371,"results":"118","hashOfConfig":"105"},{"size":866,"mtime":1617116597372,"results":"119","hashOfConfig":"105"},{"size":3110,"mtime":1621185700986,"results":"120","hashOfConfig":"105"},{"size":1119,"mtime":1630930046505,"results":"121","hashOfConfig":"105"},{"size":575,"mtime":1614071993197,"results":"122","hashOfConfig":"105"},{"size":1444,"mtime":1621165792572,"results":"123","hashOfConfig":"105"},{"size":3176,"mtime":1614079843966,"results":"124","hashOfConfig":"105"},{"size":2764,"mtime":1622342238433,"results":"125","hashOfConfig":"105"},{"size":837,"mtime":1617950770165,"results":"126","hashOfConfig":"105"},{"size":341,"mtime":1630923621090,"results":"127","hashOfConfig":"105"},{"size":1711,"mtime":1617851162637,"results":"128","hashOfConfig":"105"},{"size":1769,"mtime":1616822081561,"results":"129","hashOfConfig":"105"},{"size":2533,"mtime":1617810213608,"results":"130","hashOfConfig":"105"},{"size":977,"mtime":1615967210310,"results":"131","hashOfConfig":"105"},{"size":858,"mtime":1621145783446,"results":"132","hashOfConfig":"105"},{"size":1387,"mtime":1621183592557,"results":"133","hashOfConfig":"105"},{"size":234,"mtime":1614071982320,"results":"134","hashOfConfig":"105"},{"size":61,"mtime":1614060767137,"results":"135","hashOfConfig":"105"},{"size":1747,"mtime":1617851083435,"results":"136","hashOfConfig":"105"},{"size":2591,"mtime":1613912867391,"results":"137","hashOfConfig":"105"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},"epeo8i",{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"140"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"140"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"140"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"140"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"140"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"194"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"203"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1c85vuj",{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"140"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},"15qg9nc",{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"217"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"217"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"217"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"217"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"217"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"217"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"217"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"217"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"217"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"217"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"281","usedDeprecatedRules":"217"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\index.js",[],["290","291"],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\reportWebVitals.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\App.js",["292"],"import React from 'react'\nimport './App.css';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\nimport Home from './pages/Home/Home'\nimport Dashboard from './pages/Dashboard/Dashboard'\nimport FileExplorer from './pages/FileExplorer/FileExplorer'\nimport About from './pages/About/About';\nimport Contact from './pages/Contact/Contact';\n\nfunction App() {\n\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <Switch>\n          <Route path='/dashboard' exact component={Dashboard} />\n          <Route path='/' exact component={Home} />\n          <Route path='/explorer' exact component={FileExplorer} />\n          <Route path='/about' exact component={About} />\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\store\\ftp\\ftpReducer.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\pages\\Dashboard\\Dashboard.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\pages\\Home\\Home.js",["293"],"import React, { useEffect, useState } from \"react\";\r\nimport { TweenMax } from \"gsap\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport * as actionTypes from \"../../store/ftp/ftpTypes\";\r\nimport Header from \"../../components/Header/Header\";\r\nimport \"./Home.css\";\r\nimport Phone from \"../../components/PhoneSection/Phone\";\r\nimport Footer from \"../../components/Footer/Footer\";\r\n\r\nconst Home = () => {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const [qrcodeImg, setqrcodeImg] = useState(null);\r\n  const [qrCodeData, setQrCodeData] = useState(null);\r\n  const [count, setCount] = useState(0);\r\n\r\n  // const [loopState, setLoopState] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // TweenMax.from('.homeTitle', { autoAlpha: 0, opacity: 0, duration: 1, delay: 1.6, y: 30 });\r\n    // TweenMax.from('.homeDescription', { autoAlpha: 0, opacity: 0, duration: 1, delay: 1.8, y: 30 })\r\n    // TweenMax.from('.homeButton', { autoAlpha: 0, opacity: 0, duration: 1, delay: 2.1, y: 30 })\r\n    // TweenMax.from('.homeImg', { autoAlpha: 0, opacity: 0, duration: 1, delay: 1.3, y: 30 })\r\n\r\n    TweenMax.from(\".homeTitle\", {\r\n      autoAlpha: 0,\r\n      opacity: 0,\r\n      duration: 1,\r\n      delay: 1.6,\r\n      y: 30,\r\n    });\r\n    TweenMax.from(\".homeDescription\", {\r\n      autoAlpha: 0,\r\n      opacity: 0,\r\n      duration: 1,\r\n      delay: 1.8,\r\n      y: 30,\r\n    });\r\n    TweenMax.from(\".homeButton\", {\r\n      autoAlpha: 0,\r\n      opacity: 0,\r\n      duration: 1,\r\n      delay: 2.1,\r\n      y: 30,\r\n    });\r\n    TweenMax.from(\".homeImg\", {\r\n      autoAlpha: 0,\r\n      opacity: 0,\r\n      duration: 1,\r\n      delay: 1.3,\r\n      y: 30,\r\n    });\r\n\r\n    QRCodeComponent();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let interval = null;\r\n\r\n    if (count < 10) {\r\n      interval = setInterval(() => {\r\n        axios\r\n          .post(\"/deleteDoc\", { uniq_id: qrCodeData })\r\n          .then((res) => {\r\n            if (res.data.secure === false) {\r\n              // check = true;\r\n              let userData = {\r\n                host: res.data.host,\r\n                port: res.data.port,\r\n                username: res.data.username,\r\n                password: res.data.password,\r\n                secure: res.data.secure,\r\n                megAvailable: res.data.megAvailable,\r\n                usedSpace: res.data.usedSpace,\r\n                totalSize: res.data.totalSize,\r\n              };\r\n              console.log(userData);\r\n              dispatch({ type: actionTypes.STORE_USER_DATA, value: userData });\r\n              history.push(\"/explorer\");\r\n            }\r\n          })\r\n          .catch((e) => {\r\n            console.log(\"Error while deleting doc \" + e);\r\n          });\r\n        setCount(count + 1);\r\n      }, 2000);\r\n    } else {\r\n      setqrcodeImg(\"/images/reload.png\");\r\n    }\r\n    return () => clearInterval(interval);\r\n  }, [count]);\r\n\r\n  // create QRCode\r\n  const QRCodeComponent = () => {\r\n    setCount(0);\r\n    axios\r\n      .get(\"/generateQRImage\")\r\n      .then((res) => {\r\n        console.log(res.data.data);\r\n        setQrCodeData(res.data.data);\r\n        setqrcodeImg(res.data.url);\r\n      })\r\n      .catch(() => {\r\n        console.log(\"error while fetching image\");\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"l-main\">\r\n      <Header />\r\n      <section className=\"home\" id=\"home\">\r\n        <div className=\"homeContainer bd-grid\">\r\n          <div className=\"homeImg\">\r\n            <img className=\"mockup\" alt=\"mockup\" src=\"/images/mockup2@1x.svg\" />\r\n            <div className=\"qrcodeDiv\">\r\n              <img\r\n                alt=\"qrcode\"\r\n                className=\"qrcode\"\r\n                onClick={QRCodeComponent}\r\n                src={qrcodeImg}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"homeData\">\r\n            <p className=\"homeTitle\">\r\n              Transfer files seamlessly without hassle, wires\r\n            </p>\r\n            <p className=\"homeDescription\">\r\n              Download the NoWires app <br /> from playstore.\r\n            </p>\r\n            <button className=\"homeButton\" href=\"/home\">\r\n              Get Started\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </section>\r\n      <section className=\"phonesection\" id=\"phonesection\">\r\n        <Phone />\r\n      </section>\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\pages\\FileExplorer\\FileExplorer.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\store\\ftp\\ftpTypes.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\pages\\Contact\\Contact.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\pages\\About\\About.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\pages\\FileExplorer\\ExplorerMenu\\ExplorerMenu.js",["294","295","296","297","298"],"import { React, useEffect, useState, useRef } from \"react\";\r\nimport FileComponent from \"../../../components/FileExplorer/FileComponent/FileComponent\";\r\nimport Modal from \"../../../components/Modal/Modal\";\r\nimport axios from \"axios\";\r\nimport \"./ExplorerMenu.css\";\r\nimport DragAndDrop from \"../../../components/DragAndDrop/DragAndDrop\";\r\nimport { useSelector } from \"react-redux\";\r\nimport DownloadPopup from \"../../../components/FileExplorer/ExplorerMenu/DownloadPopup/DownloadPopup\";\r\nimport FileSkeleton from \"../../../components/skeleton/FileSkeleton2\";\r\n\r\n// import { Menu, Item, useContextMenu } from \"react-contexify\";\r\nimport { MenuItem, ControlledMenu } from \"@szhsin/react-menu\";\r\nimport \"@szhsin/react-menu/dist/index.css\";\r\nimport Snackbar from \"../../../components/Snackbar/Snackbar\";\r\nimport NoFiles from \"../../../Errors/NoFiles/NoFiles\";\r\nimport SearchBar from \"../../../components/FileExplorer/ExplorerMenu/SearchBar/SearchBar\";\r\nimport NoConnection from \"../../../Errors/NoConnection/NoConnection\";\r\nimport ConfirmDelete from \"../../../components/FileExplorer/ExplorerMenu/ConfirmDelete/ConfirmDelete\";\r\nimport ModifyContent from \"../../../components/FileExplorer/ExplorerMenu/ModifyContent/ModifyContent\";\r\n\r\n// const MENU_ID = \"menu-id\";\r\n\r\nconst ExplorerMenu = () => {\r\n  // fetching the ftp details\r\n  const connectionDetails = useSelector((state) =>\r\n    state != null ? state.connectionDetails : null\r\n  );\r\n  const [connectionLiveStatus, setConnectionLiveStatus] = useState(true);\r\n\r\n  const [fileList, setFileList] = useState([]);\r\n  const [currentDirectoryPath, setCurrentDirectoryPath] = useState(\"/\");\r\n  const [modalState, setModalState] = useState(false);\r\n  const [renameModalState, setRenameModalState] = useState(false);\r\n  const [transferModalState, setTransferModalState] = useState(false);\r\n  const [deleteModalState, setDeleteModalState] = useState(false);\r\n\r\n  const [transferItemDetails, setTransferItemDetails] = useState({\r\n    fileName: \"filename\",\r\n    fileType: 1,\r\n    fileSize: \"200 Mb\",\r\n    transferType: \"Download\",\r\n  });\r\n\r\n  const [errorSVG, setErrorSVG] = useState(null);\r\n\r\n  // used for menu's.\r\n  // const [menuProp, setMenuProp] = useState(null);\r\n  const [isOpen, setOpen] = useState(false);\r\n  const [anchorPoint, setAnchorPoint] = useState({ x: 0, y: 0 });\r\n  const [itemDataa, setItemDataa] = useState({\r\n    fileName: \"fileName\",\r\n    fileType: 1,\r\n    fileSize: \"230 Mb\",\r\n  });\r\n\r\n  // File transfer\r\n  // const [transferPercent, setTransferPercent] = useState(0);\r\n  // const [files, setFiles] = useState(() => []);\r\n  // const [downloadFile, downloaderComponentUI] = useFileDownloader();\r\n  const [downloaderComponentUI, setDownloaderComponentUI] = useState(true);\r\n  const [snackbarStatus, setSnackbarStatus] = useState(false);\r\n\r\n  // Search\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [searchResults, setSearchResults] = useState([]);\r\n\r\n  // ref for scroll\r\n  const ref = useRef();\r\n\r\n  //LazyLoading\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (currentDirectoryPath === \"/\") {\r\n      console.log(connectionDetails);\r\n      axios\r\n        .post(\"/rootDirectory\", { connectionDetails: connectionDetails })\r\n        .then((res) => {\r\n          setFileList(res.data);\r\n          // refreshScrollBar();\r\n          setLoading(false);\r\n        })\r\n        .catch((e) => {\r\n          console.log(\"error while fetching files list \" + e);\r\n          setLoading(false);\r\n          setConnectionLiveStatus(false);\r\n          setErrorSVG(\r\n            <div className=\"noFilesImage\">\r\n              <NoConnection svgHeight={500} svgWidth={336} />\r\n            </div>\r\n          );\r\n        });\r\n    } else {\r\n      axios\r\n        .post(\"/changePath\", {\r\n          path: currentDirectoryPath,\r\n          connectionDetails: connectionDetails,\r\n        })\r\n        .then((res) => {\r\n          setLoading(false);\r\n          setFileList(res.data);\r\n          setSearchTerm(\"\");\r\n          refreshScrollBar();\r\n        })\r\n        .catch((e) => {\r\n          setLoading(false);\r\n          console.log(\"error while fetching files list \" + e);\r\n          setConnectionLiveStatus(false);\r\n          setErrorSVG(\r\n            <div className=\"noFilesImage\">\r\n              <NoConnection svgHeight={500} svgWidth={336} />\r\n            </div>\r\n          );\r\n        });\r\n    }\r\n  }, [currentDirectoryPath]);\r\n\r\n  useEffect(() => {\r\n    let results = [];\r\n    if (fileList.length > 0) {\r\n      fileList.map((jsFrameworksSearch) => {\r\n        if (jsFrameworksSearch.name.toLowerCase().includes(searchTerm.trim()))\r\n          results.push(jsFrameworksSearch);\r\n      });\r\n    } else if (connectionDetails.host != null) {\r\n      setErrorSVG(\r\n        <div className=\"noFilesImage\">\r\n          <NoFiles />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    // fileList.map((jsFrameworksSearch) => {\r\n    //     if (jsFrameworksSearch.name.toLowerCase().includes(searchTerm.trim()))\r\n    //         results.push(jsFrameworksSearch)\r\n    // });\r\n    setSearchResults(results);\r\n  }, [searchTerm, fileList]);\r\n\r\n  const refreshScrollBar = () => {\r\n    ref.current.scrollTo(0, 0);\r\n  };\r\n\r\n  //CreateFolder\r\n  const createFolder = (folderName) => {\r\n    setTransferItemDetails({\r\n      fileSize: transferItemDetails.fileSize,\r\n      fileType: transferItemDetails.fileType,\r\n      fileName: transferItemDetails.fileName,\r\n      transferType: \"Create Folder\",\r\n    });\r\n\r\n    axios\r\n      .post(\"/createFolder\", {\r\n        name: folderName,\r\n        path: currentDirectoryPath,\r\n        connectionDetails: connectionDetails,\r\n      })\r\n      .then((res) => {\r\n        setFileList(res.data);\r\n        setSnackbarStatus(true);\r\n        setTimeout(() => {\r\n          setSnackbarStatus(false);\r\n        }, 2000);\r\n      })\r\n      .catch((e) => {\r\n        console.log(\"error while fetching files list \" + e);\r\n        setConnectionLiveStatus(false);\r\n        setErrorSVG(\r\n          <div className=\"noFilesImage\">\r\n            <NoConnection svgHeight={500} svgWidth={336} />\r\n          </div>\r\n        );\r\n      });\r\n  };\r\n\r\n  const renameItem = (newName) => {\r\n    // let oldName = itemData.slice(0, -1);\r\n\r\n    setTransferItemDetails({\r\n      fileSize: itemDataa.fileSize,\r\n      fileType: itemDataa.fileType,\r\n      fileName: itemDataa.fileName,\r\n      transferType: \"Rename\",\r\n    });\r\n\r\n    let oldName = itemDataa.fileName;\r\n\r\n    if (itemDataa.fileType !== 2) {\r\n      let ext = oldName.split(\".\").pop();\r\n      newName = newName + \".\" + ext;\r\n    }\r\n    axios\r\n      .post(\"/renameFile\", {\r\n        oldName: oldName,\r\n        path: currentDirectoryPath,\r\n        newName: newName,\r\n        connectionDetails: connectionDetails,\r\n      })\r\n      .then((res) => {\r\n        setFileList(res.data);\r\n        setSearchTerm(\"\");\r\n        setSnackbarStatus(true);\r\n        setTimeout(() => {\r\n          setSnackbarStatus(false);\r\n        }, 2000);\r\n      })\r\n      .catch((e) => {\r\n        console.log(\"error while renaming file \" + e);\r\n        setConnectionLiveStatus(false);\r\n        setErrorSVG(\r\n          <div className=\"noFilesImage\">\r\n            <NoConnection svgHeight={500} svgWidth={336} />\r\n          </div>\r\n        );\r\n      });\r\n  };\r\n\r\n  const changePath = (name, type, size) => {\r\n    setTransferItemDetails({\r\n      fileSize: size,\r\n      fileType: type,\r\n      fileName: name,\r\n      transferType: \"Download\",\r\n    });\r\n    if (type === 2) {\r\n      setLoading(true);\r\n      setCurrentDirectoryPath(currentDirectoryPath + \"/\" + name); // works for ftp-server app\r\n      // setCurrentDirectoryPath(currentDirectoryPath + name)\r\n    } else {\r\n      // file name without extension = filename.split('.').slice(0, -1).join('.')\r\n\r\n      // const file = {\r\n      //     name: name,\r\n      //     // name: \"photo-1\",\r\n      //     thumb:\r\n      //         \"https://images.unsplash.com/photo-1604263439201-171fb8c0fddc?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=427&q=80 427w\",\r\n      //     file:\r\n      //         \"https://images.unsplash.com/photo-1604263439201-171fb8c0fddc?rnd=\" +\r\n      //         Math.random(),\r\n\r\n      //     filename: name,\r\n      //     // filename: \"photo-1.jpg\",\r\n      //     currentDirectoryPath: currentDirectoryPath,\r\n      //     connectionDetails: connectionDetails\r\n      // };\r\n\r\n      // downloadFile(file)\r\n\r\n      // Download file function..\r\n      setTransferModalState(true);\r\n      setDownloaderComponentUI(true);\r\n\r\n      console.log(\"Before download \" + downloaderComponentUI);\r\n\r\n      axios\r\n        .post(\"/downloadFile\", {\r\n          path: currentDirectoryPath,\r\n          name: name,\r\n          connectionDetails: connectionDetails,\r\n        })\r\n        .then((res) => {\r\n          console.log(\"After download: \" + downloaderComponentUI);\r\n          setDownloaderComponentUI(false);\r\n          setTransferModalState(false);\r\n          setSnackbarStatus(true);\r\n          setTimeout(() => {\r\n            setSnackbarStatus(false);\r\n          }, 2000);\r\n          // alert(res.data + ' Implement a download progress bar');\r\n        })\r\n        .catch((e) => {\r\n          setConnectionLiveStatus(false);\r\n          console.log(\"error while going back \" + e);\r\n          setErrorSVG(\r\n            <div className=\"noFilesImage\">\r\n              <NoConnection svgHeight={500} svgWidth={336} />\r\n            </div>\r\n          );\r\n        });\r\n      // }\r\n    }\r\n  };\r\n\r\n  const goBack = () => {\r\n    setLoading(true);\r\n    const p = currentDirectoryPath.slice(\r\n      0,\r\n      currentDirectoryPath.lastIndexOf(\"/\")\r\n    );\r\n    if (p !== \"\") {\r\n      axios\r\n        .post(\"/changePath\", { path: p, connectionDetails: connectionDetails })\r\n        .then((res) => {\r\n          setLoading(false);\r\n          setFileList(res.data);\r\n        })\r\n        .catch((e) => {\r\n          setLoading(false);\r\n          console.log(\"error while going back \" + e);\r\n          setConnectionLiveStatus(false);\r\n          setErrorSVG(\r\n            <div className=\"noFilesImage\">\r\n              <NoConnection svgHeight={500} svgWidth={336} />\r\n            </div>\r\n          );\r\n        });\r\n      setCurrentDirectoryPath(\r\n        currentDirectoryPath.slice(0, currentDirectoryPath.lastIndexOf(\"/\"))\r\n      );\r\n    } else {\r\n      alert(\"cannot go further 🙂\");\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getCodedBuffer = (file) => {\r\n    return new Promise(function (resolve, reject) {\r\n      let fileReader = new FileReader();\r\n      fileReader.readAsArrayBuffer(file);\r\n\r\n      fileReader.onload = function (ev) {\r\n        const array = new Uint8Array(ev.target.result);\r\n        // const fileByteArray = [];\r\n        let codedBuffer = \"\";\r\n\r\n        for (let i = 0; i < array.length; i++) {\r\n          // fileByteArray.push(array[i]);\r\n          codedBuffer += String.fromCharCode(array[i]);\r\n        }\r\n        resolve(codedBuffer); // successful\r\n      };\r\n      fileReader.onerror = reject; // call reject if error\r\n    });\r\n  };\r\n\r\n  const handleDrop = (files) => {\r\n    // Implement upload function\r\n    setTransferModalState(true);\r\n\r\n    for (let i = 0; i < files.length; i++) {\r\n      let fileType = \"Folder\";\r\n      let fileSize = files[i].size;\r\n\r\n      if (files[i].isFile) {\r\n        fileType = 1;\r\n        fileSize = files[i].size;\r\n        console.log(\"file size: \" + files[i].size);\r\n      }\r\n\r\n      setTransferItemDetails({\r\n        fileName: files[i].name,\r\n        fileType: fileType,\r\n        fileSize: fileSize,\r\n        transferType: \"Upload\",\r\n      });\r\n\r\n      getCodedBuffer(files[i]).then((result) => {\r\n        axios\r\n          .post(\"/handleDrop\", {\r\n            value: result,\r\n            fileName: files[i].name,\r\n            path: currentDirectoryPath,\r\n            connectionDetails: connectionDetails,\r\n          })\r\n          .then((res) => {\r\n            setTransferModalState(false);\r\n            setFileList(res.data);\r\n            setSnackbarStatus(true);\r\n            setTimeout(() => {\r\n              setSnackbarStatus(false);\r\n            }, 2000);\r\n          })\r\n          .catch((err) => {\r\n            alert(\"error occured while uploading \" + err);\r\n            setConnectionLiveStatus(false);\r\n            setErrorSVG(\r\n              <div className=\"noFilesImage\">\r\n                <NoConnection svgHeight={500} svgWidth={336} />\r\n              </div>\r\n            );\r\n          });\r\n      });\r\n    }\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setModalState(false);\r\n  };\r\n\r\n  const closeSnackbar = () => {\r\n    setSnackbarStatus(false);\r\n  };\r\n\r\n  const closeRenameModal = () => {\r\n    setRenameModalState(false);\r\n  };\r\n\r\n  const closeTransferModal = () => {\r\n    setTransferModalState(false);\r\n  };\r\n\r\n  const closeDeleteModal = () => {\r\n    setDeleteModalState(false);\r\n  };\r\n\r\n  // const { show } = useContextMenu({\r\n  //     id: MENU_ID,\r\n  // });\r\n\r\n  // const handleItemClick = ({ event, props, triggerEvent, data }) => {\r\n  //     console.log(event, props, triggerEvent, data);\r\n\r\n  //     let fileName = props.id.slice(0, -1);\r\n  //     let fileType = props.id.charAt(fileName.length);\r\n\r\n  //     switch (event.currentTarget.id) {\r\n  //         case \"rename\":\r\n  //             // logic to remove the row\r\n  //             console.log(props.id + \" \" + fileName + \" \" + \"rename\"); // contain to item.id passed by `show`\r\n  //             break;\r\n\r\n  //         case \"delete\":\r\n  //             console.log(props.id + \" delete \" + fileType);\r\n\r\n  //             let deletePath = currentDirectoryPath + '/' + fileName\r\n  //             console.log(deletePath);\r\n\r\n  //             if (fileType === \"2\") {\r\n  //                 // Delete a directory\r\n  //                 console.log('deleting a folder');\r\n  //                 axios.post('/deleteDir', { path: currentDirectoryPath, fileName: fileName })\r\n  //                     .then(res => {\r\n  //                         setFileList(res.data);\r\n  //                     })\r\n  //                     .catch(() => {\r\n  //                         console.log('error while deleting file');\r\n  //                     });\r\n  //             }\r\n  //             else {\r\n  //                 // Delete a file\r\n  //                 console.log('deleting a file');\r\n  //                 axios.post('/deleteFile', { path: currentDirectoryPath, fileName: fileName })\r\n  //                     .then(res => {\r\n  //                         setFileList(res.data);\r\n  //                     })\r\n  //                     .catch(() => {\r\n  //                         console.log('error while deleting file');\r\n  //                     });\r\n  //             }\r\n  //             break;\r\n\r\n  //         case \"download\":\r\n  //             console.log(fileType + \" download\");\r\n  //             // downloading a file..\r\n\r\n  //             if (fileType === \"2\") {\r\n  //                 console.log('downloading a folder');\r\n\r\n  //                 axios.post('/downloadDirectory', { path: currentDirectoryPath, name: fileName })\r\n  //                     .then(res => {\r\n  //                         alert(res.data + ' Implement a download progress bar');\r\n  //                     })\r\n  //                     .catch(() => {\r\n  //                         console.log('error while going back');\r\n  //                     });\r\n  //             }\r\n  //             else {\r\n  //                 // downloading a file\r\n  //                 console.log('downloading a File');\r\n  //                 axios.post('/downloadFile', { path: currentDirectoryPath, name: fileName })\r\n  //                     .then(res => {\r\n  //                         alert(res.data + ' Implement a download progress bar');\r\n  //                     })\r\n  //                     .catch(() => {\r\n  //                         console.log('error while going back');\r\n  //                     });\r\n  //             }\r\n  //             break;\r\n  //         default:\r\n  //             break;\r\n  //     }\r\n  // }\r\n\r\n  const confirmDel = () => {\r\n    let fileName = itemDataa.fileName;\r\n    let fileType = itemDataa.fileType;\r\n    let fileSize = itemDataa.fileSize;\r\n\r\n    let deletePath = currentDirectoryPath + \"/\" + fileName;\r\n    console.log(deletePath);\r\n\r\n    setTransferItemDetails({\r\n      fileSize: fileSize,\r\n      fileType: fileType,\r\n      fileName: fileName,\r\n      transferType: \"Delete\",\r\n    });\r\n\r\n    if (fileType === 2) {\r\n      setTransferModalState(true);\r\n\r\n      // Delete a directory\r\n      console.log(\"deleting a folder\");\r\n\r\n      axios\r\n        .post(\"/deleteDir\", {\r\n          path: currentDirectoryPath,\r\n          fileName: fileName,\r\n          connectionDetails: connectionDetails,\r\n        })\r\n        .then((res) => {\r\n          setTransferModalState(false);\r\n\r\n          setFileList(res.data);\r\n          setSnackbarStatus(true);\r\n          setTimeout(() => {\r\n            setSnackbarStatus(false);\r\n          }, 2000);\r\n          setSearchTerm(\"\");\r\n        })\r\n        .catch(() => {\r\n          setConnectionLiveStatus(false);\r\n          setErrorSVG(\r\n            <div className=\"noFilesImage\">\r\n              <NoConnection svgHeight={500} svgWidth={336} />\r\n            </div>\r\n          );\r\n          console.log(\"error while deleting file\");\r\n        });\r\n    } else {\r\n      setTransferModalState(true);\r\n\r\n      // Delete a file\r\n      console.log(\"deleting a file\");\r\n      axios\r\n        .post(\"/deleteFile\", {\r\n          path: currentDirectoryPath,\r\n          fileName: fileName,\r\n          connectionDetails: connectionDetails,\r\n        })\r\n        .then((res) => {\r\n          setTransferModalState(false);\r\n          setFileList(res.data);\r\n          setSnackbarStatus(true);\r\n          setTimeout(() => {\r\n            setSnackbarStatus(false);\r\n          }, 2000);\r\n          setSearchTerm(\"\");\r\n        })\r\n        .catch(() => {\r\n          console.log(\"error while deleting file\");\r\n          setConnectionLiveStatus(false);\r\n          setErrorSVG(\r\n            <div className=\"noFilesImage\">\r\n              <NoConnection svgHeight={500} svgWidth={336} />\r\n            </div>\r\n          );\r\n        });\r\n    }\r\n  };\r\n\r\n  const handleItemClick = (e) => {\r\n    let fileName = itemDataa.fileName;\r\n    let fileType = itemDataa.fileType;\r\n    let fileSize = itemDataa.fileSize;\r\n\r\n    switch (e.value) {\r\n      case \"rename\":\r\n        // logic to remove the row\r\n        console.log(fileName + \" \" + \"rename\"); // contain to item.id passed by `show`\r\n        setRenameModalState(true);\r\n        break;\r\n\r\n      case \"delete\":\r\n        console.log(\" delete \" + fileType);\r\n\r\n        setDeleteModalState(true);\r\n        // confirmDel(fileName, fileType, fileSize);\r\n        break;\r\n\r\n      case \"Download\":\r\n        console.log(fileType + \" download\");\r\n        // downloading a file..\r\n        setTransferItemDetails({\r\n          fileSize: fileSize,\r\n          fileType: fileType,\r\n          fileName: fileName,\r\n          transferType: \"Download\",\r\n        });\r\n\r\n        if (fileType === 2) {\r\n          console.log(\"downloading a folder\");\r\n\r\n          setTransferModalState(true);\r\n          setDownloaderComponentUI(true);\r\n\r\n          axios\r\n            .post(\"/downloadDirectory\", {\r\n              path: currentDirectoryPath,\r\n              name: fileName,\r\n              connectionDetails: connectionDetails,\r\n            })\r\n            .then((res) => {\r\n              setDownloaderComponentUI(false);\r\n              setTransferModalState(false);\r\n              setSnackbarStatus(true);\r\n              setTimeout(() => {\r\n                setSnackbarStatus(false);\r\n              }, 2000);\r\n              // alert(res.data + ' Implement a download progress bar');\r\n            })\r\n            .catch(() => {\r\n              console.log(\"error while downloading\");\r\n              setConnectionLiveStatus(false);\r\n              setErrorSVG(\r\n                <div className=\"noFilesImage\">\r\n                  <NoConnection svgHeight={500} svgWidth={336} />\r\n                </div>\r\n              );\r\n            });\r\n        } else {\r\n          // downloading a file\r\n          setTransferModalState(true);\r\n          setDownloaderComponentUI(true);\r\n\r\n          console.log(\"Before download \" + downloaderComponentUI);\r\n\r\n          axios\r\n            .post(\"/downloadFile\", {\r\n              path: currentDirectoryPath,\r\n              name: fileName,\r\n              connectionDetails: connectionDetails,\r\n            })\r\n            .then((res) => {\r\n              console.log(\"After download: \" + downloaderComponentUI);\r\n              setDownloaderComponentUI(false);\r\n              setTransferModalState(false);\r\n              setSnackbarStatus(true);\r\n              setTimeout(() => {\r\n                setSnackbarStatus(false);\r\n              }, 2000);\r\n              // alert(res.data + ' Implement a download progress bar');\r\n            })\r\n            .catch((e) => {\r\n              console.log(\"error while going back \" + e);\r\n              setConnectionLiveStatus(false);\r\n              setErrorSVG(\r\n                <div className=\"noFilesImage\">\r\n                  <NoConnection svgHeight={500} svgWidth={336} />\r\n                </div>\r\n              );\r\n            });\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const updateSearchResult = async (input) => {\r\n    // setSearchTerm(event.target.value)\r\n    let results = [];\r\n    if (fileList.length > 0) {\r\n      fileList.map((jsFrameworksSearch) => {\r\n        if (jsFrameworksSearch.name.toLowerCase().includes(input.trim()))\r\n          results.push(jsFrameworksSearch);\r\n      });\r\n    }\r\n    setSearchTerm(input);\r\n    setSearchResults(results);\r\n  };\r\n\r\n  // const displayMenu = (e) => {\r\n  //     // put whatever custom logic you need\r\n  //     // you can even decide to not display the Menu\r\n  //     console.log('reaching displayMenu (e)');\r\n  //     show(e, { props: { id: e.currentTarget.id } });\r\n  // }\r\n\r\n  const displayMenu = (e, fileName, fileType, fileSize) => {\r\n    e.preventDefault();\r\n    setAnchorPoint({ x: e.clientX, y: e.clientY });\r\n    setOpen(true);\r\n    setItemDataa({\r\n      fileName: fileName,\r\n      fileType: fileType,\r\n      fileSize: fileSize,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"explorer-main-menu\">\r\n      <div className=\"explorer-title\">\r\n        <h1 className=\"dashboard-copy poppins-bold-black-27-3px\">\r\n          File Explorer\r\n        </h1>\r\n        <div className=\"overlap-group2\">\r\n          {/* <img\r\n                        alt=\"magnifier\"\r\n                        className=\"oval-9\"\r\n                        src=\"/images/icons/Magnifier.svg\"\r\n                    />*/}\r\n          <SearchBar input={searchTerm} onChange={updateSearchResult} />\r\n          {/* <img\r\n                        className=\"path-6\"\r\n                        src=\"/images/icons/Magnifier.svg\"\r\n                    /> */}\r\n        </div>\r\n      </div>\r\n      <div className=\"directory-path\">\r\n        <div className=\"directory-path-section-1\">\r\n          <div className=\"overlap-group-1\">\r\n            <div className=\"rectangle-9\"></div>\r\n            <div className=\"rectangle-10\"></div>\r\n            <div className=\"rectangle-5-copy\"></div>\r\n          </div>\r\n          <p className=\"explorer-path valign-text-middle poppins-medium-black-14px\">\r\n            {currentDirectoryPath === \"/\"\r\n              ? \"Internal Storage >\"\r\n              : currentDirectoryPath.slice(2).replaceAll(\"/\", \" > \")}\r\n          </p>\r\n          {currentDirectoryPath !== \"/\" ? (\r\n            <span className=\"goBack\">\r\n              <img\r\n                alt=\"goBack\"\r\n                onClick={() => goBack()}\r\n                className=\"goBackImg\"\r\n                src=\"/images/icons/goBack.svg\"\r\n              ></img>\r\n            </span>\r\n          ) : null}\r\n        </div>\r\n\r\n        <div className=\"frame-1\">\r\n          <div className=\"overlap-group\" onClick={() => setModalState(true)}>\r\n            <div className=\"rectangle-1 bizarre-border-1px\"></div>\r\n            <div className=\"rectangle-1 bizarre-border-1px\"></div>\r\n            <div className=\"create-folder valign-text-middle poppins-light-black-14px\">\r\n              Create Folder\r\n            </div>\r\n            <img\r\n              alt=\"addFolder\"\r\n              className=\"icons8-add-older-50-1\"\r\n              src=\"/images/icons/addFolder.svg\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/*\r\n                <span className=\"upload\">\r\n                    <input type=\"file\" name=\"u\" />\r\n                </span> */}\r\n      {/* Modal */}\r\n      <Modal show={modalState} modalClosed={closeModal} color=\"#fff\">\r\n        <ModifyContent\r\n          desc=\"Are you sure to create folder ?\"\r\n          placeholder=\"Enter folder name\"\r\n          title=\"Create Folder\"\r\n          action=\"Create\"\r\n          create={(folderName) => createFolder(folderName)}\r\n          closeHandler={closeModal}\r\n          path={currentDirectoryPath}\r\n        />\r\n      </Modal>\r\n\r\n      <div className=\"explorer-snackbar\">\r\n        <Snackbar\r\n          // text={transferItemDetails.transferType === \"Download\" ? \"Downloaded Successfully!  Check Desktop/NoWires\" : \"Uploaded Successfully! \"}\r\n          transferType={transferItemDetails.transferType}\r\n          handleSnackbarClose={closeSnackbar}\r\n          show={snackbarStatus}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"explorer-header\">\r\n        <div className=\"place valign-text-middle poppins-light-black-14px\">\r\n          Name\r\n        </div>\r\n        <div className=\"explorer-last-modified valign-text-middle poppins-light-black-14px\">\r\n          Last Modified\r\n        </div>\r\n        <div className=\"size valign-text-middle poppins-light-black-14px\">\r\n          Size\r\n        </div>\r\n      </div>\r\n\r\n      {/* popup for rename */}\r\n      <Modal\r\n        show={renameModalState}\r\n        modalClosed={closeRenameModal}\r\n        color=\"#fff\"\r\n      >\r\n        <ModifyContent\r\n          desc=\"Are you sure to rename this content ? This will rename the content\r\n          permanently.\"\r\n          placeholder=\"Enter new name\"\r\n          title={\"Rename \" + itemDataa.fileName}\r\n          create={(newName) => renameItem(newName)}\r\n          closeHandler={closeRenameModal}\r\n          action=\"Rename\"\r\n          path={currentDirectoryPath + \"/\" + itemDataa.fileName}\r\n        />\r\n      </Modal>\r\n\r\n      {/* popup for delete */}\r\n      <Modal\r\n        show={deleteModalState}\r\n        modalClosed={closeDeleteModal}\r\n        color=\"#fff\"\r\n      >\r\n        <ConfirmDelete\r\n          title={itemDataa.fileName}\r\n          delete={confirmDel}\r\n          closeHandler={closeDeleteModal}\r\n          path={currentDirectoryPath + \"/\" + itemDataa.fileName}\r\n        />\r\n      </Modal>\r\n\r\n      {/* popup for transfer progress */}\r\n      <Modal\r\n        show={transferModalState}\r\n        // modalClosed={closeTransferModal}\r\n        color=\"#fff\"\r\n      >\r\n        <DownloadPopup\r\n          placeholder={transferItemDetails.transferType}\r\n          name={transferItemDetails.fileName}\r\n          // create={(newName) => renameItem(newName)}\r\n          type={transferItemDetails.fileType}\r\n          closeHandler={closeTransferModal}\r\n          size={transferItemDetails.fileSize}\r\n          path={\r\n            currentDirectoryPath +\r\n            \"/\" +\r\n            transferItemDetails.fileName.split(\".\").slice(0, -1).join(\".\")\r\n          }\r\n        />\r\n      </Modal>\r\n\r\n      {/* popup for upload progress */}\r\n      {/* <Modal\r\n                show={transferModalState}\r\n                // modalClosed={closeTransferModal}\r\n                color=\"#fff\">\r\n                <DownloadPopup\r\n                    placeholder=\"Upload\"\r\n                    // name={transferItemDetails.fileName.split('.').slice(0, -1).join('.')}\r\n                    name={transferItemDetails.fileName}\r\n                    // create={(newName) => renameItem(newName)}\r\n                    type={transferItemDetails.fileType}\r\n                    closeHandler={closeTransferModal}\r\n                    size={transferItemDetails.fileSize}\r\n                    path={currentDirectoryPath + '/' + transferItemDetails.fileName.split('.').slice(0, -1).join('.')} />\r\n            </Modal> */}\r\n\r\n      <div className=\"App\">{loading && <FileSkeleton />}</div>\r\n      <DragAndDrop handleDrop={handleDrop}>\r\n        <div ref={ref} className=\"explorer-data\" id=\"explorer-data-files\">\r\n          {searchResults.length > 0 && connectionLiveStatus\r\n            ? searchResults.map((item, index) => {\r\n                return (\r\n                  <FileComponent\r\n                    key={index}\r\n                    id={item.name + item.type}\r\n                    onContextMenu={(e) =>\r\n                      displayMenu(e, item.name, item.type, item.size)\r\n                    }\r\n                    onClick={() => changePath(item.name, item.type, item.size)}\r\n                    onDoubleClick={() =>\r\n                      changePath(item.name, item.type, item.size)\r\n                    }\r\n                    name={item.name}\r\n                    type={item.type}\r\n                    size={item.size}\r\n                    lastMod={item.modifiedAt}\r\n                  />\r\n                );\r\n              })\r\n            : errorSVG}\r\n\r\n          {/* <Menu id={MENU_ID}>\r\n                        <Item id=\"rename\" onClick={handleItemClick}>\r\n                            Rename\r\n                        </Item>\r\n                        <Item id=\"delete\" onClick={handleItemClick}>\r\n                            Delete\r\n                        </Item>\r\n                        <Item id=\"download\" onClick={handleItemClick}>\r\n                            Download\r\n                        </Item>\r\n                    </Menu> */}\r\n\r\n          <ControlledMenu\r\n            anchorPoint={anchorPoint}\r\n            isOpen={isOpen}\r\n            onClose={() => setOpen(false)}\r\n          >\r\n            <MenuItem value=\"rename\" onClick={handleItemClick}>\r\n              Rename\r\n            </MenuItem>\r\n            <MenuItem value=\"delete\" onClick={handleItemClick}>\r\n              Delete\r\n            </MenuItem>\r\n            <MenuItem value=\"Download\" onClick={handleItemClick}>\r\n              Download\r\n            </MenuItem>\r\n          </ControlledMenu>\r\n        </div>\r\n      </DragAndDrop>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExplorerMenu;\r\n","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\SideBar\\Sidebar2.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\pages\\Dashboard\\FilesMenu\\FilesMenu2.js",["299","300","301","302"],"import { React, useEffect, useState, useRef } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport \"./FilesMenu2.css\";\r\nimport DragAndDrop from \"../../../components/DragAndDrop/DragAndDrop\";\r\nimport FileComponent from \"../../../components/FileExplorer/FileComponent/FileComponent\";\r\nimport NoFiles from \"../../../Errors/NoFiles/NoFiles\";\r\nimport axios from \"axios\";\r\nimport Snackbar from \"../../../components/Snackbar/Snackbar\";\r\nimport Modal from \"../../../components/Modal/Modal\";\r\nimport DownloadPopup from \"../../../components/FileExplorer/ExplorerMenu/DownloadPopup/DownloadPopup\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport SearchBar from \"../../../components/FileExplorer/ExplorerMenu/SearchBar/SearchBar\";\r\nimport NoConnection from \"../../../Errors/NoConnection/NoConnection\";\r\nimport FileSkeleton from \"../../../components/skeleton/FileSkeleton2\";\r\nimport ConfirmDelete from \"../../../components/FileExplorer/ExplorerMenu/ConfirmDelete/ConfirmDelete\";\r\nimport ModifyContent from \"../../../components/FileExplorer/ExplorerMenu/ModifyContent/ModifyContent\";\r\n\r\nimport { MenuItem, ControlledMenu } from \"@szhsin/react-menu\";\r\n\r\nconst FilesMenu2 = () => {\r\n  const connectionDetails = useSelector((state) =>\r\n    state != null ? state.connectionDetails : null\r\n  );\r\n  const [connectionLiveStatus, setConnectionLiveStatus] = useState(true);\r\n\r\n  const [fileList, setFileList] = useState([]);\r\n\r\n  const [isOpen, setOpen] = useState(false);\r\n  const [anchorPoint, setAnchorPoint] = useState({ x: 0, y: 0 });\r\n  const [itemDataa, setItemDataa] = useState({\r\n    fileName: \"fileName\",\r\n    fileType: 1,\r\n    fileSize: \"230 Mb\",\r\n  });\r\n\r\n  // current directory and transfer states\r\n  const [currentDirectoryPath, setCurrentDirectoryPath] = useState(\"/Download\");\r\n  const [transferModalState, setTransferModalState] = useState(false);\r\n  const [deleteModalState, setDeleteModalState] = useState(false);\r\n\r\n  const [transferItemDetails, setTransferItemDetails] = useState({\r\n    fileName: \"filename\",\r\n    fileType: 1,\r\n    fileSize: \"200 Mb\",\r\n    transferType: \"Download\",\r\n  });\r\n\r\n  // rename states\r\n  const [renameModalState, setRenameModalState] = useState(false);\r\n\r\n  const [downloaderComponentUI, setDownloaderComponentUI] = useState(true);\r\n  const [snackbarStatus, setSnackbarStatus] = useState(false);\r\n\r\n  // Search states\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [searchResults, setSearchResults] = useState([]);\r\n\r\n  // Error SVG\r\n  const [errorSVG, setErrorSVG] = useState(null);\r\n\r\n  let storagePercent =\r\n    (connectionDetails.usedSpace / connectionDetails.totalSize) * 100;\r\n\r\n  // ref for scroll\r\n  const ref = useRef();\r\n\r\n  // lazy loading\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .post(\"/changePath\", {\r\n        path: currentDirectoryPath,\r\n        connectionDetails: connectionDetails,\r\n      })\r\n      .then((res) => {\r\n        setFileList(res.data);\r\n        setLoading(false);\r\n        setSearchTerm(\"\");\r\n        refreshScrollBar();\r\n      })\r\n      .catch((e) => {\r\n        setConnectionLiveStatus(false);\r\n        setLoading(false);\r\n        console.log(\"error while fetching files list \" + e);\r\n        setErrorSVG(\r\n          <div className=\"noFilesImageDashboard\">\r\n            <NoConnection svgHeight={290} svgWidth={336} />\r\n          </div>\r\n        );\r\n      });\r\n  }, [currentDirectoryPath]);\r\n\r\n  useEffect(() => {\r\n    let results = [];\r\n    if (fileList.length > 0) {\r\n      fileList.map((jsFrameworksSearch) => {\r\n        if (jsFrameworksSearch.name.toLowerCase().includes(searchTerm.trim()))\r\n          results.push(jsFrameworksSearch);\r\n      });\r\n    } else if (connectionDetails.host != null) {\r\n      setErrorSVG(\r\n        <div className=\"noFilesImageDashboard\">\r\n          <NoFiles />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    setSearchResults(results);\r\n  }, [searchTerm, fileList]);\r\n\r\n  const refreshScrollBar = () => {\r\n    ref.current.scrollTo(0, 0);\r\n  };\r\n\r\n  let history = useHistory();\r\n\r\n  const changeRoute = (path) => {\r\n    history.push(path);\r\n  };\r\n\r\n  const changePath = (name, type, size) => {\r\n    setTransferItemDetails({\r\n      fileSize: size,\r\n      fileType: type,\r\n      fileName: name,\r\n      transferType: \"Download\",\r\n    });\r\n    if (type === 2) {\r\n      setLoading(true);\r\n      setCurrentDirectoryPath(currentDirectoryPath + \"/\" + name); // works for ftp-server app\r\n      // setCurrentDirectoryPath(currentDirectoryPath + name)\r\n    } else {\r\n      // file name without extension = filename.split('.').slice(0, -1).join('.')\r\n\r\n      // const file = {\r\n      //     name: name,\r\n      //     // name: \"photo-1\",\r\n      //     thumb:\r\n      //         \"https://images.unsplash.com/photo-1604263439201-171fb8c0fddc?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=427&q=80 427w\",\r\n      //     file:\r\n      //         \"https://images.unsplash.com/photo-1604263439201-171fb8c0fddc?rnd=\" +\r\n      //         Math.random(),\r\n\r\n      //     filename: name,\r\n      //     // filename: \"photo-1.jpg\",\r\n      //     currentDirectoryPath: currentDirectoryPath,\r\n      //     connectionDetails: connectionDetails\r\n      // };\r\n\r\n      // downloadFile(file)\r\n\r\n      // Download file function..\r\n      setTransferModalState(true);\r\n      setDownloaderComponentUI(true);\r\n\r\n      console.log(\"Before download \" + downloaderComponentUI);\r\n\r\n      axios\r\n        .post(\"/downloadFile\", {\r\n          path: currentDirectoryPath,\r\n          name: name,\r\n          connectionDetails: connectionDetails,\r\n        })\r\n        .then((res) => {\r\n          console.log(\"After download: \" + downloaderComponentUI);\r\n          setDownloaderComponentUI(false);\r\n          setTransferModalState(false);\r\n          setSnackbarStatus(true);\r\n          setTimeout(() => {\r\n            setSnackbarStatus(false);\r\n          }, 2000);\r\n          setSearchTerm(\"\");\r\n          // alert(res.data + ' Implement a download progress bar');\r\n        })\r\n        .catch((e) => {\r\n          console.log(\"error while going back \" + e);\r\n          setConnectionLiveStatus(false);\r\n          setErrorSVG(\r\n            <div className=\"noFilesImageDashboard\">\r\n              <NoConnection svgHeight={290} svgWidth={336} />\r\n            </div>\r\n          );\r\n        });\r\n      // }\r\n    }\r\n  };\r\n\r\n  const getCodedBuffer = (file) => {\r\n    return new Promise(function (resolve, reject) {\r\n      let fileReader = new FileReader();\r\n      fileReader.readAsArrayBuffer(file);\r\n\r\n      fileReader.onload = function (ev) {\r\n        const array = new Uint8Array(ev.target.result);\r\n        // const fileByteArray = [];\r\n        let codedBuffer = \"\";\r\n\r\n        for (let i = 0; i < array.length; i++) {\r\n          // fileByteArray.push(array[i]);\r\n          codedBuffer += String.fromCharCode(array[i]);\r\n        }\r\n        resolve(codedBuffer); // successful\r\n      };\r\n      fileReader.onerror = reject; // call reject if error\r\n    });\r\n  };\r\n\r\n  const handleDrop = (files) => {\r\n    // Implement upload function\r\n    setTransferModalState(true);\r\n\r\n    for (let i = 0; i < files.length; i++) {\r\n      let fileType = \"Folder\";\r\n      let fileSize = files[i].size;\r\n\r\n      if (files[i].isFile) {\r\n        fileType = 1;\r\n        fileSize = files[i].size;\r\n        console.log(\"file size: \" + files[i].size);\r\n      }\r\n\r\n      setTransferItemDetails({\r\n        fileName: files[i].name,\r\n        fileType: fileType,\r\n        fileSize: fileSize,\r\n        transferType: \"Upload\",\r\n      });\r\n\r\n      getCodedBuffer(files[i]).then((result) => {\r\n        axios\r\n          .post(\"/handleDrop\", {\r\n            value: result,\r\n            fileName: files[i].name,\r\n            path: currentDirectoryPath,\r\n            connectionDetails: connectionDetails,\r\n          })\r\n          .then((res) => {\r\n            setTransferModalState(false);\r\n            setFileList(res.data);\r\n            setSnackbarStatus(true);\r\n            setTimeout(() => {\r\n              setSnackbarStatus(false);\r\n            }, 2000);\r\n            setSearchTerm(\"\");\r\n          })\r\n          .catch((err) => {\r\n            alert(\"error occured while uploading \" + err);\r\n            setConnectionLiveStatus(false);\r\n\r\n            setErrorSVG(\r\n              <div className=\"noFilesImageDashboard\">\r\n                <NoConnection svgHeight={290} svgWidth={336} />\r\n              </div>\r\n            );\r\n          });\r\n      });\r\n    }\r\n  };\r\n\r\n  const confirmDel = () => {\r\n    let fileName = itemDataa.fileName;\r\n    let fileType = itemDataa.fileType;\r\n    let fileSize = itemDataa.fileSize;\r\n\r\n    let deletePath = currentDirectoryPath + \"/\" + fileName;\r\n    console.log(deletePath);\r\n\r\n    setTransferItemDetails({\r\n      fileSize: fileSize,\r\n      fileType: fileType,\r\n      fileName: fileName,\r\n      transferType: \"Delete\",\r\n    });\r\n\r\n    if (fileType === 2) {\r\n      setTransferModalState(true);\r\n\r\n      // Delete a directory\r\n      console.log(\"deleting a folder\");\r\n\r\n      axios\r\n        .post(\"/deleteDir\", {\r\n          path: currentDirectoryPath,\r\n          fileName: fileName,\r\n          connectionDetails: connectionDetails,\r\n        })\r\n        .then((res) => {\r\n          setTransferModalState(false);\r\n\r\n          setFileList(res.data);\r\n          setSnackbarStatus(true);\r\n          setTimeout(() => {\r\n            setSnackbarStatus(false);\r\n          }, 2000);\r\n          setSearchTerm(\"\");\r\n        })\r\n        .catch(() => {\r\n          setConnectionLiveStatus(false);\r\n          setErrorSVG(\r\n            <div className=\"noFilesImage\">\r\n              <NoConnection svgHeight={500} svgWidth={336} />\r\n            </div>\r\n          );\r\n          console.log(\"error while deleting file\");\r\n        });\r\n    } else {\r\n      setTransferModalState(true);\r\n\r\n      // Delete a file\r\n      console.log(\"deleting a file\");\r\n      axios\r\n        .post(\"/deleteFile\", {\r\n          path: currentDirectoryPath,\r\n          fileName: fileName,\r\n          connectionDetails: connectionDetails,\r\n        })\r\n        .then((res) => {\r\n          setTransferModalState(false);\r\n          setFileList(res.data);\r\n          setSnackbarStatus(true);\r\n          setTimeout(() => {\r\n            setSnackbarStatus(false);\r\n          }, 2000);\r\n          setSearchTerm(\"\");\r\n        })\r\n        .catch(() => {\r\n          console.log(\"error while deleting file\");\r\n          setConnectionLiveStatus(false);\r\n          setErrorSVG(\r\n            <div className=\"noFilesImage\">\r\n              <NoConnection svgHeight={500} svgWidth={336} />\r\n            </div>\r\n          );\r\n        });\r\n    }\r\n  };\r\n\r\n  const handleItemClick = (e) => {\r\n    let fileName = itemDataa.fileName;\r\n    let fileType = itemDataa.fileType;\r\n    let fileSize = itemDataa.fileSize;\r\n\r\n    switch (e.value) {\r\n      case \"rename\":\r\n        // logic to remove the row\r\n        setRenameModalState(true);\r\n        break;\r\n\r\n      case \"delete\":\r\n        console.log(\" delete \" + fileType);\r\n\r\n        setDeleteModalState(true);\r\n        // confirmDel(fileName, fileType, fileSize);\r\n        break;\r\n      case \"download\":\r\n        console.log(fileType + \" download\");\r\n        // downloading a file..\r\n        setTransferItemDetails({\r\n          fileSize: fileSize,\r\n          fileType: fileType,\r\n          fileName: fileName,\r\n          transferType: \"Download\",\r\n        });\r\n\r\n        if (fileType === 2) {\r\n          console.log(\"downloading a folder\");\r\n\r\n          setTransferModalState(true);\r\n          setDownloaderComponentUI(true);\r\n\r\n          axios\r\n            .post(\"/downloadDirectory\", {\r\n              path: currentDirectoryPath,\r\n              name: fileName,\r\n              connectionDetails: connectionDetails,\r\n            })\r\n            .then((res) => {\r\n              setDownloaderComponentUI(false);\r\n              setTransferModalState(false);\r\n              setSnackbarStatus(true);\r\n              setTimeout(() => {\r\n                setSnackbarStatus(false);\r\n              }, 2000);\r\n              // alert(res.data + ' Implement a download progress bar');\r\n            })\r\n            .catch(() => {\r\n              console.log(\"error while going back\");\r\n              setConnectionLiveStatus(false);\r\n              setErrorSVG(\r\n                <div className=\"noFilesImageDashboard\">\r\n                  <NoConnection svgHeight={290} svgWidth={336} />\r\n                </div>\r\n              );\r\n            });\r\n        } else {\r\n          // downloading a file\r\n          setTransferModalState(true);\r\n          setDownloaderComponentUI(true);\r\n\r\n          console.log(\"Before download \" + downloaderComponentUI);\r\n\r\n          axios\r\n            .post(\"/downloadFile\", {\r\n              path: currentDirectoryPath,\r\n              name: fileName,\r\n              connectionDetails: connectionDetails,\r\n            })\r\n            .then((res) => {\r\n              console.log(\"After download: \" + downloaderComponentUI);\r\n              setDownloaderComponentUI(false);\r\n              setTransferModalState(false);\r\n              setSnackbarStatus(true);\r\n              setTimeout(() => {\r\n                setSnackbarStatus(false);\r\n              }, 2000);\r\n              // alert(res.data + ' Implement a download progress bar');\r\n            })\r\n            .catch((e) => {\r\n              setConnectionLiveStatus(false);\r\n              setErrorSVG(\r\n                <div className=\"noFilesImageDashboard\">\r\n                  <NoConnection svgHeight={290} svgWidth={336} />\r\n                </div>\r\n              );\r\n            });\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const renameItem = (newName) => {\r\n    // let oldName = itemData.slice(0, -1);\r\n\r\n    setTransferItemDetails({\r\n      fileSize: itemDataa.fileSize,\r\n      fileType: itemDataa.fileType,\r\n      fileName: itemDataa.fileName,\r\n      transferType: \"Rename\",\r\n    });\r\n\r\n    let oldName = itemDataa.fileName;\r\n\r\n    if (itemDataa.fileType !== 2) {\r\n      let ext = oldName.split(\".\").pop();\r\n      newName = newName + \".\" + ext;\r\n    }\r\n\r\n    axios\r\n      .post(\"/renameFile\", {\r\n        oldName: oldName,\r\n        path: currentDirectoryPath,\r\n        newName: newName,\r\n        connectionDetails: connectionDetails,\r\n      })\r\n      .then((res) => {\r\n        setFileList(res.data);\r\n        setSnackbarStatus(true);\r\n        setTimeout(() => {\r\n          setSnackbarStatus(false);\r\n        }, 2000);\r\n        setSearchTerm(\"\");\r\n      })\r\n      .catch((e) => {\r\n        setSearchTerm(\"\");\r\n        console.log(\"error while renaming file \" + e);\r\n      });\r\n  };\r\n\r\n  const closeRenameModal = () => {\r\n    setRenameModalState(false);\r\n  };\r\n\r\n  const closeTransferModal = () => {\r\n    setTransferModalState(false);\r\n  };\r\n\r\n  const closeDeleteModal = () => {\r\n    setDeleteModalState(false);\r\n  };\r\n\r\n  const closeSnackbar = () => {\r\n    setSnackbarStatus(false);\r\n  };\r\n\r\n  const goBack = () => {\r\n    setLoading(true);\r\n    const p = currentDirectoryPath.slice(\r\n      0,\r\n      currentDirectoryPath.lastIndexOf(\"/\")\r\n    );\r\n    if (p !== \"\") {\r\n      axios\r\n        .post(\"/changePath\", { path: p, connectionDetails: connectionDetails })\r\n        .then((res) => {\r\n          setLoading(false);\r\n          setFileList(res.data);\r\n        })\r\n        .catch((e) => {\r\n          setLoading(false);\r\n          console.log(\"error while going back \" + e);\r\n        });\r\n      setCurrentDirectoryPath(\r\n        currentDirectoryPath.slice(0, currentDirectoryPath.lastIndexOf(\"/\"))\r\n      );\r\n    } else {\r\n      setLoading(false);\r\n      alert(\"nope nope\");\r\n    }\r\n  };\r\n\r\n  const displayMenu = (e, fileName, fileType, fileSize) => {\r\n    e.preventDefault();\r\n    setAnchorPoint({ x: e.clientX, y: e.clientY });\r\n    setOpen(true);\r\n    setItemDataa({\r\n      fileName: fileName,\r\n      fileType: fileType,\r\n      fileSize: fileSize,\r\n    });\r\n  };\r\n\r\n  const updateSearchResult = async (input) => {\r\n    // setSearchTerm(event.target.value)\r\n    let results = [];\r\n    if (fileList.length > 0) {\r\n      fileList.map((jsFrameworksSearch) => {\r\n        if (jsFrameworksSearch.name.toLowerCase().includes(input.trim()))\r\n          results.push(jsFrameworksSearch);\r\n      });\r\n    }\r\n    setSearchTerm(input);\r\n    setSearchResults(results);\r\n  };\r\n\r\n  return (\r\n    <div className=\"dashboard-screen\">\r\n      <h1 className=\"dashboard-copy poppins-bold-black-27-3px\">Dashboard</h1>\r\n      <div className=\"dashboard-storage-details\">\r\n        <div\r\n          className=\"dashboard-overlap-group\"\r\n          onClick={() => changeRoute(\"/explorer\")}\r\n        >\r\n          <div className=\"dashboard-overlap-group-header\">\r\n            <img\r\n              alt=\"macos-folder-icon\"\r\n              className=\"macos-folder-icon\"\r\n              src=\"/images/macos-folder-icon.png\"\r\n            />\r\n            <div className=\"internal-storage poppins-medium-black-14px\">\r\n              Internal Storage\r\n            </div>\r\n          </div>\r\n          <div className=\"storage-progress\">\r\n            <progress max=\"100\" value={storagePercent}></progress>\r\n            <div className=\"storage-progress-count poppins-regular-black-12px\">\r\n              {console.log(connectionDetails)}\r\n              <p>{connectionDetails.usedSpace + \" GB\"}</p>\r\n              <p>{connectionDetails.totalSize + \" GB\"}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"recently-used\">\r\n        <div className=\"dashboard-recently-used-title\">\r\n          <div className=\"downloadsPath\">\r\n            {currentDirectoryPath === \"/Download\" && (\r\n              <div className=\"recently-used-1 poppins-medium-black-18px\">\r\n                Downloads\r\n              </div>\r\n            )}\r\n\r\n            {currentDirectoryPath !== \"/Download\" && (\r\n              <div className=\"dashboard-file-icon\">\r\n                <div className=\"overlap-group-1\">\r\n                  <div className=\"rectangle-9\"></div>\r\n                  <div className=\"rectangle-10\"></div>\r\n                  <div className=\"rectangle-5-copy\"></div>\r\n                </div>\r\n                <div className=\"recently-used-1 poppins-medium-black-14px\">\r\n                  <span style={{ marginLeft: \"13px\" }}>\r\n                    {currentDirectoryPath.slice(1).replaceAll(\"/\", \">\")}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            {/* <div className=\"recently-used-1 poppins-medium-black-18px\">\r\n              {currentDirectoryPath === \"/Download\"\r\n                ? \"Downloads \"\r\n                : currentDirectoryPath.slice(1).replaceAll(\"/\", \" > \")}\r\n            </div> */}\r\n\r\n            {currentDirectoryPath !== \"/Download\" ? (\r\n              <span className=\"goBack\">\r\n                <img\r\n                  alt=\"goBack\"\r\n                  onClick={() => goBack()}\r\n                  className=\"goBackImg\"\r\n                  src=\"/images/icons/goBack.svg\"\r\n                ></img>\r\n              </span>\r\n            ) : null}\r\n            {/* <span className=\"goBack\">\r\n                            <img alt=\"goBack\" onClick={() => goBack()}\r\n                                className=\"goBackImg\" src=\"/images/icons/goBack.svg\"></img>\r\n                        </span> */}\r\n            <SearchBar input={searchTerm} onChange={updateSearchResult} />\r\n          </div>\r\n          <div\r\n            className=\"view-all poppins-regular-normal-black-14px\"\r\n            onClick={() => changeRoute(\"/explorer\")}\r\n          >\r\n            View all\r\n          </div>\r\n        </div>\r\n        <div className=\"recently-used-data\">\r\n          <div className=\"recently-used-name valign-text-middle poppins-light-black-14px\">\r\n            Name\r\n          </div>\r\n          <div className=\"recently-used-last-m valign-text-middle poppins-light-black-14px\">\r\n            Last Modified\r\n          </div>\r\n          <div className=\"size valign-text-middle poppins-light-black-14px\">\r\n            Size\r\n          </div>\r\n        </div>\r\n\r\n        {/* popup for rename */}\r\n        <Modal\r\n          show={renameModalState}\r\n          modalClosed={closeRenameModal}\r\n          color=\"#fff\"\r\n        >\r\n          <ModifyContent\r\n            desc=\"Are you sure to rename this content ? This will rename the content\r\n          permanently.\"\r\n            placeholder=\"Enter new name\"\r\n            title={\"Rename \" + itemDataa.fileName}\r\n            create={(newName) => renameItem(newName)}\r\n            closeHandler={closeRenameModal}\r\n            action=\"Rename\"\r\n            path={currentDirectoryPath + \"/\" + itemDataa.fileName}\r\n          />\r\n        </Modal>\r\n\r\n        {/* popup for delete */}\r\n        <Modal\r\n          show={deleteModalState}\r\n          modalClosed={closeDeleteModal}\r\n          color=\"#fff\"\r\n        >\r\n          <ConfirmDelete\r\n            title={itemDataa.fileName}\r\n            delete={confirmDel}\r\n            closeHandler={closeDeleteModal}\r\n            path={currentDirectoryPath + \"/\" + itemDataa.fileName}\r\n          />\r\n        </Modal>\r\n\r\n        {/* popup for transfer progress */}\r\n        <Modal\r\n          show={transferModalState}\r\n          // modalClosed={closeTransferModal}\r\n          color=\"#fff\"\r\n        >\r\n          <DownloadPopup\r\n            placeholder={transferItemDetails.transferType}\r\n            name={transferItemDetails.fileName}\r\n            // create={(newName) => renameItem(newName)}\r\n            type={transferItemDetails.fileType}\r\n            closeHandler={closeTransferModal}\r\n            size={transferItemDetails.fileSize}\r\n            path={\r\n              currentDirectoryPath +\r\n              \"/\" +\r\n              transferItemDetails.fileName.split(\".\").slice(0, -1).join(\".\")\r\n            }\r\n          />\r\n        </Modal>\r\n\r\n        {/* Snackbar */}\r\n        <div className=\"explorer-snackbar\">\r\n          <Snackbar\r\n            transferType={transferItemDetails.transferType}\r\n            handleSnackbarClose={closeSnackbar}\r\n            show={snackbarStatus}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"App\">{loading && <FileSkeleton />}</div>\r\n\r\n        <DragAndDrop handleDrop={handleDrop}>\r\n          <div className=\"recently-used-explorer-data\" ref={ref}>\r\n            {searchResults.length > 0 && connectionLiveStatus\r\n              ? searchResults.map((item, index) => {\r\n                return (\r\n                  <FileComponent\r\n                    key={index}\r\n                    id={item.name + item.type}\r\n                    onContextMenu={(e) =>\r\n                      displayMenu(e, item.name, item.type, item.size)\r\n                    }\r\n                    onClick={() =>\r\n                      changePath(item.name, item.type, item.size)\r\n                    }\r\n                    name={item.name}\r\n                    type={item.type}\r\n                    size={item.size}\r\n                    lastMod={item.modifiedAt}\r\n                  />\r\n                );\r\n              })\r\n              : errorSVG}\r\n\r\n            {/* <Menu id={MENU_ID}>\r\n                        <Item id=\"rename\" onClick={handleItemClick}>\r\n                            Rename\r\n                        </Item>\r\n                        <Item id=\"delete\" onClick={handleItemClick}>\r\n                            Delete\r\n                        </Item>\r\n                        <Item id=\"download\" onClick={handleItemClick}>\r\n                            Download\r\n                        </Item>\r\n                    </Menu> */}\r\n\r\n            <ControlledMenu\r\n              anchorPoint={anchorPoint}\r\n              isOpen={isOpen}\r\n              onClose={() => setOpen(false)}\r\n            >\r\n              <MenuItem value=\"rename\" onClick={handleItemClick}>\r\n                Rename\r\n              </MenuItem>\r\n              <MenuItem value=\"delete\" onClick={handleItemClick}>\r\n                Delete\r\n              </MenuItem>\r\n              <MenuItem value=\"download\" onClick={handleItemClick}>\r\n                Download\r\n              </MenuItem>\r\n            </ControlledMenu>\r\n          </div>\r\n        </DragAndDrop>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FilesMenu2;\r\n","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\PhoneSection\\Phone.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\Header\\Header.js",["303","304","305","306"],"import React, { useEffect, useState } from \"react\";\r\nimport \"./Header.css\";\r\nimport { BiMenuAltLeft } from \"react-icons/bi\";\r\nimport { IoCloseOutline } from \"react-icons/io5\";\r\nimport { TweenMax } from \"gsap\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Contact from \"../../pages/Contact/Contact\";\r\n// import { Link } from 'react-router-dom'\r\n\r\nconst Header = () => {\r\n  let history = useHistory();\r\n  const [contactPageStatus, setContactPageStatus] = useState(false);\r\n\r\n  const changeRoute = (path) => {\r\n    history.push(path);\r\n  };\r\n\r\n  useEffect(() => {\r\n    TweenMax.from(\".navLogo\", {\r\n      autoAlpha: 0,\r\n      duration: 1,\r\n      opacity: 0,\r\n      y: 10,\r\n      delay: 2,\r\n    });\r\n    TweenMax.from(\".navToggle\", {\r\n      autoAlpha: 0,\r\n      duration: 1,\r\n      opacity: 0,\r\n      y: 10,\r\n      delay: 2,\r\n    });\r\n    TweenMax.from(\".navItem\", {\r\n      autoAlpha: 0,\r\n      opacity: 0,\r\n      duration: 1,\r\n      delay: 2.1,\r\n      y: 30,\r\n      stagger: 0.2,\r\n    });\r\n  }, []);\r\n\r\n  const revealContactPage = () => {\r\n    console.log(\"reached\");\r\n    setContactPageStatus(true);\r\n  };\r\n\r\n  return (\r\n    <header className=\"l-header\">\r\n      <nav className=\"nav bd-grid-header\">\r\n        <div>\r\n          <a href=\"/\" className=\"navLogo\">\r\n            No Wires\r\n          </a>\r\n        </div>\r\n\r\n        <div className=\"navToggle\" id=\"nav-toggle\">\r\n          <BiMenuAltLeft />\r\n        </div>\r\n\r\n        <div className=\"navMenu\" id=\"nav-menu\">\r\n          <div className=\"navClose\" id=\"nav-close\">\r\n            <IoCloseOutline />\r\n          </div>\r\n\r\n          <ul className=\"navList\">\r\n            {/* <Link style={{ textDecoration: \"none\" }} to='/home'> */}\r\n            <li className=\"navItem navLink\">\r\n              <a onClick={() => changeRoute(\"/\")} className=\"navLink\">\r\n                Home\r\n              </a>\r\n            </li>\r\n            {/* </Link> */}\r\n\r\n            {/* <Link style={{ textDecoration: \"none\" }} to='/myOrders'> */}\r\n            <li className=\"navItem\">\r\n              <a onClick={() => changeRoute(\"/explorer\")} className=\"navLink\">\r\n                Explorer\r\n              </a>\r\n            </li>\r\n            {/* </Link> */}\r\n\r\n            {/* <Link style={{ textDecoration: \"none\" }} to='/about'> */}\r\n            <li className=\"navItem\">\r\n              <a onClick={() => changeRoute(\"/about\")} className=\"navLink\">\r\n                About\r\n              </a>\r\n            </li>\r\n            {/* </Link> */}\r\n\r\n            {/* <Link style={{ textDecoration: \"none\" }} to='/contact'> */}\r\n            <li className=\"navItem\">\r\n              <a onClick={() => revealContactPage()} className=\"navLink\">\r\n                Contact\r\n              </a>\r\n            </li>\r\n            {/* </Link> */}\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n      {contactPageStatus && (\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n          }}\r\n        >\r\n          <Contact closeHandler={() => setContactPageStatus(false)} />\r\n        </div>\r\n      )}\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\Footer\\Footer.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\Modal\\Modal.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\Snackbar\\Snackbar.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\DragAndDrop\\DragAndDrop.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\FileExplorer\\FileComponent\\FileComponent.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\Errors\\NoFiles\\NoFiles.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\FileExplorer\\ExplorerMenu\\DownloadPopup\\DownloadPopup.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\FileExplorer\\ExplorerMenu\\SearchBar\\SearchBar.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\Errors\\NoConnection\\NoConnection.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\FileExplorer\\ExplorerMenu\\CreateFolder\\CreateFolder.js",[],["307","308"],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\hoc\\Auxiliary.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\Backdrop\\Backdrop.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\FileExplorer\\FileComponent\\IconComponent\\IconComponent.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\helpers\\useSingleClick\\useSingleAndDoubleClicks.js",[],["309","310"],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\skeleton\\FileSkeleton.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\skeleton\\FileSkeleton2.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\FileExplorer\\ExplorerMenu\\ConfirmDelete\\ConfirmDelete.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\FileExplorer\\ExplorerMenu\\ModifyContent\\ModifyContent.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\PlainHeader\\PlainHeader.js",["311","312","313","314"],"import React, {  useState } from \"react\";\r\nimport \"./PlainHeader.css\";\r\nimport { BiMenuAltLeft } from \"react-icons/bi\";\r\nimport { IoCloseOutline } from \"react-icons/io5\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Contact from \"../../pages/Contact/Contact\";\r\n// import { Link } from 'react-router-dom'\r\n\r\nconst PlainHeader = () => {\r\n  let history = useHistory();\r\n  const [contactPageStatus, setContactPageStatus] = useState(false);\r\n\r\n  const changeRoute = (path) => {\r\n    history.push(path);\r\n  };\r\n\r\n  const revealContactPage = () => {\r\n    console.log(\"reached\");\r\n    setContactPageStatus(true);\r\n  };\r\n\r\n  return (\r\n    <header className=\"l-header\">\r\n      <nav className=\"nav bd-grid-header\">\r\n        <div>\r\n          <a href=\"/\" className=\"navLogo\">\r\n            No Wires\r\n          </a>\r\n        </div>\r\n\r\n        <div className=\"navToggle\" id=\"nav-toggle\">\r\n          <BiMenuAltLeft />\r\n        </div>\r\n\r\n        <div className=\"navMenu\" id=\"nav-menu\">\r\n          <div className=\"navClose\" id=\"nav-close\">\r\n            <IoCloseOutline />\r\n          </div>\r\n\r\n          <ul className=\"navList\">\r\n            {/* <Link style={{ textDecoration: \"none\" }} to='/home'> */}\r\n            <li className=\"navItem navLink\">\r\n              <a onClick={() => changeRoute(\"/\")} className=\"navLink\">\r\n                Home\r\n              </a>\r\n            </li>\r\n            {/* </Link> */}\r\n\r\n            {/* <Link style={{ textDecoration: \"none\" }} to='/myOrders'> */}\r\n            <li className=\"navItem\">\r\n              <a onClick={() => changeRoute(\"/explorer\")} className=\"navLink\">\r\n                Explorer\r\n              </a>\r\n            </li>\r\n            {/* </Link> */}\r\n\r\n            {/* <Link style={{ textDecoration: \"none\" }} to='/about'> */}\r\n            <li className=\"navItem\">\r\n              <a onClick={() => changeRoute(\"/about\")} className=\"navLink\">\r\n                About\r\n              </a>\r\n            </li>\r\n            {/* </Link> */}\r\n\r\n            {/* <Link style={{ textDecoration: \"none\" }} to='/contact'> */}\r\n            <li className=\"navItem\">\r\n              <a onClick={() => revealContactPage()} className=\"navLink\">\r\n                Contact\r\n              </a>\r\n            </li>\r\n            {/* </Link> */}\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n      {contactPageStatus && (\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n          }}\r\n        >\r\n          <Contact closeHandler={() => setContactPageStatus(false)} />\r\n        </div>\r\n      )}\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default PlainHeader;\r\n","D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\index.js",[],["315","316"],"D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\reportWebVitals.js",[],"D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\App.js",["317"],"D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\store\\ftp\\ftpReducer.js",["318","319"],"import * as actionTypes from './ftpTypes'\r\n\r\nconst initialState = {\r\n    connectionDetails: {\r\n        host: null,\r\n        port: null,\r\n        username: null,\r\n        password: null,\r\n        secure: null,\r\n        totalSize: null,\r\n        usedSpace: null,\r\n        totalSize: null\r\n    }\r\n}\r\n\r\nconst ftpReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case actionTypes.STORE_USER_DATA: return {\r\n            ...state,\r\n            connectionDetails: {\r\n                host: action.value.host,\r\n                port: action.value.port,\r\n                username: action.value.username,\r\n                password: action.value.password,\r\n                secure: action.value.secure,\r\n                totalSize: action.value.totalSize,\r\n                usedSpace: action.value.usedSpace,\r\n                totalSize: action.value.totalSize\r\n            }\r\n        }\r\n\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default ftpReducer;","D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\store\\ftp\\ftpTypes.js",[],"D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\pages\\Dashboard\\Dashboard.js",[],"D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\pages\\Home\\Home.js",["320"],"D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\pages\\FileExplorer\\FileExplorer.js",[],"D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\pages\\About\\About.js",["321"],"import React from \"react\";\r\nimport \"./About.css\";\r\nimport Header from \"../../components/Header/Header\";\r\nimport { AiFillLinkedin } from \"react-icons/ai\";\r\nimport { FaTwitter } from \"react-icons/fa\";\r\nimport { ImInstagram } from \"react-icons/im\";\r\nimport PlainHeader from \"../../components/PlainHeader/PlainHeader\";\r\n\r\nconst About = () => {\r\n  return (\r\n    <div>\r\n      <PlainHeader />\r\n      <div className=\"homeContainer bd-grid\">\r\n        <div className=\"homeImg aboutImg\" style={{ visibility: \"visible\" }}>\r\n          <img\r\n            style={{ objectFit: \"cover\" }}\r\n            className=\"mockup\"\r\n            alt=\"mockup\"\r\n            src=\"/images/pixeltrue-support.svg\"\r\n          />\r\n        </div>\r\n        <div className=\"homeData\">\r\n          <p\r\n            className=\"homeTitle\"\r\n            style={{ visibility: \"visible\", fontSize: \"50px\" }}\r\n          >\r\n            Jayanth Saikiran\r\n          </p>\r\n\r\n          <p className=\"homeDescription aboutDescription\" style={{ visibility: \"visible\" }}>\r\n            Lorem Ipsum is simply dummy text of the printing and typesetting\r\n            industry. Lorem Ipsum has been the industry's standard dummy text\r\n            ever since the 1500s, when an unknown printer took a galley of type\r\n            and scrambled it to make a type specimen book. It has survived not\r\n            only five centuries\r\n          </p>\r\n\r\n          <div class=\"social-media-icons-about\">\r\n            <FaTwitter\r\n              color=\"#000\"\r\n              cursor=\"pointer\"\r\n              onClick={() =>\r\n                window.open(\"https://twitter.com/jayanthsaikiran\", \"_blank\")\r\n              }\r\n            />\r\n            <ImInstagram\r\n              color=\"#000\"\r\n              cursor=\"pointer\"\r\n              onClick={() =>\r\n                window.open(\"https://instagram.com/jayanthsaikiran\", \"_blank\")\r\n              }\r\n            />\r\n            <AiFillLinkedin\r\n              color=\"#000\"\r\n              cursor=\"pointer\"\r\n              onClick={() =>\r\n                window.open(\r\n                  \"https://www.linkedin.com/in/jayanthsaikiran/\",\r\n                  \"_blank\"\r\n                )\r\n              }\r\n            />\r\n          </div>\r\n\r\n          {/* <ul class=\"social-list\">\r\n            <li>\r\n              <a class=\"icon icon-mail\" href=\"mailto:jonny@toyfight.co\"></a>\r\n            </li>\r\n            <li>\r\n              <a\r\n                target=\"_blank\"\r\n                class=\"icon icon-twitter\"\r\n                href=\"https://twitter.com/johnnyLander\"\r\n              ></a>\r\n            </li>\r\n            <li>\r\n              <a\r\n                target=\"_blank\"\r\n                class=\"icon icon-behance\"\r\n                href=\"https://www.behance.net/mrjonlander\"\r\n              ></a>\r\n            </li>\r\n            <li>\r\n              <a\r\n                target=\"_blank\"\r\n                class=\"icon icon-dribbble\"\r\n                href=\"https://dribbble.com/jonnyLander\"\r\n              ></a>\r\n            </li>\r\n            <li>\r\n              <a\r\n                target=\"_blank\"\r\n                class=\"icon icon-linkedin\"\r\n                href=\"https://www.linkedin.com/in/jonlander\"\r\n              ></a>\r\n            </li>\r\n          </ul> */}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default About;\r\n","D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\pages\\Contact\\Contact.js",[],"D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\pages\\Dashboard\\FilesMenu\\FilesMenu2.js",["322","323","324","325","326","327","328"],"import { React, useEffect, useState, useRef } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport \"./FilesMenu2.css\";\r\nimport DragAndDrop from \"../../../components/DragAndDrop/DragAndDrop\";\r\nimport FileComponent from \"../../../components/FileExplorer/FileComponent/FileComponent\";\r\nimport NoFiles from \"../../../Errors/NoFiles/NoFiles\";\r\nimport axios from \"axios\";\r\nimport Snackbar from \"../../../components/Snackbar/Snackbar\";\r\nimport Modal from \"../../../components/Modal/Modal\";\r\nimport DownloadPopup from \"../../../components/FileExplorer/ExplorerMenu/DownloadPopup/DownloadPopup\";\r\nimport CreateFolder from \"../../../components/FileExplorer/ExplorerMenu/CreateFolder/CreateFolder\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport SearchBar from \"../../../components/FileExplorer/ExplorerMenu/SearchBar/SearchBar\";\r\nimport NoConnection from \"../../../Errors/NoConnection/NoConnection\";\r\nimport FileSkeleton from \"../../../components/skeleton/FileSkeleton2\";\r\nimport ConfirmDelete from \"../../../components/FileExplorer/ExplorerMenu/ConfirmDelete/ConfirmDelete\";\r\nimport ModifyContent from \"../../../components/FileExplorer/ExplorerMenu/ModifyContent/ModifyContent\";\r\n\r\nimport { MenuItem, ControlledMenu } from \"@szhsin/react-menu\";\r\n\r\nconst FilesMenu2 = () => {\r\n  const connectionDetails = useSelector((state) =>\r\n    state != null ? state.connectionDetails : null\r\n  );\r\n  const [connectionLiveStatus, setConnectionLiveStatus] = useState(true);\r\n\r\n  const [fileList, setFileList] = useState([]);\r\n\r\n  const [isOpen, setOpen] = useState(false);\r\n  const [anchorPoint, setAnchorPoint] = useState({ x: 0, y: 0 });\r\n  const [itemDataa, setItemDataa] = useState({\r\n    fileName: \"fileName\",\r\n    fileType: 1,\r\n    fileSize: \"230 Mb\",\r\n  });\r\n\r\n  // current directory and transfer states\r\n  const [currentDirectoryPath, setCurrentDirectoryPath] = useState(\"/Download\");\r\n  const [transferModalState, setTransferModalState] = useState(false);\r\n  const [deleteModalState, setDeleteModalState] = useState(false);\r\n\r\n  const [transferItemDetails, setTransferItemDetails] = useState({\r\n    fileName: \"filename\",\r\n    fileType: 1,\r\n    fileSize: \"200 Mb\",\r\n    transferType: \"Download\",\r\n  });\r\n\r\n  // rename states\r\n  const [renameModalState, setRenameModalState] = useState(false);\r\n\r\n  const [downloaderComponentUI, setDownloaderComponentUI] = useState(true);\r\n  const [snackbarStatus, setSnackbarStatus] = useState(false);\r\n\r\n  // Search states\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [searchResults, setSearchResults] = useState([]);\r\n\r\n  // Error SVG\r\n  const [errorSVG, setErrorSVG] = useState(null);\r\n\r\n  let storagePercent =\r\n    (connectionDetails.usedSpace / connectionDetails.totalSize) * 100;\r\n\r\n  // ref for scroll\r\n  const ref = useRef();\r\n\r\n  // lazy loading\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .post(\"/changePath\", {\r\n        path: currentDirectoryPath,\r\n        connectionDetails: connectionDetails,\r\n      })\r\n      .then((res) => {\r\n        setFileList(res.data);\r\n        setLoading(false);\r\n        setSearchTerm(\"\");\r\n        refreshScrollBar();\r\n      })\r\n      .catch((e) => {\r\n        setConnectionLiveStatus(false);\r\n        setLoading(false);\r\n        console.log(\"error while fetching files list \" + e);\r\n        setErrorSVG(\r\n          <div className=\"noFilesImageDashboard\">\r\n            <NoConnection svgHeight={290} svgWidth={336} />\r\n          </div>\r\n        );\r\n      });\r\n  }, [currentDirectoryPath]);\r\n\r\n  useEffect(() => {\r\n    let results = [];\r\n    if (fileList.length > 0) {\r\n      fileList.map((jsFrameworksSearch) => {\r\n        if (jsFrameworksSearch.name.toLowerCase().includes(searchTerm.trim()))\r\n          results.push(jsFrameworksSearch);\r\n      });\r\n    } else if (connectionDetails.host != null) {\r\n      setErrorSVG(\r\n        <div className=\"noFilesImageDashboard\">\r\n          <NoFiles />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    setSearchResults(results);\r\n  }, [searchTerm, fileList]);\r\n\r\n  const refreshScrollBar = () => {\r\n    ref.current.scrollTo(0, 0);\r\n  };\r\n\r\n  let history = useHistory();\r\n\r\n  const changeRoute = (path) => {\r\n    history.push(path);\r\n  };\r\n\r\n  const changePath = (name, type, size) => {\r\n    setTransferItemDetails({\r\n      fileSize: size,\r\n      fileType: type,\r\n      fileName: name,\r\n      transferType: \"Download\",\r\n    });\r\n    if (type === 2) {\r\n      setLoading(true);\r\n      setCurrentDirectoryPath(currentDirectoryPath + \"/\" + name); // works for ftp-server app\r\n      // setCurrentDirectoryPath(currentDirectoryPath + name)\r\n    } else {\r\n      // file name without extension = filename.split('.').slice(0, -1).join('.')\r\n\r\n      // const file = {\r\n      //     name: name,\r\n      //     // name: \"photo-1\",\r\n      //     thumb:\r\n      //         \"https://images.unsplash.com/photo-1604263439201-171fb8c0fddc?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=427&q=80 427w\",\r\n      //     file:\r\n      //         \"https://images.unsplash.com/photo-1604263439201-171fb8c0fddc?rnd=\" +\r\n      //         Math.random(),\r\n\r\n      //     filename: name,\r\n      //     // filename: \"photo-1.jpg\",\r\n      //     currentDirectoryPath: currentDirectoryPath,\r\n      //     connectionDetails: connectionDetails\r\n      // };\r\n\r\n      // downloadFile(file)\r\n\r\n      // Download file function..\r\n      setTransferModalState(true);\r\n      setDownloaderComponentUI(true);\r\n\r\n      console.log(\"Before download \" + downloaderComponentUI);\r\n\r\n      axios\r\n        .post(\"/downloadFile\", {\r\n          path: currentDirectoryPath,\r\n          name: name,\r\n          connectionDetails: connectionDetails,\r\n        })\r\n        .then((res) => {\r\n          console.log(\"After download: \" + downloaderComponentUI);\r\n          setDownloaderComponentUI(false);\r\n          setTransferModalState(false);\r\n          setSnackbarStatus(true);\r\n          setTimeout(() => {\r\n            setSnackbarStatus(false);\r\n          }, 2000);\r\n          setSearchTerm(\"\");\r\n          // alert(res.data + ' Implement a download progress bar');\r\n        })\r\n        .catch((e) => {\r\n          console.log(\"error while going back \" + e);\r\n          setConnectionLiveStatus(false);\r\n          setErrorSVG(\r\n            <div className=\"noFilesImageDashboard\">\r\n              <NoConnection svgHeight={290} svgWidth={336} />\r\n            </div>\r\n          );\r\n        });\r\n      // }\r\n    }\r\n  };\r\n\r\n  const getCodedBuffer = (file) => {\r\n    return new Promise(function (resolve, reject) {\r\n      let fileReader = new FileReader();\r\n      fileReader.readAsArrayBuffer(file);\r\n\r\n      fileReader.onload = function (ev) {\r\n        const array = new Uint8Array(ev.target.result);\r\n        // const fileByteArray = [];\r\n        let codedBuffer = \"\";\r\n\r\n        for (let i = 0; i < array.length; i++) {\r\n          // fileByteArray.push(array[i]);\r\n          codedBuffer += String.fromCharCode(array[i]);\r\n        }\r\n        resolve(codedBuffer); // successful\r\n      };\r\n      fileReader.onerror = reject; // call reject if error\r\n    });\r\n  };\r\n\r\n  const handleDrop = (files) => {\r\n    // Implement upload function\r\n    setTransferModalState(true);\r\n\r\n    for (let i = 0; i < files.length; i++) {\r\n      let fileType = \"Folder\";\r\n      let fileSize = files[i].size;\r\n\r\n      if (files[i].isFile) {\r\n        fileType = 1;\r\n        fileSize = files[i].size;\r\n        console.log(\"file size: \" + files[i].size);\r\n      }\r\n\r\n      setTransferItemDetails({\r\n        fileName: files[i].name,\r\n        fileType: fileType,\r\n        fileSize: fileSize,\r\n        transferType: \"Upload\",\r\n      });\r\n\r\n      getCodedBuffer(files[i]).then((result) => {\r\n        axios\r\n          .post(\"/handleDrop\", {\r\n            value: result,\r\n            fileName: files[i].name,\r\n            path: currentDirectoryPath,\r\n            connectionDetails: connectionDetails,\r\n          })\r\n          .then((res) => {\r\n            setTransferModalState(false);\r\n            setFileList(res.data);\r\n            setSnackbarStatus(true);\r\n            setTimeout(() => {\r\n              setSnackbarStatus(false);\r\n            }, 2000);\r\n            setSearchTerm(\"\");\r\n          })\r\n          .catch((err) => {\r\n            alert(\"error occured while uploading \" + err);\r\n            setConnectionLiveStatus(false);\r\n\r\n            setErrorSVG(\r\n              <div className=\"noFilesImageDashboard\">\r\n                <NoConnection svgHeight={290} svgWidth={336} />\r\n              </div>\r\n            );\r\n          });\r\n      });\r\n    }\r\n  };\r\n\r\n  const confirmDel = () => {\r\n    let fileName = itemDataa.fileName;\r\n    let fileType = itemDataa.fileType;\r\n    let fileSize = itemDataa.fileSize;\r\n\r\n    let deletePath = currentDirectoryPath + \"/\" + fileName;\r\n    console.log(deletePath);\r\n\r\n    setTransferItemDetails({\r\n      fileSize: fileSize,\r\n      fileType: fileType,\r\n      fileName: fileName,\r\n      transferType: \"Delete\",\r\n    });\r\n\r\n    if (fileType === 2) {\r\n      setTransferModalState(true);\r\n\r\n      // Delete a directory\r\n      console.log(\"deleting a folder\");\r\n\r\n      axios\r\n        .post(\"/deleteDir\", {\r\n          path: currentDirectoryPath,\r\n          fileName: fileName,\r\n          connectionDetails: connectionDetails,\r\n        })\r\n        .then((res) => {\r\n          setTransferModalState(false);\r\n\r\n          setFileList(res.data);\r\n          setSnackbarStatus(true);\r\n          setTimeout(() => {\r\n            setSnackbarStatus(false);\r\n          }, 2000);\r\n          setSearchTerm(\"\");\r\n        })\r\n        .catch(() => {\r\n          setConnectionLiveStatus(false);\r\n          setErrorSVG(\r\n            <div className=\"noFilesImage\">\r\n              <NoConnection svgHeight={500} svgWidth={336} />\r\n            </div>\r\n          );\r\n          console.log(\"error while deleting file\");\r\n        });\r\n    } else {\r\n      setTransferModalState(true);\r\n\r\n      // Delete a file\r\n      console.log(\"deleting a file\");\r\n      axios\r\n        .post(\"/deleteFile\", {\r\n          path: currentDirectoryPath,\r\n          fileName: fileName,\r\n          connectionDetails: connectionDetails,\r\n        })\r\n        .then((res) => {\r\n          setTransferModalState(false);\r\n          setFileList(res.data);\r\n          setSnackbarStatus(true);\r\n          setTimeout(() => {\r\n            setSnackbarStatus(false);\r\n          }, 2000);\r\n          setSearchTerm(\"\");\r\n        })\r\n        .catch(() => {\r\n          console.log(\"error while deleting file\");\r\n          setConnectionLiveStatus(false);\r\n          setErrorSVG(\r\n            <div className=\"noFilesImage\">\r\n              <NoConnection svgHeight={500} svgWidth={336} />\r\n            </div>\r\n          );\r\n        });\r\n    }\r\n  };\r\n\r\n  const handleItemClick = (e) => {\r\n    let fileName = itemDataa.fileName;\r\n    let fileType = itemDataa.fileType;\r\n    let fileSize = itemDataa.fileSize;\r\n\r\n    switch (e.value) {\r\n      case \"rename\":\r\n        // logic to remove the row\r\n        console.log(fileName + \" \" + \"rename\"); // contain to item.id passed by `show`\r\n        setRenameModalState(true);\r\n        break;\r\n\r\n      case \"delete\":\r\n        console.log(\" delete \" + fileType);\r\n\r\n        setDeleteModalState(true);\r\n        // confirmDel(fileName, fileType, fileSize);\r\n        break;\r\n      case \"download\":\r\n        console.log(fileType + \" download\");\r\n        // downloading a file..\r\n        setTransferItemDetails({\r\n          fileSize: fileSize,\r\n          fileType: fileType,\r\n          fileName: fileName,\r\n          transferType: \"Download\",\r\n        });\r\n\r\n        if (fileType === 2) {\r\n          console.log(\"downloading a folder\");\r\n\r\n          setTransferModalState(true);\r\n          setDownloaderComponentUI(true);\r\n\r\n          axios\r\n            .post(\"/downloadDirectory\", {\r\n              path: currentDirectoryPath,\r\n              name: fileName,\r\n              connectionDetails: connectionDetails,\r\n            })\r\n            .then((res) => {\r\n              setDownloaderComponentUI(false);\r\n              setTransferModalState(false);\r\n              setSnackbarStatus(true);\r\n              setTimeout(() => {\r\n                setSnackbarStatus(false);\r\n              }, 2000);\r\n              // alert(res.data + ' Implement a download progress bar');\r\n            })\r\n            .catch(() => {\r\n              console.log(\"error while going back\");\r\n              setConnectionLiveStatus(false);\r\n              setErrorSVG(\r\n                <div className=\"noFilesImageDashboard\">\r\n                  <NoConnection svgHeight={290} svgWidth={336} />\r\n                </div>\r\n              );\r\n            });\r\n        } else {\r\n          // downloading a file\r\n          setTransferModalState(true);\r\n          setDownloaderComponentUI(true);\r\n\r\n          console.log(\"Before download \" + downloaderComponentUI);\r\n\r\n          axios\r\n            .post(\"/downloadFile\", {\r\n              path: currentDirectoryPath,\r\n              name: fileName,\r\n              connectionDetails: connectionDetails,\r\n            })\r\n            .then((res) => {\r\n              console.log(\"After download: \" + downloaderComponentUI);\r\n              setDownloaderComponentUI(false);\r\n              setTransferModalState(false);\r\n              setSnackbarStatus(true);\r\n              setTimeout(() => {\r\n                setSnackbarStatus(false);\r\n              }, 2000);\r\n              // alert(res.data + ' Implement a download progress bar');\r\n            })\r\n            .catch((e) => {\r\n              setConnectionLiveStatus(false);\r\n              setErrorSVG(\r\n                <div className=\"noFilesImageDashboard\">\r\n                  <NoConnection svgHeight={290} svgWidth={336} />\r\n                </div>\r\n              );\r\n            });\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const renameItem = (newName) => {\r\n    // let oldName = itemData.slice(0, -1);\r\n\r\n    setTransferItemDetails({\r\n      fileSize: itemDataa.fileSize,\r\n      fileType: itemDataa.fileType,\r\n      fileName: itemDataa.fileName,\r\n      transferType: \"Rename\",\r\n    });\r\n\r\n    let oldName = itemDataa.fileName;\r\n\r\n    if (itemDataa.fileType !== 2) {\r\n      let ext = oldName.split(\".\").pop();\r\n      newName = newName + \".\" + ext;\r\n    }\r\n\r\n    axios\r\n      .post(\"/renameFile\", {\r\n        oldName: oldName,\r\n        path: currentDirectoryPath,\r\n        newName: newName,\r\n        connectionDetails: connectionDetails,\r\n      })\r\n      .then((res) => {\r\n        setFileList(res.data);\r\n        setSnackbarStatus(true);\r\n        setTimeout(() => {\r\n          setSnackbarStatus(false);\r\n        }, 2000);\r\n        setSearchTerm(\"\");\r\n      })\r\n      .catch((e) => {\r\n        setSearchTerm(\"\");\r\n        console.log(\"error while renaming file \" + e);\r\n      });\r\n  };\r\n\r\n  const closeRenameModal = () => {\r\n    setRenameModalState(false);\r\n  };\r\n\r\n  const closeTransferModal = () => {\r\n    setTransferModalState(false);\r\n  };\r\n\r\n  const closeDeleteModal = () => {\r\n    setDeleteModalState(false);\r\n  };\r\n\r\n  const closeSnackbar = () => {\r\n    setSnackbarStatus(false);\r\n  };\r\n\r\n  const goBack = () => {\r\n    setLoading(true);\r\n    const p = currentDirectoryPath.slice(\r\n      0,\r\n      currentDirectoryPath.lastIndexOf(\"/\")\r\n    );\r\n    if (p !== \"\") {\r\n      axios\r\n        .post(\"/changePath\", { path: p, connectionDetails: connectionDetails })\r\n        .then((res) => {\r\n          setLoading(false);\r\n          setFileList(res.data);\r\n        })\r\n        .catch((e) => {\r\n          setLoading(false);\r\n          console.log(\"error while going back \" + e);\r\n        });\r\n      setCurrentDirectoryPath(\r\n        currentDirectoryPath.slice(0, currentDirectoryPath.lastIndexOf(\"/\"))\r\n      );\r\n    } else {\r\n      setLoading(false);\r\n      alert(\"nope nope\");\r\n    }\r\n  };\r\n\r\n  const displayMenu = (e, fileName, fileType, fileSize) => {\r\n    e.preventDefault();\r\n    setAnchorPoint({ x: e.clientX, y: e.clientY });\r\n    setOpen(true);\r\n    setItemDataa({\r\n      fileName: fileName,\r\n      fileType: fileType,\r\n      fileSize: fileSize,\r\n    });\r\n  };\r\n\r\n  const updateSearchResult = async (input) => {\r\n    // setSearchTerm(event.target.value)\r\n    let results = [];\r\n    if (fileList.length > 0) {\r\n      fileList.map((jsFrameworksSearch) => {\r\n        if (jsFrameworksSearch.name.toLowerCase().includes(input.trim()))\r\n          results.push(jsFrameworksSearch);\r\n      });\r\n    }\r\n    setSearchTerm(input);\r\n    setSearchResults(results);\r\n  };\r\n\r\n  return (\r\n    <div className=\"dashboard-screen\">\r\n      <h1 className=\"dashboard-copy poppins-bold-black-27-3px\">Dashboard</h1>\r\n      <div className=\"dashboard-storage-details\">\r\n        <div\r\n          className=\"dashboard-overlap-group\"\r\n          onClick={() => changeRoute(\"/explorer\")}\r\n        >\r\n          <div className=\"dashboard-overlap-group-header\">\r\n            <img\r\n              className=\"macos-folder-icon\"\r\n              src=\"/images/macos-folder-icon.png\"\r\n            />\r\n            <div className=\"internal-storage poppins-medium-black-14px\">\r\n              Internal Storage\r\n            </div>\r\n          </div>\r\n          <div className=\"storage-progress\">\r\n            <progress max=\"100\" value={storagePercent}></progress>\r\n            <div className=\"storage-progress-count poppins-regular-black-12px\">\r\n              {console.log(connectionDetails)}\r\n              <p>{connectionDetails.usedSpace + \" GB\"}</p>\r\n              <p>{connectionDetails.totalSize + \" GB\"}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"recently-used\">\r\n        <div className=\"dashboard-recently-used-title\">\r\n          <div className=\"downloadsPath\">\r\n            {currentDirectoryPath === \"/Download\" && (\r\n              <div className=\"recently-used-1 poppins-medium-black-18px\">\r\n                Downloads\r\n              </div>\r\n            )}\r\n\r\n            {currentDirectoryPath !== \"/Download\" && (\r\n              <div className=\"dashboard-file-icon\">\r\n                <div className=\"overlap-group-1\">\r\n                  <div className=\"rectangle-9\"></div>\r\n                  <div className=\"rectangle-10\"></div>\r\n                  <div className=\"rectangle-5-copy\"></div>\r\n                </div>\r\n                <div className=\"recently-used-1 poppins-medium-black-14px\">\r\n                  <span style={{ marginLeft: \"13px\" }}>\r\n                    {currentDirectoryPath.slice(1).replaceAll(\"/\", \">\")}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            {/* <div className=\"recently-used-1 poppins-medium-black-18px\">\r\n              {currentDirectoryPath === \"/Download\"\r\n                ? \"Downloads \"\r\n                : currentDirectoryPath.slice(1).replaceAll(\"/\", \" > \")}\r\n            </div> */}\r\n\r\n            {currentDirectoryPath !== \"/Download\" ? (\r\n              <span className=\"goBack\">\r\n                <img\r\n                  alt=\"goBack\"\r\n                  onClick={() => goBack()}\r\n                  className=\"goBackImg\"\r\n                  src=\"/images/icons/goBack.svg\"\r\n                ></img>\r\n              </span>\r\n            ) : null}\r\n            {/* <span className=\"goBack\">\r\n                            <img alt=\"goBack\" onClick={() => goBack()}\r\n                                className=\"goBackImg\" src=\"/images/icons/goBack.svg\"></img>\r\n                        </span> */}\r\n            <SearchBar input={searchTerm} onChange={updateSearchResult} />\r\n          </div>\r\n          <div\r\n            className=\"view-all poppins-regular-normal-black-14px\"\r\n            onClick={() => changeRoute(\"/explorer\")}\r\n          >\r\n            View all\r\n          </div>\r\n        </div>\r\n        <div className=\"recently-used-data\">\r\n          <div className=\"recently-used-name valign-text-middle poppins-light-black-14px\">\r\n            Name\r\n          </div>\r\n          <div className=\"recently-used-last-m valign-text-middle poppins-light-black-14px\">\r\n            Last Modified\r\n          </div>\r\n          <div className=\"size valign-text-middle poppins-light-black-14px\">\r\n            Size\r\n          </div>\r\n        </div>\r\n\r\n        {/* popup for rename */}\r\n        <Modal\r\n          show={renameModalState}\r\n          modalClosed={closeRenameModal}\r\n          color=\"#fff\"\r\n        >\r\n          <ModifyContent\r\n            desc=\"Are you sure to rename this content ? This will rename the content\r\n          permanently.\"\r\n            placeholder=\"Enter new name\"\r\n            title={\"Rename \" + itemDataa.fileName}\r\n            create={(newName) => renameItem(newName)}\r\n            closeHandler={closeRenameModal}\r\n            action=\"Rename\"\r\n            path={currentDirectoryPath + \"/\" + itemDataa.fileName}\r\n          />\r\n        </Modal>\r\n\r\n        {/* popup for delete */}\r\n        <Modal\r\n          show={deleteModalState}\r\n          modalClosed={closeDeleteModal}\r\n          color=\"#fff\"\r\n        >\r\n          <ConfirmDelete\r\n            title={itemDataa.fileName}\r\n            delete={confirmDel}\r\n            closeHandler={closeDeleteModal}\r\n            path={currentDirectoryPath + \"/\" + itemDataa.fileName}\r\n          />\r\n        </Modal>\r\n\r\n        {/* popup for transfer progress */}\r\n        <Modal\r\n          show={transferModalState}\r\n          // modalClosed={closeTransferModal}\r\n          color=\"#fff\"\r\n        >\r\n          <DownloadPopup\r\n            placeholder={transferItemDetails.transferType}\r\n            name={transferItemDetails.fileName}\r\n            // create={(newName) => renameItem(newName)}\r\n            type={transferItemDetails.fileType}\r\n            closeHandler={closeTransferModal}\r\n            size={transferItemDetails.fileSize}\r\n            path={\r\n              currentDirectoryPath +\r\n              \"/\" +\r\n              transferItemDetails.fileName.split(\".\").slice(0, -1).join(\".\")\r\n            }\r\n          />\r\n        </Modal>\r\n\r\n        {/* Snackbar */}\r\n        <div className=\"explorer-snackbar\">\r\n          <Snackbar\r\n            transferType={transferItemDetails.transferType}\r\n            handleSnackbarClose={closeSnackbar}\r\n            show={snackbarStatus}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"App\">{loading && <FileSkeleton />}</div>\r\n\r\n        <DragAndDrop handleDrop={handleDrop}>\r\n          <div className=\"recently-used-explorer-data\" ref={ref}>\r\n            {searchResults.length > 0 && connectionLiveStatus\r\n              ? searchResults.map((item, index) => {\r\n                  return (\r\n                    <FileComponent\r\n                      key={index}\r\n                      id={item.name + item.type}\r\n                      onContextMenu={(e) =>\r\n                        displayMenu(e, item.name, item.type, item.size)\r\n                      }\r\n                      onClick={() =>\r\n                        changePath(item.name, item.type, item.size)\r\n                      }\r\n                      name={item.name}\r\n                      type={item.type}\r\n                      size={item.size}\r\n                      lastMod={item.modifiedAt}\r\n                    />\r\n                  );\r\n                })\r\n              : errorSVG}\r\n\r\n            {/* <Menu id={MENU_ID}>\r\n                        <Item id=\"rename\" onClick={handleItemClick}>\r\n                            Rename\r\n                        </Item>\r\n                        <Item id=\"delete\" onClick={handleItemClick}>\r\n                            Delete\r\n                        </Item>\r\n                        <Item id=\"download\" onClick={handleItemClick}>\r\n                            Download\r\n                        </Item>\r\n                    </Menu> */}\r\n\r\n            <ControlledMenu\r\n              anchorPoint={anchorPoint}\r\n              isOpen={isOpen}\r\n              onClose={() => setOpen(false)}\r\n            >\r\n              <MenuItem value=\"rename\" onClick={handleItemClick}>\r\n                Rename\r\n              </MenuItem>\r\n              <MenuItem value=\"delete\" onClick={handleItemClick}>\r\n                Delete\r\n              </MenuItem>\r\n              <MenuItem value=\"download\" onClick={handleItemClick}>\r\n                Download\r\n              </MenuItem>\r\n            </ControlledMenu>\r\n          </div>\r\n        </DragAndDrop>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FilesMenu2;\r\n","D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\pages\\FileExplorer\\ExplorerMenu\\ExplorerMenu.js",["329","330","331","332","333","334","335","336","337","338"],"import { React, useEffect, useState, useRef } from \"react\";\r\nimport FileComponent from \"../../../components/FileExplorer/FileComponent/FileComponent\";\r\nimport Modal from \"../../../components/Modal/Modal\";\r\nimport axios from \"axios\";\r\nimport \"./ExplorerMenu.css\";\r\nimport DragAndDrop from \"../../../components/DragAndDrop/DragAndDrop\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport DownloadPopup from \"../../../components/FileExplorer/ExplorerMenu/DownloadPopup/DownloadPopup\";\r\nimport FileSkeleton from \"../../../components/skeleton/FileSkeleton2\";\r\n\r\n// import { Menu, Item, useContextMenu } from \"react-contexify\";\r\nimport { MenuItem, ControlledMenu } from \"@szhsin/react-menu\";\r\nimport \"@szhsin/react-menu/dist/index.css\";\r\nimport Snackbar from \"../../../components/Snackbar/Snackbar\";\r\nimport NoFiles from \"../../../Errors/NoFiles/NoFiles\";\r\nimport SearchBar from \"../../../components/FileExplorer/ExplorerMenu/SearchBar/SearchBar\";\r\nimport NoConnection from \"../../../Errors/NoConnection/NoConnection\";\r\nimport ConfirmDelete from \"../../../components/FileExplorer/ExplorerMenu/ConfirmDelete/ConfirmDelete\";\r\nimport ModifyContent from \"../../../components/FileExplorer/ExplorerMenu/ModifyContent/ModifyContent\";\r\n\r\n// const MENU_ID = \"menu-id\";\r\n\r\nconst ExplorerMenu = () => {\r\n  // fetching the ftp details\r\n  const connectionDetails = useSelector((state) =>\r\n    state != null ? state.connectionDetails : null\r\n  );\r\n  const [connectionLiveStatus, setConnectionLiveStatus] = useState(true);\r\n\r\n  const [fileList, setFileList] = useState([]);\r\n  const [currentDirectoryPath, setCurrentDirectoryPath] = useState(\"/\");\r\n  const [modalState, setModalState] = useState(false);\r\n  const [renameModalState, setRenameModalState] = useState(false);\r\n  const [transferModalState, setTransferModalState] = useState(false);\r\n  const [deleteModalState, setDeleteModalState] = useState(false);\r\n\r\n  const [transferItemDetails, setTransferItemDetails] = useState({\r\n    fileName: \"filename\",\r\n    fileType: 1,\r\n    fileSize: \"200 Mb\",\r\n    transferType: \"Download\",\r\n  });\r\n\r\n  const [errorSVG, setErrorSVG] = useState(null);\r\n\r\n  // used for menu's.\r\n  // const [menuProp, setMenuProp] = useState(null);\r\n  const [isOpen, setOpen] = useState(false);\r\n  const [anchorPoint, setAnchorPoint] = useState({ x: 0, y: 0 });\r\n  const [itemDataa, setItemDataa] = useState({\r\n    fileName: \"fileName\",\r\n    fileType: 1,\r\n    fileSize: \"230 Mb\",\r\n  });\r\n\r\n  // File transfer\r\n  const [transferPercent, setTransferPercent] = useState(0);\r\n  const [files, setFiles] = useState(() => []);\r\n  // const [downloadFile, downloaderComponentUI] = useFileDownloader();\r\n  const [downloaderComponentUI, setDownloaderComponentUI] = useState(true);\r\n  const [snackbarStatus, setSnackbarStatus] = useState(false);\r\n\r\n  // Search\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [searchResults, setSearchResults] = useState([]);\r\n\r\n  // ref for scroll\r\n  const ref = useRef();\r\n\r\n  //LazyLoading\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (currentDirectoryPath === \"/\") {\r\n      console.log(connectionDetails);\r\n      axios\r\n        .post(\"/rootDirectory\", { connectionDetails: connectionDetails })\r\n        .then((res) => {\r\n          setFileList(res.data);\r\n          // refreshScrollBar();\r\n          setLoading(false);\r\n        })\r\n        .catch((e) => {\r\n          console.log(\"error while fetching files list \" + e);\r\n          setLoading(false);\r\n          setConnectionLiveStatus(false);\r\n          setErrorSVG(\r\n            <div className=\"noFilesImage\">\r\n              <NoConnection svgHeight={500} svgWidth={336} />\r\n            </div>\r\n          );\r\n        });\r\n    } else {\r\n      axios\r\n        .post(\"/changePath\", {\r\n          path: currentDirectoryPath,\r\n          connectionDetails: connectionDetails,\r\n        })\r\n        .then((res) => {\r\n          setLoading(false);\r\n          setFileList(res.data);\r\n          setSearchTerm(\"\");\r\n          refreshScrollBar();\r\n        })\r\n        .catch((e) => {\r\n          setLoading(false);\r\n          console.log(\"error while fetching files list \" + e);\r\n          setConnectionLiveStatus(false);\r\n          setErrorSVG(\r\n            <div className=\"noFilesImage\">\r\n              <NoConnection svgHeight={500} svgWidth={336} />\r\n            </div>\r\n          );\r\n        });\r\n    }\r\n  }, [currentDirectoryPath]);\r\n\r\n  useEffect(() => {\r\n    let results = [];\r\n    if (fileList.length > 0) {\r\n      fileList.map((jsFrameworksSearch) => {\r\n        if (jsFrameworksSearch.name.toLowerCase().includes(searchTerm.trim()))\r\n          results.push(jsFrameworksSearch);\r\n      });\r\n    } else if (connectionDetails.host != null) {\r\n      setErrorSVG(\r\n        <div className=\"noFilesImage\">\r\n          <NoFiles />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    // fileList.map((jsFrameworksSearch) => {\r\n    //     if (jsFrameworksSearch.name.toLowerCase().includes(searchTerm.trim()))\r\n    //         results.push(jsFrameworksSearch)\r\n    // });\r\n    setSearchResults(results);\r\n  }, [searchTerm, fileList]);\r\n\r\n  const refreshScrollBar = () => {\r\n    ref.current.scrollTo(0, 0);\r\n  };\r\n\r\n  //CreateFolder\r\n  const createFolder = (folderName) => {\r\n    setTransferItemDetails({\r\n      fileSize: transferItemDetails.fileSize,\r\n      fileType: transferItemDetails.fileType,\r\n      fileName: transferItemDetails.fileName,\r\n      transferType: \"Create Folder\",\r\n    });\r\n\r\n    axios\r\n      .post(\"/createFolder\", {\r\n        name: folderName,\r\n        path: currentDirectoryPath,\r\n        connectionDetails: connectionDetails,\r\n      })\r\n      .then((res) => {\r\n        setFileList(res.data);\r\n        setSnackbarStatus(true);\r\n        setTimeout(() => {\r\n          setSnackbarStatus(false);\r\n        }, 2000);\r\n      })\r\n      .catch((e) => {\r\n        console.log(\"error while fetching files list \" + e);\r\n        setConnectionLiveStatus(false);\r\n        setErrorSVG(\r\n          <div className=\"noFilesImage\">\r\n            <NoConnection svgHeight={500} svgWidth={336} />\r\n          </div>\r\n        );\r\n      });\r\n  };\r\n\r\n  const renameItem = (newName) => {\r\n    // let oldName = itemData.slice(0, -1);\r\n\r\n    setTransferItemDetails({\r\n      fileSize: itemDataa.fileSize,\r\n      fileType: itemDataa.fileType,\r\n      fileName: itemDataa.fileName,\r\n      transferType: \"Rename\",\r\n    });\r\n\r\n    let oldName = itemDataa.fileName;\r\n\r\n    if (itemDataa.fileType !== 2) {\r\n      let ext = oldName.split(\".\").pop();\r\n      newName = newName + \".\" + ext;\r\n    }\r\n    axios\r\n      .post(\"/renameFile\", {\r\n        oldName: oldName,\r\n        path: currentDirectoryPath,\r\n        newName: newName,\r\n        connectionDetails: connectionDetails,\r\n      })\r\n      .then((res) => {\r\n        setFileList(res.data);\r\n        setSearchTerm(\"\");\r\n        setSnackbarStatus(true);\r\n        setTimeout(() => {\r\n          setSnackbarStatus(false);\r\n        }, 2000);\r\n      })\r\n      .catch((e) => {\r\n        console.log(\"error while renaming file \" + e);\r\n        setConnectionLiveStatus(false);\r\n        setErrorSVG(\r\n          <div className=\"noFilesImage\">\r\n            <NoConnection svgHeight={500} svgWidth={336} />\r\n          </div>\r\n        );\r\n      });\r\n  };\r\n\r\n  const changePath = (name, type, size) => {\r\n    setTransferItemDetails({\r\n      fileSize: size,\r\n      fileType: type,\r\n      fileName: name,\r\n      transferType: \"Download\",\r\n    });\r\n    if (type === 2) {\r\n      setLoading(true);\r\n      setCurrentDirectoryPath(currentDirectoryPath + \"/\" + name); // works for ftp-server app\r\n      // setCurrentDirectoryPath(currentDirectoryPath + name)\r\n    } else {\r\n      // file name without extension = filename.split('.').slice(0, -1).join('.')\r\n\r\n      // const file = {\r\n      //     name: name,\r\n      //     // name: \"photo-1\",\r\n      //     thumb:\r\n      //         \"https://images.unsplash.com/photo-1604263439201-171fb8c0fddc?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=427&q=80 427w\",\r\n      //     file:\r\n      //         \"https://images.unsplash.com/photo-1604263439201-171fb8c0fddc?rnd=\" +\r\n      //         Math.random(),\r\n\r\n      //     filename: name,\r\n      //     // filename: \"photo-1.jpg\",\r\n      //     currentDirectoryPath: currentDirectoryPath,\r\n      //     connectionDetails: connectionDetails\r\n      // };\r\n\r\n      // downloadFile(file)\r\n\r\n      // Download file function..\r\n      setTransferModalState(true);\r\n      setDownloaderComponentUI(true);\r\n\r\n      console.log(\"Before download \" + downloaderComponentUI);\r\n\r\n      axios\r\n        .post(\"/downloadFile\", {\r\n          path: currentDirectoryPath,\r\n          name: name,\r\n          connectionDetails: connectionDetails,\r\n        })\r\n        .then((res) => {\r\n          console.log(\"After download: \" + downloaderComponentUI);\r\n          setDownloaderComponentUI(false);\r\n          setTransferModalState(false);\r\n          setSnackbarStatus(true);\r\n          setTimeout(() => {\r\n            setSnackbarStatus(false);\r\n          }, 2000);\r\n          // alert(res.data + ' Implement a download progress bar');\r\n        })\r\n        .catch((e) => {\r\n          setConnectionLiveStatus(false);\r\n          console.log(\"error while going back \" + e);\r\n          setErrorSVG(\r\n            <div className=\"noFilesImage\">\r\n              <NoConnection svgHeight={500} svgWidth={336} />\r\n            </div>\r\n          );\r\n        });\r\n      // }\r\n    }\r\n  };\r\n\r\n  const goBack = () => {\r\n    setLoading(true);\r\n    const p = currentDirectoryPath.slice(\r\n      0,\r\n      currentDirectoryPath.lastIndexOf(\"/\")\r\n    );\r\n    if (p !== \"\") {\r\n      axios\r\n        .post(\"/changePath\", { path: p, connectionDetails: connectionDetails })\r\n        .then((res) => {\r\n          setLoading(false);\r\n          setFileList(res.data);\r\n        })\r\n        .catch((e) => {\r\n          setLoading(false);\r\n          console.log(\"error while going back \" + e);\r\n          setConnectionLiveStatus(false);\r\n          setErrorSVG(\r\n            <div className=\"noFilesImage\">\r\n              <NoConnection svgHeight={500} svgWidth={336} />\r\n            </div>\r\n          );\r\n        });\r\n      setCurrentDirectoryPath(\r\n        currentDirectoryPath.slice(0, currentDirectoryPath.lastIndexOf(\"/\"))\r\n      );\r\n    } else {\r\n      alert(\"cannot go further 🙂\");\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getCodedBuffer = (file) => {\r\n    return new Promise(function (resolve, reject) {\r\n      let fileReader = new FileReader();\r\n      fileReader.readAsArrayBuffer(file);\r\n\r\n      fileReader.onload = function (ev) {\r\n        const array = new Uint8Array(ev.target.result);\r\n        // const fileByteArray = [];\r\n        let codedBuffer = \"\";\r\n\r\n        for (let i = 0; i < array.length; i++) {\r\n          // fileByteArray.push(array[i]);\r\n          codedBuffer += String.fromCharCode(array[i]);\r\n        }\r\n        resolve(codedBuffer); // successful\r\n      };\r\n      fileReader.onerror = reject; // call reject if error\r\n    });\r\n  };\r\n\r\n  const handleDrop = (files) => {\r\n    // Implement upload function\r\n    setTransferModalState(true);\r\n\r\n    for (let i = 0; i < files.length; i++) {\r\n      let fileType = \"Folder\";\r\n      let fileSize = files[i].size;\r\n\r\n      if (files[i].isFile) {\r\n        fileType = 1;\r\n        fileSize = files[i].size;\r\n        console.log(\"file size: \" + files[i].size);\r\n      }\r\n\r\n      setTransferItemDetails({\r\n        fileName: files[i].name,\r\n        fileType: fileType,\r\n        fileSize: fileSize,\r\n        transferType: \"Upload\",\r\n      });\r\n\r\n      getCodedBuffer(files[i]).then((result) => {\r\n        axios\r\n          .post(\"/handleDrop\", {\r\n            value: result,\r\n            fileName: files[i].name,\r\n            path: currentDirectoryPath,\r\n            connectionDetails: connectionDetails,\r\n          })\r\n          .then((res) => {\r\n            setTransferModalState(false);\r\n            setFileList(res.data);\r\n            setSnackbarStatus(true);\r\n            setTimeout(() => {\r\n              setSnackbarStatus(false);\r\n            }, 2000);\r\n          })\r\n          .catch((err) => {\r\n            alert(\"error occured while uploading \" + err);\r\n            setConnectionLiveStatus(false);\r\n            setErrorSVG(\r\n              <div className=\"noFilesImage\">\r\n                <NoConnection svgHeight={500} svgWidth={336} />\r\n              </div>\r\n            );\r\n          });\r\n      });\r\n    }\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setModalState(false);\r\n  };\r\n\r\n  const closeSnackbar = () => {\r\n    setSnackbarStatus(false);\r\n  };\r\n\r\n  const closeRenameModal = () => {\r\n    setRenameModalState(false);\r\n  };\r\n\r\n  const closeTransferModal = () => {\r\n    setTransferModalState(false);\r\n  };\r\n\r\n  const closeDeleteModal = () => {\r\n    setDeleteModalState(false);\r\n  };\r\n\r\n  // const { show } = useContextMenu({\r\n  //     id: MENU_ID,\r\n  // });\r\n\r\n  // const handleItemClick = ({ event, props, triggerEvent, data }) => {\r\n  //     console.log(event, props, triggerEvent, data);\r\n\r\n  //     let fileName = props.id.slice(0, -1);\r\n  //     let fileType = props.id.charAt(fileName.length);\r\n\r\n  //     switch (event.currentTarget.id) {\r\n  //         case \"rename\":\r\n  //             // logic to remove the row\r\n  //             console.log(props.id + \" \" + fileName + \" \" + \"rename\"); // contain to item.id passed by `show`\r\n  //             break;\r\n\r\n  //         case \"delete\":\r\n  //             console.log(props.id + \" delete \" + fileType);\r\n\r\n  //             let deletePath = currentDirectoryPath + '/' + fileName\r\n  //             console.log(deletePath);\r\n\r\n  //             if (fileType === \"2\") {\r\n  //                 // Delete a directory\r\n  //                 console.log('deleting a folder');\r\n  //                 axios.post('/deleteDir', { path: currentDirectoryPath, fileName: fileName })\r\n  //                     .then(res => {\r\n  //                         setFileList(res.data);\r\n  //                     })\r\n  //                     .catch(() => {\r\n  //                         console.log('error while deleting file');\r\n  //                     });\r\n  //             }\r\n  //             else {\r\n  //                 // Delete a file\r\n  //                 console.log('deleting a file');\r\n  //                 axios.post('/deleteFile', { path: currentDirectoryPath, fileName: fileName })\r\n  //                     .then(res => {\r\n  //                         setFileList(res.data);\r\n  //                     })\r\n  //                     .catch(() => {\r\n  //                         console.log('error while deleting file');\r\n  //                     });\r\n  //             }\r\n  //             break;\r\n\r\n  //         case \"download\":\r\n  //             console.log(fileType + \" download\");\r\n  //             // downloading a file..\r\n\r\n  //             if (fileType === \"2\") {\r\n  //                 console.log('downloading a folder');\r\n\r\n  //                 axios.post('/downloadDirectory', { path: currentDirectoryPath, name: fileName })\r\n  //                     .then(res => {\r\n  //                         alert(res.data + ' Implement a download progress bar');\r\n  //                     })\r\n  //                     .catch(() => {\r\n  //                         console.log('error while going back');\r\n  //                     });\r\n  //             }\r\n  //             else {\r\n  //                 // downloading a file\r\n  //                 console.log('downloading a File');\r\n  //                 axios.post('/downloadFile', { path: currentDirectoryPath, name: fileName })\r\n  //                     .then(res => {\r\n  //                         alert(res.data + ' Implement a download progress bar');\r\n  //                     })\r\n  //                     .catch(() => {\r\n  //                         console.log('error while going back');\r\n  //                     });\r\n  //             }\r\n  //             break;\r\n  //         default:\r\n  //             break;\r\n  //     }\r\n  // }\r\n\r\n  const confirmDel = () => {\r\n    let fileName = itemDataa.fileName;\r\n    let fileType = itemDataa.fileType;\r\n    let fileSize = itemDataa.fileSize;\r\n\r\n    let deletePath = currentDirectoryPath + \"/\" + fileName;\r\n    console.log(deletePath);\r\n\r\n    setTransferItemDetails({\r\n      fileSize: fileSize,\r\n      fileType: fileType,\r\n      fileName: fileName,\r\n      transferType: \"Delete\",\r\n    });\r\n\r\n    if (fileType === 2) {\r\n      setTransferModalState(true);\r\n\r\n      // Delete a directory\r\n      console.log(\"deleting a folder\");\r\n\r\n      axios\r\n        .post(\"/deleteDir\", {\r\n          path: currentDirectoryPath,\r\n          fileName: fileName,\r\n          connectionDetails: connectionDetails,\r\n        })\r\n        .then((res) => {\r\n          setTransferModalState(false);\r\n\r\n          setFileList(res.data);\r\n          setSnackbarStatus(true);\r\n          setTimeout(() => {\r\n            setSnackbarStatus(false);\r\n          }, 2000);\r\n          setSearchTerm(\"\");\r\n        })\r\n        .catch(() => {\r\n          setConnectionLiveStatus(false);\r\n          setErrorSVG(\r\n            <div className=\"noFilesImage\">\r\n              <NoConnection svgHeight={500} svgWidth={336} />\r\n            </div>\r\n          );\r\n          console.log(\"error while deleting file\");\r\n        });\r\n    } else {\r\n      setTransferModalState(true);\r\n\r\n      // Delete a file\r\n      console.log(\"deleting a file\");\r\n      axios\r\n        .post(\"/deleteFile\", {\r\n          path: currentDirectoryPath,\r\n          fileName: fileName,\r\n          connectionDetails: connectionDetails,\r\n        })\r\n        .then((res) => {\r\n          setTransferModalState(false);\r\n          setFileList(res.data);\r\n          setSnackbarStatus(true);\r\n          setTimeout(() => {\r\n            setSnackbarStatus(false);\r\n          }, 2000);\r\n          setSearchTerm(\"\");\r\n        })\r\n        .catch(() => {\r\n          console.log(\"error while deleting file\");\r\n          setConnectionLiveStatus(false);\r\n          setErrorSVG(\r\n            <div className=\"noFilesImage\">\r\n              <NoConnection svgHeight={500} svgWidth={336} />\r\n            </div>\r\n          );\r\n        });\r\n    }\r\n  };\r\n\r\n  const handleItemClick = (e) => {\r\n    let fileName = itemDataa.fileName;\r\n    let fileType = itemDataa.fileType;\r\n    let fileSize = itemDataa.fileSize;\r\n\r\n    switch (e.value) {\r\n      case \"rename\":\r\n        // logic to remove the row\r\n        console.log(fileName + \" \" + \"rename\"); // contain to item.id passed by `show`\r\n        setRenameModalState(true);\r\n        break;\r\n\r\n      case \"delete\":\r\n        console.log(\" delete \" + fileType);\r\n\r\n        setDeleteModalState(true);\r\n        // confirmDel(fileName, fileType, fileSize);\r\n        break;\r\n\r\n      case \"Download\":\r\n        console.log(fileType + \" download\");\r\n        // downloading a file..\r\n        setTransferItemDetails({\r\n          fileSize: fileSize,\r\n          fileType: fileType,\r\n          fileName: fileName,\r\n          transferType: \"Download\",\r\n        });\r\n\r\n        if (fileType === 2) {\r\n          console.log(\"downloading a folder\");\r\n\r\n          setTransferModalState(true);\r\n          setDownloaderComponentUI(true);\r\n\r\n          axios\r\n            .post(\"/downloadDirectory\", {\r\n              path: currentDirectoryPath,\r\n              name: fileName,\r\n              connectionDetails: connectionDetails,\r\n            })\r\n            .then((res) => {\r\n              setDownloaderComponentUI(false);\r\n              setTransferModalState(false);\r\n              setSnackbarStatus(true);\r\n              setTimeout(() => {\r\n                setSnackbarStatus(false);\r\n              }, 2000);\r\n              // alert(res.data + ' Implement a download progress bar');\r\n            })\r\n            .catch(() => {\r\n              console.log(\"error while downloading\");\r\n              setConnectionLiveStatus(false);\r\n              setErrorSVG(\r\n                <div className=\"noFilesImage\">\r\n                  <NoConnection svgHeight={500} svgWidth={336} />\r\n                </div>\r\n              );\r\n            });\r\n        } else {\r\n          // downloading a file\r\n          setTransferModalState(true);\r\n          setDownloaderComponentUI(true);\r\n\r\n          console.log(\"Before download \" + downloaderComponentUI);\r\n\r\n          axios\r\n            .post(\"/downloadFile\", {\r\n              path: currentDirectoryPath,\r\n              name: fileName,\r\n              connectionDetails: connectionDetails,\r\n            })\r\n            .then((res) => {\r\n              console.log(\"After download: \" + downloaderComponentUI);\r\n              setDownloaderComponentUI(false);\r\n              setTransferModalState(false);\r\n              setSnackbarStatus(true);\r\n              setTimeout(() => {\r\n                setSnackbarStatus(false);\r\n              }, 2000);\r\n              // alert(res.data + ' Implement a download progress bar');\r\n            })\r\n            .catch((e) => {\r\n              console.log(\"error while going back \" + e);\r\n              setConnectionLiveStatus(false);\r\n              setErrorSVG(\r\n                <div className=\"noFilesImage\">\r\n                  <NoConnection svgHeight={500} svgWidth={336} />\r\n                </div>\r\n              );\r\n            });\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const updateSearchResult = async (input) => {\r\n    // setSearchTerm(event.target.value)\r\n    let results = [];\r\n    if (fileList.length > 0) {\r\n      fileList.map((jsFrameworksSearch) => {\r\n        if (jsFrameworksSearch.name.toLowerCase().includes(input.trim()))\r\n          results.push(jsFrameworksSearch);\r\n      });\r\n    }\r\n    setSearchTerm(input);\r\n    setSearchResults(results);\r\n  };\r\n\r\n  // const displayMenu = (e) => {\r\n  //     // put whatever custom logic you need\r\n  //     // you can even decide to not display the Menu\r\n  //     console.log('reaching displayMenu (e)');\r\n  //     show(e, { props: { id: e.currentTarget.id } });\r\n  // }\r\n\r\n  const displayMenu = (e, fileName, fileType, fileSize) => {\r\n    e.preventDefault();\r\n    setAnchorPoint({ x: e.clientX, y: e.clientY });\r\n    setOpen(true);\r\n    setItemDataa({\r\n      fileName: fileName,\r\n      fileType: fileType,\r\n      fileSize: fileSize,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"explorer-main-menu\">\r\n      <div className=\"explorer-title\">\r\n        <h1 className=\"dashboard-copy poppins-bold-black-27-3px\">\r\n          File Explorer\r\n        </h1>\r\n        <div className=\"overlap-group2\">\r\n          {/* <img\r\n                        alt=\"magnifier\"\r\n                        className=\"oval-9\"\r\n                        src=\"/images/icons/Magnifier.svg\"\r\n                    />*/}\r\n          <SearchBar input={searchTerm} onChange={updateSearchResult} />\r\n          {/* <img\r\n                        className=\"path-6\"\r\n                        src=\"/images/icons/Magnifier.svg\"\r\n                    /> */}\r\n        </div>\r\n      </div>\r\n      <div className=\"directory-path\">\r\n        <div className=\"directory-path-section-1\">\r\n          <div className=\"overlap-group-1\">\r\n            <div className=\"rectangle-9\"></div>\r\n            <div className=\"rectangle-10\"></div>\r\n            <div className=\"rectangle-5-copy\"></div>\r\n          </div>\r\n          <p className=\"explorer-path valign-text-middle poppins-medium-black-14px\">\r\n            {currentDirectoryPath === \"/\"\r\n              ? \"Internal Storage >\"\r\n              : currentDirectoryPath.slice(2).replaceAll(\"/\", \" > \")}\r\n          </p>\r\n          {currentDirectoryPath !== \"/\" ? (\r\n            <span className=\"goBack\">\r\n              <img\r\n                alt=\"goBack\"\r\n                onClick={() => goBack()}\r\n                className=\"goBackImg\"\r\n                src=\"/images/icons/goBack.svg\"\r\n              ></img>\r\n            </span>\r\n          ) : null}\r\n        </div>\r\n\r\n        <div className=\"frame-1\">\r\n          <div className=\"overlap-group\" onClick={() => setModalState(true)}>\r\n            <div className=\"rectangle-1 bizarre-border-1px\"></div>\r\n            <div className=\"rectangle-1 bizarre-border-1px\"></div>\r\n            <div className=\"create-folder valign-text-middle poppins-light-black-14px\">\r\n              Create Folder\r\n            </div>\r\n            <img\r\n              alt=\"addFolder\"\r\n              className=\"icons8-add-older-50-1\"\r\n              src=\"/images/icons/addFolder.svg\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/*\r\n                <span className=\"upload\">\r\n                    <input type=\"file\" name=\"u\" />\r\n                </span> */}\r\n      {/* Modal */}\r\n      <Modal show={modalState} modalClosed={closeModal} color=\"#fff\">\r\n        <ModifyContent\r\n          desc=\"Are you sure to create folder ?\"\r\n          placeholder=\"Enter folder name\"\r\n          title=\"Create Folder\"\r\n          action=\"Create\"\r\n          create={(folderName) => createFolder(folderName)}\r\n          closeHandler={closeModal}\r\n          path={currentDirectoryPath}\r\n        />\r\n      </Modal>\r\n\r\n      <div className=\"explorer-snackbar\">\r\n        <Snackbar\r\n          // text={transferItemDetails.transferType === \"Download\" ? \"Downloaded Successfully!  Check Desktop/NoWires\" : \"Uploaded Successfully! \"}\r\n          transferType={transferItemDetails.transferType}\r\n          handleSnackbarClose={closeSnackbar}\r\n          show={snackbarStatus}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"explorer-header\">\r\n        <div className=\"place valign-text-middle poppins-light-black-14px\">\r\n          Name\r\n        </div>\r\n        <div className=\"explorer-last-modified valign-text-middle poppins-light-black-14px\">\r\n          Last Modified\r\n        </div>\r\n        <div className=\"size valign-text-middle poppins-light-black-14px\">\r\n          Size\r\n        </div>\r\n      </div>\r\n\r\n      {/* popup for rename */}\r\n      <Modal\r\n        show={renameModalState}\r\n        modalClosed={closeRenameModal}\r\n        color=\"#fff\"\r\n      >\r\n        <ModifyContent\r\n          desc=\"Are you sure to rename this content ? This will rename the content\r\n          permanently.\"\r\n          placeholder=\"Enter new name\"\r\n          title={\"Rename \" + itemDataa.fileName}\r\n          create={(newName) => renameItem(newName)}\r\n          closeHandler={closeRenameModal}\r\n          action=\"Rename\"\r\n          path={currentDirectoryPath + \"/\" + itemDataa.fileName}\r\n        />\r\n      </Modal>\r\n\r\n      {/* popup for delete */}\r\n      <Modal\r\n        show={deleteModalState}\r\n        modalClosed={closeDeleteModal}\r\n        color=\"#fff\"\r\n      >\r\n        <ConfirmDelete\r\n          title={itemDataa.fileName}\r\n          delete={confirmDel}\r\n          closeHandler={closeDeleteModal}\r\n          path={currentDirectoryPath + \"/\" + itemDataa.fileName}\r\n        />\r\n      </Modal>\r\n\r\n      {/* popup for transfer progress */}\r\n      <Modal\r\n        show={transferModalState}\r\n        // modalClosed={closeTransferModal}\r\n        color=\"#fff\"\r\n      >\r\n        <DownloadPopup\r\n          placeholder={transferItemDetails.transferType}\r\n          name={transferItemDetails.fileName}\r\n          // create={(newName) => renameItem(newName)}\r\n          type={transferItemDetails.fileType}\r\n          closeHandler={closeTransferModal}\r\n          size={transferItemDetails.fileSize}\r\n          path={\r\n            currentDirectoryPath +\r\n            \"/\" +\r\n            transferItemDetails.fileName.split(\".\").slice(0, -1).join(\".\")\r\n          }\r\n        />\r\n      </Modal>\r\n\r\n      {/* popup for upload progress */}\r\n      {/* <Modal\r\n                show={transferModalState}\r\n                // modalClosed={closeTransferModal}\r\n                color=\"#fff\">\r\n                <DownloadPopup\r\n                    placeholder=\"Upload\"\r\n                    // name={transferItemDetails.fileName.split('.').slice(0, -1).join('.')}\r\n                    name={transferItemDetails.fileName}\r\n                    // create={(newName) => renameItem(newName)}\r\n                    type={transferItemDetails.fileType}\r\n                    closeHandler={closeTransferModal}\r\n                    size={transferItemDetails.fileSize}\r\n                    path={currentDirectoryPath + '/' + transferItemDetails.fileName.split('.').slice(0, -1).join('.')} />\r\n            </Modal> */}\r\n\r\n      <div className=\"App\">{loading && <FileSkeleton />}</div>\r\n      <DragAndDrop handleDrop={handleDrop}>\r\n        <div ref={ref} className=\"explorer-data\" id=\"explorer-data-files\">\r\n          {searchResults.length > 0 && connectionLiveStatus\r\n            ? searchResults.map((item, index) => {\r\n                return (\r\n                  <FileComponent\r\n                    key={index}\r\n                    id={item.name + item.type}\r\n                    onContextMenu={(e) =>\r\n                      displayMenu(e, item.name, item.type, item.size)\r\n                    }\r\n                    onClick={() => changePath(item.name, item.type, item.size)}\r\n                    onDoubleClick={() =>\r\n                      changePath(item.name, item.type, item.size)\r\n                    }\r\n                    name={item.name}\r\n                    type={item.type}\r\n                    size={item.size}\r\n                    lastMod={item.modifiedAt}\r\n                  />\r\n                );\r\n              })\r\n            : errorSVG}\r\n\r\n          {/* <Menu id={MENU_ID}>\r\n                        <Item id=\"rename\" onClick={handleItemClick}>\r\n                            Rename\r\n                        </Item>\r\n                        <Item id=\"delete\" onClick={handleItemClick}>\r\n                            Delete\r\n                        </Item>\r\n                        <Item id=\"download\" onClick={handleItemClick}>\r\n                            Download\r\n                        </Item>\r\n                    </Menu> */}\r\n\r\n          <ControlledMenu\r\n            anchorPoint={anchorPoint}\r\n            isOpen={isOpen}\r\n            onClose={() => setOpen(false)}\r\n          >\r\n            <MenuItem value=\"rename\" onClick={handleItemClick}>\r\n              Rename\r\n            </MenuItem>\r\n            <MenuItem value=\"delete\" onClick={handleItemClick}>\r\n              Delete\r\n            </MenuItem>\r\n            <MenuItem value=\"Download\" onClick={handleItemClick}>\r\n              Download\r\n            </MenuItem>\r\n          </ControlledMenu>\r\n        </div>\r\n      </DragAndDrop>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExplorerMenu;\r\n","D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\components\\SideBar\\Sidebar2.js",[],"D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\components\\PlainHeader\\PlainHeader.js",["339","340","341","342","343","344"],"import React, { useEffect, useState } from \"react\";\r\nimport \"./PlainHeader.css\";\r\nimport { BiMenuAltLeft } from \"react-icons/bi\";\r\nimport { IoCloseOutline } from \"react-icons/io5\";\r\nimport { TweenMax } from \"gsap\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Contact from \"../../pages/Contact/Contact\";\r\n// import { Link } from 'react-router-dom'\r\n\r\nconst PlainHeader = () => {\r\n  let history = useHistory();\r\n  const [contactPageStatus, setContactPageStatus] = useState(false);\r\n\r\n  const changeRoute = (path) => {\r\n    history.push(path);\r\n  };\r\n\r\n  const revealContactPage = () => {\r\n    console.log(\"reached\");\r\n    setContactPageStatus(true);\r\n  };\r\n\r\n  return (\r\n    <header className=\"l-header\">\r\n      <nav className=\"nav bd-grid-header\">\r\n        <div>\r\n          <a href=\"/\" className=\"navLogo\">\r\n            No Wires\r\n          </a>\r\n        </div>\r\n\r\n        <div className=\"navToggle\" id=\"nav-toggle\">\r\n          <BiMenuAltLeft />\r\n        </div>\r\n\r\n        <div className=\"navMenu\" id=\"nav-menu\">\r\n          <div className=\"navClose\" id=\"nav-close\">\r\n            <IoCloseOutline />\r\n          </div>\r\n\r\n          <ul className=\"navList\">\r\n            {/* <Link style={{ textDecoration: \"none\" }} to='/home'> */}\r\n            <li className=\"navItem navLink\">\r\n              <a onClick={() => changeRoute(\"/\")} className=\"navLink\">\r\n                Home\r\n              </a>\r\n            </li>\r\n            {/* </Link> */}\r\n\r\n            {/* <Link style={{ textDecoration: \"none\" }} to='/myOrders'> */}\r\n            <li className=\"navItem\">\r\n              <a onClick={() => changeRoute(\"/explorer\")} className=\"navLink\">\r\n                Explorer\r\n              </a>\r\n            </li>\r\n            {/* </Link> */}\r\n\r\n            {/* <Link style={{ textDecoration: \"none\" }} to='/about'> */}\r\n            <li className=\"navItem\">\r\n              <a onClick={() => changeRoute(\"/about\")} className=\"navLink\">\r\n                About\r\n              </a>\r\n            </li>\r\n            {/* </Link> */}\r\n\r\n            {/* <Link style={{ textDecoration: \"none\" }} to='/contact'> */}\r\n            <li className=\"navItem\">\r\n              <a onClick={() => revealContactPage()} className=\"navLink\">\r\n                Contact\r\n              </a>\r\n            </li>\r\n            {/* </Link> */}\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n      {contactPageStatus && (\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n          }}\r\n        >\r\n          <Contact closeHandler={() => setContactPageStatus(false)} />\r\n        </div>\r\n      )}\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default PlainHeader;\r\n","D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\components\\Footer\\Footer.js",[],"D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\components\\Header\\Header.js",["345","346","347","348"],"D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\components\\PhoneSection\\Phone.js",[],"D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\components\\Modal\\Modal.js",[],"D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\components\\Snackbar\\Snackbar.js",["349","350","351","352"],"import React, { useState, useEffect } from \"react\";\r\nimport { GoVerified } from \"react-icons/go\";\r\nimport { VscClose } from \"react-icons/vsc\";\r\nimport \"./Snackbar.css\";\r\n\r\nconst homeDir = require(\"os\").homedir();\r\nconst desktopDir = `${homeDir}/Desktop`;\r\n\r\nconst Snackbar = (props) => {\r\n  const handleClose = () => {\r\n    props.handleSnackbarClose();\r\n  };\r\n\r\n  const openExplorerLink = () => {};\r\n\r\n  return (\r\n    <div>\r\n      <div class=\"snackbar-frame-1\" style={{ opacity: props.show ? \"1\" : \"0\" }}>\r\n        <div class=\"snackbar-verified\">\r\n          <GoVerified />\r\n        </div>\r\n        <p class=\"snackbar-text-1 poppins-medium-black-14px\">\r\n          {(() => {\r\n            switch (props.transferType) {\r\n              case \"Create Folder\":\r\n                return \"Created Folder Successfully! 🙂\";\r\n              case \"Rename\":\r\n                return \"Renamed Successfully! 🙂\";\r\n              case \"Download\":\r\n                return \"Downloaded Successfully! Check Desktop/NoWires\";\r\n              case \"Upload\":\r\n                return \"Uploaded Successfully! 🙂\";\r\n              case \"Delete\":\r\n                return \"Deleted Successfully! 🙂\";\r\n              default:\r\n                return \" \";\r\n            }\r\n          })()}\r\n        </p>\r\n        <div class=\"close\" onClick={handleClose}>\r\n          <VscClose color=\"#484848\" />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Snackbar;\r\n","D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\components\\DragAndDrop\\DragAndDrop.js",[],"D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\components\\skeleton\\FileSkeleton2.js",[],"D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\Errors\\NoConnection\\NoConnection.js",[],"D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\Errors\\NoFiles\\NoFiles.js",[],"D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\components\\FileExplorer\\ExplorerMenu\\SearchBar\\SearchBar.js",["353","354","355"],"import React from 'react';\r\nimport './SearchBar.css';\r\nimport { BiSearch } from \"react-icons/bi\";\r\n\r\nconst SearchBar = ({ input: keyword, onChange: setKeyword }) => {\r\n    const BarStyling = { width: \"10rem\", background: \"#F2F1F9\", border: \"none\", padding: \"0.5rem\" };\r\n\r\n    return (\r\n        // <input className=\"searchbar\"\r\n        //     style={BarStyling}\r\n        //     key=\"random1\"\r\n        //     value={keyword}\r\n        //     placeholder={\"search\"}\r\n        // autocomplete=\"off\"\r\n        //     onChange={(e) => setKeyword(e.target.value)}\r\n        // />\r\n        // <div>\r\n\r\n        //     <input id=\"searchBar-search-box\"\r\n        //         autocomplete=\"off\"\r\n        //         type=\"text\"\r\n        //         class=\"searchBar-search-box\"\r\n        //         name=\"q\" />\r\n        //     <label for=\"searchBar-search-box\">\r\n        //         <span class=\"searchBar-search-icon\">\r\n        //             <img src=\"https://img.icons8.com/android/14/000000/search.png\" />\r\n        //         </span>\r\n        //     </label>\r\n        // </div>\r\n\r\n        <div className=\"searchBar\">\r\n            <input id=\"searchBar-search-box\"\r\n                type=\"text\"\r\n                class=\"searchBar-search-box\"\r\n                name=\"q\"\r\n                onChange={(e) => setKeyword(e.target.value)}\r\n                value={keyword}\r\n                placeholder={\"search\"}\r\n                autocomplete=\"off\" />\r\n            <label for=\"searchBar-search-box\">\r\n                <span class=\"searchBar-search-icon\">\r\n                    <img src=\"https://img.icons8.com/android/14/000000/search.png\" />\r\n                </span>\r\n            </label>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBar;","D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\components\\FileExplorer\\ExplorerMenu\\DownloadPopup\\DownloadPopup.js",[],"D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\components\\FileExplorer\\FileComponent\\FileComponent.js",[],"D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\components\\FileExplorer\\ExplorerMenu\\CreateFolder\\CreateFolder.js",[],"D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\components\\FileExplorer\\ExplorerMenu\\ConfirmDelete\\ConfirmDelete.js",[],"D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\components\\FileExplorer\\ExplorerMenu\\ModifyContent\\ModifyContent.js",["356","357"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport \"./ModifyContent.css\";\r\n\r\nconst ModifyContent = (props) => {\r\n  const [value, setValue] = useState(\"\");\r\n\r\n\r\n  const handleChange = (e) => {\r\n    setValue(e.target.value);\r\n  };\r\n\r\n  const action = () => {\r\n    props.create(value);\r\n    setValue(\"\");\r\n    props.closeHandler();\r\n  };\r\n\r\n  return (\r\n    <div class=\"modify-parent\">\r\n      <div class=\"modify-overlap-group\">\r\n        <div class=\"modify-content-title\">{props.title}</div>\r\n        <p class=\"modify-content-desc valign-text-middle\">{props.desc}</p>\r\n        {/* <div class=\"modify-rectangle-22\"></div> */}\r\n        <input\r\n          className=\"modify-popup-input\"\r\n          value={value}\r\n          type=\"text\"\r\n          placeholder={props.placeholder}\r\n          onChange={handleChange}\r\n        ></input>\r\n\r\n        <div class=\"modify-flex-row\">\r\n          <div class=\"modify-cancel-1\" onClick={props.closeHandler}>\r\n            <div class=\"modify-overlap-group1\">\r\n              <div class=\"modify-cancel-2 valign-text-middle\">Cancel</div>\r\n            </div>\r\n          </div>\r\n          <div class=\"modify-cancel\" onClick={action}>\r\n            <div class=\"modify-operation valign-text-middle\">\r\n              {props.action}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ModifyContent;\r\n","D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\components\\Backdrop\\Backdrop.js",[],"D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\hoc\\Auxiliary.js",[],"D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\helpers\\useSingleClick\\useSingleAndDoubleClicks.js",[],"D:\\Saikiran\\Projects\\js\\NoWires\\client\\src\\components\\FileExplorer\\FileComponent\\IconComponent\\IconComponent.js",[],{"ruleId":"358","replacedBy":"359"},{"ruleId":"360","replacedBy":"361"},{"ruleId":"362","severity":1,"message":"363","line":8,"column":8,"nodeType":"364","messageId":"365","endLine":8,"endColumn":15},{"ruleId":"366","severity":1,"message":"367","line":93,"column":6,"nodeType":"368","endLine":93,"endColumn":13,"suggestions":"369"},{"ruleId":"366","severity":1,"message":"370","line":116,"column":6,"nodeType":"368","endLine":116,"endColumn":28,"suggestions":"371"},{"ruleId":"372","severity":1,"message":"373","line":121,"column":41,"nodeType":"374","messageId":"375","endLine":121,"endColumn":43},{"ruleId":"366","severity":1,"message":"376","line":138,"column":6,"nodeType":"368","endLine":138,"endColumn":28,"suggestions":"377"},{"ruleId":"378","severity":1,"message":"379","line":571,"column":36,"nodeType":"380","messageId":"381","endLine":571,"endColumn":37},{"ruleId":"372","severity":1,"message":"373","line":665,"column":41,"nodeType":"374","messageId":"375","endLine":665,"endColumn":43},{"ruleId":"366","severity":1,"message":"370","line":92,"column":6,"nodeType":"368","endLine":92,"endColumn":28,"suggestions":"382"},{"ruleId":"372","severity":1,"message":"373","line":97,"column":41,"nodeType":"374","messageId":"375","endLine":97,"endColumn":43},{"ruleId":"366","severity":1,"message":"376","line":110,"column":6,"nodeType":"368","endLine":110,"endColumn":28,"suggestions":"383"},{"ruleId":"372","severity":1,"message":"373","line":529,"column":41,"nodeType":"374","messageId":"375","endLine":529,"endColumn":43},{"ruleId":"384","severity":1,"message":"385","line":69,"column":15,"nodeType":"386","endLine":69,"endColumn":71},{"ruleId":"384","severity":1,"message":"385","line":77,"column":15,"nodeType":"386","endLine":77,"endColumn":79},{"ruleId":"384","severity":1,"message":"385","line":85,"column":15,"nodeType":"386","endLine":85,"endColumn":76},{"ruleId":"384","severity":1,"message":"385","line":93,"column":15,"nodeType":"386","endLine":93,"endColumn":74},{"ruleId":"358","replacedBy":"387"},{"ruleId":"360","replacedBy":"388"},{"ruleId":"358","replacedBy":"389"},{"ruleId":"360","replacedBy":"390"},{"ruleId":"384","severity":1,"message":"385","line":43,"column":15,"nodeType":"386","endLine":43,"endColumn":71},{"ruleId":"384","severity":1,"message":"385","line":51,"column":15,"nodeType":"386","endLine":51,"endColumn":79},{"ruleId":"384","severity":1,"message":"385","line":59,"column":15,"nodeType":"386","endLine":59,"endColumn":76},{"ruleId":"384","severity":1,"message":"385","line":67,"column":15,"nodeType":"386","endLine":67,"endColumn":74},{"ruleId":"358","replacedBy":"391"},{"ruleId":"360","replacedBy":"392"},{"ruleId":"362","severity":1,"message":"363","line":8,"column":8,"nodeType":"364","messageId":"365","endLine":8,"endColumn":15},{"ruleId":"393","severity":1,"message":"394","line":12,"column":9,"nodeType":"395","messageId":"396","endLine":12,"endColumn":18},{"ruleId":"393","severity":1,"message":"394","line":29,"column":17,"nodeType":"395","messageId":"396","endLine":29,"endColumn":26},{"ruleId":"366","severity":1,"message":"367","line":93,"column":6,"nodeType":"368","endLine":93,"endColumn":13,"suggestions":"397"},{"ruleId":"362","severity":1,"message":"398","line":3,"column":8,"nodeType":"364","messageId":"365","endLine":3,"endColumn":14},{"ruleId":"362","severity":1,"message":"399","line":11,"column":8,"nodeType":"364","messageId":"365","endLine":11,"endColumn":20},{"ruleId":"366","severity":1,"message":"370","line":93,"column":6,"nodeType":"368","endLine":93,"endColumn":28,"suggestions":"400"},{"ruleId":"372","severity":1,"message":"373","line":98,"column":41,"nodeType":"374","messageId":"375","endLine":98,"endColumn":43},{"ruleId":"366","severity":1,"message":"376","line":111,"column":6,"nodeType":"368","endLine":111,"endColumn":28,"suggestions":"401"},{"ruleId":"378","severity":1,"message":"379","line":348,"column":36,"nodeType":"380","messageId":"381","endLine":348,"endColumn":37},{"ruleId":"372","severity":1,"message":"373","line":531,"column":41,"nodeType":"374","messageId":"375","endLine":531,"endColumn":43},{"ruleId":"402","severity":1,"message":"403","line":549,"column":13,"nodeType":"386","endLine":552,"endColumn":15},{"ruleId":"362","severity":1,"message":"404","line":7,"column":23,"nodeType":"364","messageId":"365","endLine":7,"endColumn":34},{"ruleId":"362","severity":1,"message":"405","line":57,"column":10,"nodeType":"364","messageId":"365","endLine":57,"endColumn":25},{"ruleId":"362","severity":1,"message":"406","line":57,"column":27,"nodeType":"364","messageId":"365","endLine":57,"endColumn":45},{"ruleId":"362","severity":1,"message":"407","line":58,"column":10,"nodeType":"364","messageId":"365","endLine":58,"endColumn":15},{"ruleId":"362","severity":1,"message":"408","line":58,"column":17,"nodeType":"364","messageId":"365","endLine":58,"endColumn":25},{"ruleId":"366","severity":1,"message":"370","line":116,"column":6,"nodeType":"368","endLine":116,"endColumn":28,"suggestions":"409"},{"ruleId":"372","severity":1,"message":"373","line":121,"column":41,"nodeType":"374","messageId":"375","endLine":121,"endColumn":43},{"ruleId":"366","severity":1,"message":"376","line":138,"column":6,"nodeType":"368","endLine":138,"endColumn":28,"suggestions":"410"},{"ruleId":"378","severity":1,"message":"379","line":571,"column":36,"nodeType":"380","messageId":"381","endLine":571,"endColumn":37},{"ruleId":"372","severity":1,"message":"373","line":665,"column":41,"nodeType":"374","messageId":"375","endLine":665,"endColumn":43},{"ruleId":"362","severity":1,"message":"411","line":1,"column":17,"nodeType":"364","messageId":"365","endLine":1,"endColumn":26},{"ruleId":"362","severity":1,"message":"412","line":5,"column":10,"nodeType":"364","messageId":"365","endLine":5,"endColumn":18},{"ruleId":"384","severity":1,"message":"385","line":44,"column":15,"nodeType":"386","endLine":44,"endColumn":71},{"ruleId":"384","severity":1,"message":"385","line":52,"column":15,"nodeType":"386","endLine":52,"endColumn":79},{"ruleId":"384","severity":1,"message":"385","line":60,"column":15,"nodeType":"386","endLine":60,"endColumn":76},{"ruleId":"384","severity":1,"message":"385","line":68,"column":15,"nodeType":"386","endLine":68,"endColumn":74},{"ruleId":"384","severity":1,"message":"385","line":69,"column":15,"nodeType":"386","endLine":69,"endColumn":71},{"ruleId":"384","severity":1,"message":"385","line":77,"column":15,"nodeType":"386","endLine":77,"endColumn":79},{"ruleId":"384","severity":1,"message":"385","line":85,"column":15,"nodeType":"386","endLine":85,"endColumn":76},{"ruleId":"384","severity":1,"message":"385","line":93,"column":15,"nodeType":"386","endLine":93,"endColumn":74},{"ruleId":"362","severity":1,"message":"413","line":1,"column":17,"nodeType":"364","messageId":"365","endLine":1,"endColumn":25},{"ruleId":"362","severity":1,"message":"411","line":1,"column":27,"nodeType":"364","messageId":"365","endLine":1,"endColumn":36},{"ruleId":"362","severity":1,"message":"414","line":7,"column":7,"nodeType":"364","messageId":"365","endLine":7,"endColumn":17},{"ruleId":"362","severity":1,"message":"415","line":14,"column":9,"nodeType":"364","messageId":"365","endLine":14,"endColumn":25},{"ruleId":"362","severity":1,"message":"416","line":3,"column":10,"nodeType":"364","messageId":"365","endLine":3,"endColumn":18},{"ruleId":"362","severity":1,"message":"417","line":6,"column":11,"nodeType":"364","messageId":"365","endLine":6,"endColumn":21},{"ruleId":"402","severity":1,"message":"403","line":42,"column":21,"nodeType":"386","endLine":42,"endColumn":86},{"ruleId":"362","severity":1,"message":"411","line":1,"column":17,"nodeType":"364","messageId":"365","endLine":1,"endColumn":26},{"ruleId":"362","severity":1,"message":"418","line":1,"column":38,"nodeType":"364","messageId":"365","endLine":1,"endColumn":44},"no-native-reassign",["419"],"no-negated-in-lhs",["420"],"no-unused-vars","'Contact' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch', 'history', and 'qrCodeData'. Either include them or remove the dependency array.","ArrayExpression",["421"],"React Hook useEffect has a missing dependency: 'connectionDetails'. Either include it or remove the dependency array.",["422"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'connectionDetails.host'. Either include it or remove the dependency array.",["423"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat",["424"],["425"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement",["419"],["420"],["419"],["420"],["419"],["420"],"no-dupe-keys","Duplicate key 'totalSize'.","ObjectExpression","unexpected",["426"],"'Header' is defined but never used.","'CreateFolder' is defined but never used.",["427"],["428"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'useDispatch' is defined but never used.","'transferPercent' is assigned a value but never used.","'setTransferPercent' is assigned a value but never used.","'files' is assigned a value but never used.","'setFiles' is assigned a value but never used.",["429"],["430"],"'useEffect' is defined but never used.","'TweenMax' is defined but never used.","'useState' is defined but never used.","'desktopDir' is assigned a value but never used.","'openExplorerLink' is assigned a value but never used.","'BiSearch' is defined but never used.","'BarStyling' is assigned a value but never used.","'useRef' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"431","fix":"432"},{"desc":"433","fix":"434"},{"desc":"435","fix":"436"},{"desc":"433","fix":"437"},{"desc":"435","fix":"438"},{"desc":"431","fix":"439"},{"desc":"433","fix":"440"},{"desc":"435","fix":"441"},{"desc":"433","fix":"442"},{"desc":"435","fix":"443"},"Update the dependencies array to be: [count, dispatch, history, qrCodeData]",{"range":"444","text":"445"},"Update the dependencies array to be: [connectionDetails, currentDirectoryPath]",{"range":"446","text":"447"},"Update the dependencies array to be: [searchTerm, fileList, connectionDetails.host]",{"range":"448","text":"449"},{"range":"450","text":"447"},{"range":"451","text":"449"},{"range":"452","text":"445"},{"range":"453","text":"447"},{"range":"454","text":"449"},{"range":"455","text":"447"},{"range":"456","text":"449"},[2915,2922],"[count, dispatch, history, qrCodeData]",[4378,4400],"[connectionDetails, currentDirectoryPath]",[5060,5082],"[searchTerm, fileList, connectionDetails.host]",[3405,3427],[3905,3927],[2915,2922],[3506,3528],[4006,4028],[4385,4407],[5067,5089]]
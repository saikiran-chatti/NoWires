[{"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\index.js":"1","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\reportWebVitals.js":"2","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\App.js":"3","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\store\\ftp\\ftpReducer.js":"4","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\store\\ftp\\ftpTypes.js":"5","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\pages\\Dashboard\\Dashboard.js":"6","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\pages\\About\\About.js":"7","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\pages\\FileExplorer\\FileExplorer.js":"8","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\pages\\Contact\\Contact.js":"9","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\pages\\Home\\Home.js":"10","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\pages\\FileExplorer\\ExplorerMenu\\ExplorerMenu.js":"11","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\SideBar\\Sidebar2.js":"12","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\PlainHeader\\PlainHeader.js":"13","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\PhoneSection\\Phone.js":"14","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\Header\\Header.js":"15","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\pages\\Dashboard\\FilesMenu\\FilesMenu2.js":"16","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\Footer\\Footer.js":"17","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\Modal\\Modal.js":"18","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\skeleton\\FileSkeleton2.js":"19","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\Snackbar\\Snackbar.js":"20","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\DragAndDrop\\DragAndDrop.js":"21","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\FileExplorer\\ExplorerMenu\\ConfirmDelete\\ConfirmDelete.js":"22","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\FileExplorer\\FileComponent\\FileComponent.js":"23","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\FileExplorer\\ExplorerMenu\\SearchBar\\SearchBar.js":"24","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\FileExplorer\\ExplorerMenu\\ModifyContent\\ModifyContent.js":"25","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\FileExplorer\\ExplorerMenu\\DownloadPopup\\DownloadPopup.js":"26","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\Errors\\NoFiles\\NoFiles.js":"27","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\Errors\\NoConnection\\NoConnection.js":"28","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\hoc\\Auxiliary.js":"29","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\Backdrop\\Backdrop.js":"30","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\FileExplorer\\FileComponent\\IconComponent\\IconComponent.js":"31","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\helpers\\useSingleClick\\useSingleAndDoubleClicks.js":"32","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\helpers\\DragAndDrop\\Unlistener.ts":"33"},{"size":902,"mtime":1616608934668,"results":"34","hashOfConfig":"35"},{"size":362,"mtime":499162500000,"results":"36","hashOfConfig":"35"},{"size":766,"mtime":1617887867958,"results":"37","hashOfConfig":"35"},{"size":982,"mtime":1631801798366,"results":"38","hashOfConfig":"35"},{"size":48,"mtime":1614944642533,"results":"39","hashOfConfig":"35"},{"size":325,"mtime":1617771741453,"results":"40","hashOfConfig":"35"},{"size":3276,"mtime":1632048959084,"results":"41","hashOfConfig":"35"},{"size":360,"mtime":1617780192755,"results":"42","hashOfConfig":"35"},{"size":1391,"mtime":1632048965126,"results":"43","hashOfConfig":"35"},{"size":6186,"mtime":1632049935798,"results":"44","hashOfConfig":"35"},{"size":39422,"mtime":1632072667358,"results":"45","hashOfConfig":"35"},{"size":3759,"mtime":1620277485613,"results":"46","hashOfConfig":"35"},{"size":2623,"mtime":1631801915675,"results":"47","hashOfConfig":"35"},{"size":1119,"mtime":1630930046505,"results":"48","hashOfConfig":"35"},{"size":3110,"mtime":1621185700986,"results":"49","hashOfConfig":"35"},{"size":31087,"mtime":1632069163904,"results":"50","hashOfConfig":"35"},{"size":882,"mtime":1632048939830,"results":"51","hashOfConfig":"35"},{"size":575,"mtime":1614071993197,"results":"52","hashOfConfig":"35"},{"size":2764,"mtime":1622342238433,"results":"53","hashOfConfig":"35"},{"size":1358,"mtime":1632048950489,"results":"54","hashOfConfig":"35"},{"size":3074,"mtime":1632061364872,"results":"55","hashOfConfig":"35"},{"size":890,"mtime":1632048908682,"results":"56","hashOfConfig":"35"},{"size":2536,"mtime":1631970498719,"results":"57","hashOfConfig":"35"},{"size":828,"mtime":1632050255669,"results":"58","hashOfConfig":"35"},{"size":1413,"mtime":1632048926660,"results":"59","hashOfConfig":"35"},{"size":1777,"mtime":1632048916491,"results":"60","hashOfConfig":"35"},{"size":341,"mtime":1630923621090,"results":"61","hashOfConfig":"35"},{"size":837,"mtime":1632144562988,"results":"62","hashOfConfig":"35"},{"size":61,"mtime":1614060767137,"results":"63","hashOfConfig":"35"},{"size":234,"mtime":1614071982320,"results":"64","hashOfConfig":"35"},{"size":2591,"mtime":1613912867391,"results":"65","hashOfConfig":"35"},{"size":1747,"mtime":1617851083435,"results":"66","hashOfConfig":"35"},{"size":276,"mtime":1631971919339,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"1uqkm1t",{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"70"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"70"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"70"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"70"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"70"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\index.js",[],["140","141"],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\reportWebVitals.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\App.js",["142"],"import React from 'react'\nimport './App.css';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\nimport Home from './pages/Home/Home'\nimport Dashboard from './pages/Dashboard/Dashboard'\nimport FileExplorer from './pages/FileExplorer/FileExplorer'\nimport About from './pages/About/About';\nimport Contact from './pages/Contact/Contact';\n\nfunction App() {\n\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <Switch>\n          <Route path='/dashboard' exact component={Dashboard} />\n          <Route path='/' exact component={Home} />\n          <Route path='/explorer' exact component={FileExplorer} />\n          <Route path='/about' exact component={About} />\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\store\\ftp\\ftpReducer.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\store\\ftp\\ftpTypes.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\pages\\Dashboard\\Dashboard.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\pages\\About\\About.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\pages\\FileExplorer\\FileExplorer.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\pages\\Contact\\Contact.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\pages\\Home\\Home.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\pages\\FileExplorer\\ExplorerMenu\\ExplorerMenu.js",["143","144","145","146","147","148"],"import { React, useEffect, useState, useRef } from \"react\";\r\nimport FileComponent from \"../../../components/FileExplorer/FileComponent/FileComponent\";\r\nimport Modal from \"../../../components/Modal/Modal\";\r\nimport \"./ExplorerMenu.css\";\r\nimport DragAndDrop from \"../../../components/DragAndDrop/DragAndDrop\";\r\nimport { useSelector } from \"react-redux\";\r\nimport DownloadPopup from \"../../../components/FileExplorer/ExplorerMenu/DownloadPopup/DownloadPopup\";\r\nimport FileSkeleton from \"../../../components/skeleton/FileSkeleton2\";\r\n\r\n// import { Menu, Item, useContextMenu } from \"react-contexify\";\r\nimport { MenuItem, ControlledMenu } from \"@szhsin/react-menu\";\r\nimport \"@szhsin/react-menu/dist/index.css\";\r\nimport Snackbar from \"../../../components/Snackbar/Snackbar\";\r\nimport NoFiles from \"../../../Errors/NoFiles/NoFiles\";\r\nimport SearchBar from \"../../../components/FileExplorer/ExplorerMenu/SearchBar/SearchBar\";\r\nimport NoConnection from \"../../../Errors/NoConnection/NoConnection\";\r\nimport ConfirmDelete from \"../../../components/FileExplorer/ExplorerMenu/ConfirmDelete/ConfirmDelete\";\r\nimport ModifyContent from \"../../../components/FileExplorer/ExplorerMenu/ModifyContent/ModifyContent\";\r\n\r\n// const MENU_ID = \"menu-id\";\r\nimport { fetch, Body, ResponseType } from \"@tauri-apps/api/http\";\r\n\r\nconst ExplorerMenu = () => {\r\n  // fetching the ftp details\r\n  const connectionDetails = useSelector((state) =>\r\n    state != null ? state.connectionDetails : null\r\n  );\r\n  const [connectionLiveStatus, setConnectionLiveStatus] = useState(true);\r\n\r\n  const [fileList, setFileList] = useState([]);\r\n  const [currentDirectoryPath, setCurrentDirectoryPath] = useState(\"/\");\r\n  const [modalState, setModalState] = useState(false);\r\n  const [renameModalState, setRenameModalState] = useState(false);\r\n  const [transferModalState, setTransferModalState] = useState(false);\r\n  const [deleteModalState, setDeleteModalState] = useState(false);\r\n\r\n  const [transferItemDetails, setTransferItemDetails] = useState({\r\n    fileName: \"filename\",\r\n    fileType: 1,\r\n    fileSize: \"200 Mb\",\r\n    transferType: \"Download\",\r\n  });\r\n\r\n  const [errorSVG, setErrorSVG] = useState(null);\r\n\r\n  // used for menu's.\r\n  // const [menuProp, setMenuProp] = useState(null);\r\n  const [isOpen, setOpen] = useState(false);\r\n  const [anchorPoint, setAnchorPoint] = useState({ x: 0, y: 0 });\r\n  const [itemDataa, setItemDataa] = useState({\r\n    fileName: \"fileName\",\r\n    fileType: 1,\r\n    fileSize: \"230 Mb\",\r\n  });\r\n\r\n  // File transfer\r\n  // const [transferPercent, setTransferPercent] = useState(0);\r\n  // const [files, setFiles] = useState(() => []);\r\n  // const [downloadFile, downloaderComponentUI] = useFileDownloader();\r\n  const [downloaderComponentUI, setDownloaderComponentUI] = useState(true);\r\n  const [snackbarStatus, setSnackbarStatus] = useState(false);\r\n\r\n  // Search\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [searchResults, setSearchResults] = useState([]);\r\n\r\n  // ref for scroll\r\n  const ref = useRef();\r\n\r\n  //LazyLoading\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (currentDirectoryPath === \"/\") {\r\n      console.log(connectionDetails);\r\n\r\n      fetch('http://localhost:8000/rootDirectory', {\r\n        method: 'POST',\r\n        body: Body.json({ connectionDetails: connectionDetails })\r\n      }).then((res) => {\r\n        setFileList(res.data);\r\n        // refreshScrollBar();\r\n        setLoading(false);\r\n      })\r\n        .catch((e) => {\r\n          console.log(\"error while fetching files list \" + e);\r\n          setLoading(false);\r\n          setConnectionLiveStatus(false);\r\n          setErrorSVG(\r\n            <div className=\"noFilesImage\">\r\n              <NoConnection svgHeight={500} svgWidth={336} />\r\n            </div>\r\n          );\r\n        });\r\n\r\n      // axios\r\n      //   .post(\"/rootDirectory\", { connectionDetails: connectionDetails })\r\n      //   .then((res) => {\r\n      //     setFileList(res.data);\r\n      //     // refreshScrollBar();\r\n      //     setLoading(false);\r\n      //   })\r\n      //   .catch((e) => {\r\n      //     console.log(\"error while fetching files list \" + e);\r\n      //     setLoading(false);\r\n      //     setConnectionLiveStatus(false);\r\n      //     setErrorSVG(\r\n      //       <div className=\"noFilesImage\">\r\n      //         <NoConnection svgHeight={500} svgWidth={336} />\r\n      //       </div>\r\n      //     );\r\n      //   });\r\n    } else {\r\n\r\n      fetch('http://localhost:8000/changePath', {\r\n        method: 'POST',\r\n        body: Body.json({\r\n          path: currentDirectoryPath,\r\n          connectionDetails: connectionDetails,\r\n        })\r\n      }).then((res) => {\r\n        setLoading(false);\r\n        setFileList(res.data);\r\n        setSearchTerm(\"\");\r\n        refreshScrollBar();\r\n      })\r\n        .catch((e) => {\r\n          setLoading(false);\r\n          console.log(\"error while fetching files list \" + e);\r\n          setConnectionLiveStatus(false);\r\n          setErrorSVG(\r\n            <div className=\"noFilesImage\">\r\n              <NoConnection svgHeight={500} svgWidth={336} />\r\n            </div>\r\n          );\r\n        });\r\n\r\n      // axios\r\n      //   .post(\"/changePath\", {\r\n      //     path: currentDirectoryPath,\r\n      //     connectionDetails: connectionDetails,\r\n      //   })\r\n      //   .then((res) => {\r\n      //     setLoading(false);\r\n      //     setFileList(res.data);\r\n      //     setSearchTerm(\"\");\r\n      //     refreshScrollBar();\r\n      //   })\r\n      //   .catch((e) => {\r\n      //     setLoading(false);\r\n      //     console.log(\"error while fetching files list \" + e);\r\n      //     setConnectionLiveStatus(false);\r\n      //     setErrorSVG(\r\n      //       <div className=\"noFilesImage\">\r\n      //         <NoConnection svgHeight={500} svgWidth={336} />\r\n      //       </div>\r\n      //     );\r\n      //   });\r\n    }\r\n  }, [currentDirectoryPath, connectionDetails]);\r\n\r\n  useEffect(() => {\r\n    let results = [];\r\n    if (fileList.length > 0) {\r\n      fileList.map((jsFrameworksSearch) => {\r\n        if (jsFrameworksSearch.name.toLowerCase().includes(searchTerm.trim()))\r\n          results.push(jsFrameworksSearch);\r\n      });\r\n    } else if (connectionDetails.host != null) {\r\n      setErrorSVG(\r\n        <div className=\"noFilesImage\">\r\n          <NoFiles />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    // fileList.map((jsFrameworksSearch) => {\r\n    //     if (jsFrameworksSearch.name.toLowerCase().includes(searchTerm.trim()))\r\n    //         results.push(jsFrameworksSearch)\r\n    // });\r\n    setSearchResults(results);\r\n  }, [searchTerm, fileList]);\r\n\r\n  const refreshScrollBar = () => {\r\n    ref.current.scrollTo(0, 0);\r\n  };\r\n\r\n  //CreateFolder\r\n  const createFolder = (folderName) => {\r\n    setSearchTerm(\"\");\r\n    setTransferItemDetails({\r\n      fileSize: transferItemDetails.fileSize,\r\n      fileType: transferItemDetails.fileType,\r\n      fileName: transferItemDetails.fileName,\r\n      transferType: \"Create Folder\",\r\n    });\r\n\r\n    fetch('http://localhost:8000/createFolder', {\r\n      method: 'POST',\r\n      body: Body.json({\r\n        name: folderName,\r\n        path: currentDirectoryPath,\r\n        connectionDetails: connectionDetails,\r\n      })\r\n    }).then((res) => {\r\n      setFileList(res.data);\r\n      setSnackbarStatus(true);\r\n      setTimeout(() => {\r\n        setSnackbarStatus(false);\r\n      }, 2000);\r\n    })\r\n      .catch((e) => {\r\n        console.log(\"error while fetching files list \" + e);\r\n        setConnectionLiveStatus(false);\r\n        setErrorSVG(\r\n          <div className=\"noFilesImage\">\r\n            <NoConnection svgHeight={500} svgWidth={336} />\r\n          </div>\r\n        );\r\n      });\r\n\r\n    // axios\r\n    //   .post(\"/createFolder\", {\r\n    //     name: folderName,\r\n    //     path: currentDirectoryPath,\r\n    //     connectionDetails: connectionDetails,\r\n    //   })\r\n    //   .then((res) => {\r\n    //     setFileList(res.data);\r\n    //     setSnackbarStatus(true);\r\n    //     setTimeout(() => {\r\n    //       setSnackbarStatus(false);\r\n    //     }, 2000);\r\n    //   })\r\n    //   .catch((e) => {\r\n    //     console.log(\"error while fetching files list \" + e);\r\n    //     setConnectionLiveStatus(false);\r\n    //     setErrorSVG(\r\n    //       <div className=\"noFilesImage\">\r\n    //         <NoConnection svgHeight={500} svgWidth={336} />\r\n    //       </div>\r\n    //     );\r\n    //   });\r\n  };\r\n\r\n  const renameItem = (newName) => {\r\n    // let oldName = itemData.slice(0, -1);\r\n\r\n    setTransferItemDetails({\r\n      fileSize: itemDataa.fileSize,\r\n      fileType: itemDataa.fileType,\r\n      fileName: itemDataa.fileName,\r\n      transferType: \"Rename\",\r\n    });\r\n\r\n    let oldName = itemDataa.fileName;\r\n\r\n    if (itemDataa.fileType !== 2) {\r\n      let ext = oldName.split(\".\").pop();\r\n      newName = newName + \".\" + ext;\r\n    }\r\n\r\n    fetch('http://localhost:8000/renameFile', {\r\n      method: 'POST',\r\n      body: Body.json({\r\n        oldName: oldName,\r\n        path: currentDirectoryPath,\r\n        newName: newName,\r\n        connectionDetails: connectionDetails,\r\n      })\r\n    }).then((res) => {\r\n      setFileList(res.data);\r\n      setSearchTerm(\"\");\r\n      setSnackbarStatus(true);\r\n      setTimeout(() => {\r\n        setSnackbarStatus(false);\r\n      }, 2000);\r\n    })\r\n      .catch((e) => {\r\n        console.log(\"error while renaming file \" + e);\r\n        setConnectionLiveStatus(false);\r\n        setErrorSVG(\r\n          <div className=\"noFilesImage\">\r\n            <NoConnection svgHeight={500} svgWidth={336} />\r\n          </div>\r\n        );\r\n      });\r\n\r\n    // axios\r\n    //   .post(\"/renameFile\", {\r\n    //     oldName: oldName,\r\n    //     path: currentDirectoryPath,\r\n    //     newName: newName,\r\n    //     connectionDetails: connectionDetails,\r\n    //   })\r\n    //   .then((res) => {\r\n    //     setFileList(res.data);\r\n    //     setSearchTerm(\"\");\r\n    //     setSnackbarStatus(true);\r\n    //     setTimeout(() => {\r\n    //       setSnackbarStatus(false);\r\n    //     }, 2000);\r\n    //   })\r\n    //   .catch((e) => {\r\n    //     console.log(\"error while renaming file \" + e);\r\n    //     setConnectionLiveStatus(false);\r\n    //     setErrorSVG(\r\n    //       <div className=\"noFilesImage\">\r\n    //         <NoConnection svgHeight={500} svgWidth={336} />\r\n    //       </div>\r\n    //     );\r\n    //   });\r\n  };\r\n\r\n  const changePath = (name, type, size) => {\r\n    setTransferItemDetails({\r\n      fileSize: size,\r\n      fileType: type,\r\n      fileName: name,\r\n      transferType: \"Download\",\r\n    });\r\n    if (type === 2) {\r\n      setLoading(true);\r\n      setCurrentDirectoryPath(currentDirectoryPath + \"/\" + name); // works for ftp-server app\r\n      // setCurrentDirectoryPath(currentDirectoryPath + name)\r\n    } else {\r\n      // file name without extension = filename.split('.').slice(0, -1).join('.')\r\n\r\n      // const file = {\r\n      //     name: name,\r\n      //     // name: \"photo-1\",\r\n      //     thumb:\r\n      //         \"https://images.unsplash.com/photo-1604263439201-171fb8c0fddc?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=427&q=80 427w\",\r\n      //     file:\r\n      //         \"https://images.unsplash.com/photo-1604263439201-171fb8c0fddc?rnd=\" +\r\n      //         Math.random(),\r\n\r\n      //     filename: name,\r\n      //     // filename: \"photo-1.jpg\",\r\n      //     currentDirectoryPath: currentDirectoryPath,\r\n      //     connectionDetails: connectionDetails\r\n      // };\r\n\r\n      // downloadFile(file)\r\n\r\n      // Download file function..\r\n      setTransferModalState(true);\r\n      setDownloaderComponentUI(true);\r\n\r\n      console.log(\"Before download \" + downloaderComponentUI);\r\n\r\n      fetch('http://localhost:8000/downloadFile', {\r\n        method: 'POST',\r\n        responseType: ResponseType.Text,\r\n        body: Body.json({\r\n          path: currentDirectoryPath,\r\n          responseType: ResponseType.Text,\r\n          name: name,\r\n          connectionDetails: connectionDetails,\r\n        })\r\n      }).then((res) => {\r\n        console.log(\"After download: \" + downloaderComponentUI);\r\n        setDownloaderComponentUI(false);\r\n        setTransferModalState(false);\r\n        setSnackbarStatus(true);\r\n        setTimeout(() => {\r\n          setSnackbarStatus(false);\r\n        }, 2000);\r\n        // alert(res.data + ' Implement a download progress bar');\r\n      })\r\n        .catch((e) => {\r\n\r\n          setConnectionLiveStatus(false);\r\n          console.log(\"error while going back \" + e);\r\n          setTransferModalState(false);\r\n          setErrorSVG(\r\n            <div className=\"noFilesImage\">\r\n              <NoConnection svgHeight={500} svgWidth={336} />\r\n            </div>\r\n          );\r\n        });\r\n\r\n      // axios\r\n      //   .post(\"/downloadFile\", {\r\n      //     path: currentDirectoryPath,\r\n      //     name: name,\r\n      //     connectionDetails: connectionDetails,\r\n      //   })\r\n      //   .then((res) => {\r\n      //     console.log(\"After download: \" + downloaderComponentUI);\r\n      //     setDownloaderComponentUI(false);\r\n      //     setTransferModalState(false);\r\n      //     setSnackbarStatus(true);\r\n      //     setTimeout(() => {\r\n      //       setSnackbarStatus(false);\r\n      //     }, 2000);\r\n      //     // alert(res.data + ' Implement a download progress bar');\r\n      //   })\r\n      //   .catch((e) => {\r\n      //     setConnectionLiveStatus(false);\r\n      //     console.log(\"error while going back \" + e);\r\n      //     setErrorSVG(\r\n      //       <div className=\"noFilesImage\">\r\n      //         <NoConnection svgHeight={500} svgWidth={336} />\r\n      //       </div>\r\n      //     );\r\n      //   });\r\n      // }\r\n    }\r\n  };\r\n\r\n  const goBack = () => {\r\n    setLoading(true);\r\n    const p = currentDirectoryPath.slice(\r\n      0,\r\n      currentDirectoryPath.lastIndexOf(\"/\")\r\n    );\r\n    if (p !== \"\") {\r\n\r\n      fetch('http://localhost:8000/changePath', {\r\n        method: 'POST',\r\n        body: Body.json({ path: p, connectionDetails: connectionDetails })\r\n      }).then((res) => {\r\n        setLoading(false);\r\n        setFileList(res.data);\r\n      })\r\n        .catch((e) => {\r\n          setLoading(false);\r\n          console.log(\"error while going back \" + e);\r\n          setConnectionLiveStatus(false);\r\n          setErrorSVG(\r\n            <div className=\"noFilesImage\">\r\n              <NoConnection svgHeight={500} svgWidth={336} />\r\n            </div>\r\n          );\r\n        });\r\n\r\n      // axios\r\n      //   .post(\"/changePath\", { path: p, connectionDetails: connectionDetails })\r\n      //   .then((res) => {\r\n      //     setLoading(false);\r\n      //     setFileList(res.data);\r\n      //   })\r\n      //   .catch((e) => {\r\n      //     setLoading(false);\r\n      //     console.log(\"error while going back \" + e);\r\n      //     setConnectionLiveStatus(false);\r\n      //     setErrorSVG(\r\n      //       <div className=\"noFilesImage\">\r\n      //         <NoConnection svgHeight={500} svgWidth={336} />\r\n      //       </div>\r\n      //     );\r\n      //   });\r\n      setCurrentDirectoryPath(\r\n        currentDirectoryPath.slice(0, currentDirectoryPath.lastIndexOf(\"/\"))\r\n      );\r\n    } else {\r\n      alert(\"cannot go further 🙂\");\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getCodedBuffer = (file) => {\r\n    return new Promise(function (resolve, reject) {\r\n      let fileReader = new FileReader();\r\n      fileReader.readAsArrayBuffer(file);\r\n\r\n      fileReader.onload = function (ev) {\r\n        const array = new Uint8Array(ev.target.result);\r\n        // const fileByteArray = [];\r\n        let codedBuffer = \"\";\r\n\r\n        for (let i = 0; i < array.length; i++) {\r\n          // fileByteArray.push(array[i]);\r\n          codedBuffer += String.fromCharCode(array[i]);\r\n        }\r\n        resolve(codedBuffer); // successful\r\n      };\r\n      fileReader.onerror = reject; // call reject if error\r\n    });\r\n  };\r\n\r\n\r\n  const isFile = (path) => {\r\n    return path.includes('.');\r\n  }\r\n\r\n  const getFileName = (fileName) => new URL(fileName).pathname.split(\"/\").pop();\r\n\r\n\r\n  const handleDrop = (files) => {\r\n    // Implement upload function\r\n    console.log(files);\r\n    setTransferModalState(true);\r\n\r\n    for (let i = 0; i < files.length; i++) {\r\n      let fileType = \"Folder\";\r\n      let fileSize = \"123\";\r\n      let fileName = getFileName(files[i]);\r\n      console.log(isFile(files[i]));\r\n\r\n      if (isFile(files[i])) {\r\n        console.log('file');\r\n        fileType = 1;\r\n        fileSize = fileSize;\r\n      }\r\n\r\n      setTransferItemDetails({\r\n        fileName: fileName,\r\n        fileType: fileType,\r\n        fileSize: fileSize,\r\n        transferType: \"Upload\",\r\n      });\r\n\r\n      console.log(Body.json({\r\n        fileName: fileName,\r\n        localPath: files[i],\r\n        remotePath: currentDirectoryPath,\r\n        connectionDetails: connectionDetails\r\n      }))\r\n\r\n      fetch('http://localhost:8000/uploadFile', {\r\n        method: 'POST',\r\n        body: Body.json({\r\n          fileName: fileName,\r\n          localPath: files[i],\r\n          remotePath: currentDirectoryPath,\r\n          connectionDetails: connectionDetails\r\n        })\r\n      }).then((res) => {\r\n        console.log(res);\r\n        setTransferModalState(false);\r\n        setFileList(res.data);\r\n        setSnackbarStatus(true);\r\n        setTimeout(() => {\r\n          setSnackbarStatus(false);\r\n        }, 2000);\r\n      })\r\n        .catch((err) => {\r\n          console.log(\"error occured while uploading \" + err);\r\n          setConnectionLiveStatus(false);\r\n          setErrorSVG(\r\n            <div className=\"noFilesImage\">\r\n              <NoConnection svgHeight={500} svgWidth={336} />\r\n            </div>\r\n          );\r\n        });\r\n    }\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setModalState(false);\r\n  };\r\n\r\n  const closeSnackbar = () => {\r\n    setSnackbarStatus(false);\r\n  };\r\n\r\n  const closeRenameModal = () => {\r\n    setRenameModalState(false);\r\n  };\r\n\r\n  const closeTransferModal = () => {\r\n    setTransferModalState(false);\r\n  };\r\n\r\n  const closeDeleteModal = () => {\r\n    setDeleteModalState(false);\r\n  };\r\n\r\n  // const { show } = useContextMenu({\r\n  //     id: MENU_ID,\r\n  // });\r\n\r\n  // const handleItemClick = ({ event, props, triggerEvent, data }) => {\r\n  //     console.log(event, props, triggerEvent, data);\r\n\r\n  //     let fileName = props.id.slice(0, -1);\r\n  //     let fileType = props.id.charAt(fileName.length);\r\n\r\n  //     switch (event.currentTarget.id) {\r\n  //         case \"rename\":\r\n  //             // logic to remove the row\r\n  //             console.log(props.id + \" \" + fileName + \" \" + \"rename\"); // contain to item.id passed by `show`\r\n  //             break;\r\n\r\n  //         case \"delete\":\r\n  //             console.log(props.id + \" delete \" + fileType);\r\n\r\n  //             let deletePath = currentDirectoryPath + '/' + fileName\r\n  //             console.log(deletePath);\r\n\r\n  //             if (fileType === \"2\") {\r\n  //                 // Delete a directory\r\n  //                 console.log('deleting a folder');\r\n  //                 axios.post('/deleteDir', { path: currentDirectoryPath, fileName: fileName })\r\n  //                     .then(res => {\r\n  //                         setFileList(res.data);\r\n  //                     })\r\n  //                     .catch(() => {\r\n  //                         console.log('error while deleting file');\r\n  //                     });\r\n  //             }\r\n  //             else {\r\n  //                 // Delete a file\r\n  //                 console.log('deleting a file');\r\n  //                 axios.post('/deleteFile', { path: currentDirectoryPath, fileName: fileName })\r\n  //                     .then(res => {\r\n  //                         setFileList(res.data);\r\n  //                     })\r\n  //                     .catch(() => {\r\n  //                         console.log('error while deleting file');\r\n  //                     });\r\n  //             }\r\n  //             break;\r\n\r\n  //         case \"download\":\r\n  //             console.log(fileType + \" download\");\r\n  //             // downloading a file..\r\n\r\n  //             if (fileType === \"2\") {\r\n  //                 console.log('downloading a folder');\r\n\r\n  //                 axios.post('/downloadDirectory', { path: currentDirectoryPath, name: fileName })\r\n  //                     .then(res => {\r\n  //                         alert(res.data + ' Implement a download progress bar');\r\n  //                     })\r\n  //                     .catch(() => {\r\n  //                         console.log('error while going back');\r\n  //                     });\r\n  //             }\r\n  //             else {\r\n  //                 // downloading a file\r\n  //                 console.log('downloading a File');\r\n  //                 axios.post('/downloadFile', { path: currentDirectoryPath, name: fileName })\r\n  //                     .then(res => {\r\n  //                         alert(res.data + ' Implement a download progress bar');\r\n  //                     })\r\n  //                     .catch(() => {\r\n  //                         console.log('error while going back');\r\n  //                     });\r\n  //             }\r\n  //             break;\r\n  //         default:\r\n  //             break;\r\n  //     }\r\n  // }\r\n\r\n  const confirmDel = () => {\r\n    let fileName = itemDataa.fileName;\r\n    let fileType = itemDataa.fileType;\r\n    let fileSize = itemDataa.fileSize;\r\n\r\n    let deletePath = currentDirectoryPath + \"/\" + fileName;\r\n    console.log(deletePath);\r\n\r\n    setTransferItemDetails({\r\n      fileSize: fileSize,\r\n      fileType: fileType,\r\n      fileName: fileName,\r\n      transferType: \"Delete\",\r\n    });\r\n\r\n    if (fileType === 2) {\r\n      setTransferModalState(true);\r\n\r\n      // Delete a directory\r\n      console.log(\"deleting a folder\");\r\n\r\n      fetch('http://localhost:8000/deleteDir', {\r\n        method: 'POST',\r\n        body: Body.json({\r\n          path: currentDirectoryPath,\r\n          fileName: fileName,\r\n          connectionDetails: connectionDetails,\r\n        })\r\n      }).then((res) => {\r\n        setTransferModalState(false);\r\n\r\n        setFileList(res.data);\r\n        setSnackbarStatus(true);\r\n        setTimeout(() => {\r\n          setSnackbarStatus(false);\r\n        }, 2000);\r\n        setSearchTerm(\"\");\r\n      })\r\n        .catch(() => {\r\n          setConnectionLiveStatus(false);\r\n          setErrorSVG(\r\n            <div className=\"noFilesImage\">\r\n              <NoConnection svgHeight={500} svgWidth={336} />\r\n            </div>\r\n          );\r\n          console.log(\"error while deleting file\");\r\n        });\r\n\r\n      // axios\r\n      // .post(\"/deleteDir\", {\r\n      //   path: currentDirectoryPath,\r\n      //   fileName: fileName,\r\n      //   connectionDetails: connectionDetails,\r\n      // })\r\n      //   .then((res) => {\r\n      //     setTransferModalState(false);\r\n\r\n      //     setFileList(res.data);\r\n      //     setSnackbarStatus(true);\r\n      //     setTimeout(() => {\r\n      //       setSnackbarStatus(false);\r\n      //     }, 2000);\r\n      //     setSearchTerm(\"\");\r\n      //   })\r\n      //   .catch(() => {\r\n      //     setConnectionLiveStatus(false);\r\n      //     setErrorSVG(\r\n      //       <div className=\"noFilesImage\">\r\n      //         <NoConnection svgHeight={500} svgWidth={336} />\r\n      //       </div>\r\n      //     );\r\n      //     console.log(\"error while deleting file\");\r\n      //   });\r\n    } else {\r\n      setTransferModalState(true);\r\n\r\n      // Delete a file\r\n      console.log(\"deleting a file\");\r\n\r\n      fetch('http://localhost:8000/deleteFile', {\r\n        method: 'POST',\r\n        body: Body.json({\r\n          path: currentDirectoryPath,\r\n          fileName: fileName,\r\n          connectionDetails: connectionDetails,\r\n        })\r\n      }).then((res) => {\r\n        setTransferModalState(false);\r\n        setFileList(res.data);\r\n        setSnackbarStatus(true);\r\n        setTimeout(() => {\r\n          setSnackbarStatus(false);\r\n        }, 2000);\r\n        setSearchTerm(\"\");\r\n      })\r\n        .catch(() => {\r\n          console.log(\"error while deleting file\");\r\n          setConnectionLiveStatus(false);\r\n          setErrorSVG(\r\n            <div className=\"noFilesImage\">\r\n              <NoConnection svgHeight={500} svgWidth={336} />\r\n            </div>\r\n          );\r\n        });\r\n\r\n      // axios\r\n      //   .post(\"/deleteFile\", {\r\n      //     path: currentDirectoryPath,\r\n      //     fileName: fileName,\r\n      //     connectionDetails: connectionDetails,\r\n      //   })\r\n      //   .then((res) => {\r\n      //     setTransferModalState(false);\r\n      //     setFileList(res.data);\r\n      //     setSnackbarStatus(true);\r\n      //     setTimeout(() => {\r\n      //       setSnackbarStatus(false);\r\n      //     }, 2000);\r\n      //     setSearchTerm(\"\");\r\n      //   })\r\n      //   .catch(() => {\r\n      //     console.log(\"error while deleting file\");\r\n      //     setConnectionLiveStatus(false);\r\n      //     setErrorSVG(\r\n      //       <div className=\"noFilesImage\">\r\n      //         <NoConnection svgHeight={500} svgWidth={336} />\r\n      //       </div>\r\n      //     );\r\n      //   });\r\n    }\r\n  };\r\n\r\n  const handleItemClick = (e) => {\r\n    let fileName = itemDataa.fileName;\r\n    let fileType = itemDataa.fileType;\r\n    let fileSize = itemDataa.fileSize;\r\n\r\n    switch (e.value) {\r\n      case \"rename\":\r\n        // logic to remove the row\r\n        console.log(fileName + \" \" + \"rename\"); // contain to item.id passed by `show`\r\n        setRenameModalState(true);\r\n        break;\r\n\r\n      case \"delete\":\r\n        console.log(\" delete \" + fileType);\r\n\r\n        setDeleteModalState(true);\r\n        // confirmDel(fileName, fileType, fileSize);\r\n        break;\r\n\r\n      case \"Download\":\r\n        console.log(fileType + \" download\");\r\n        // downloading a file..\r\n        setTransferItemDetails({\r\n          fileSize: fileSize,\r\n          fileType: fileType,\r\n          fileName: fileName,\r\n          transferType: \"Download\",\r\n        });\r\n\r\n        if (fileType === 2) {\r\n          console.log(\"downloading a folder\");\r\n\r\n          setTransferModalState(true);\r\n          setDownloaderComponentUI(true);\r\n\r\n\r\n          fetch('http://localhost:8000/downloadDirectory', {\r\n            method: 'POST',\r\n            body: Body.json({\r\n              path: currentDirectoryPath,\r\n              name: fileName,\r\n              connectionDetails: connectionDetails,\r\n            })\r\n          }).then((res) => {\r\n            setDownloaderComponentUI(false);\r\n            setTransferModalState(false);\r\n            setSnackbarStatus(true);\r\n            setTimeout(() => {\r\n              setSnackbarStatus(false);\r\n            }, 2000);\r\n            // alert(res.data + ' Implement a download progress bar');\r\n          })\r\n            .catch(() => {\r\n              console.log(\"error while downloading\");\r\n              // setConnectionLiveStatus(false);\r\n              // setErrorSVG(\r\n              //   <div className=\"noFilesImage\">\r\n              //     <NoConnection svgHeight={500} svgWidth={336} />\r\n              //   </div>\r\n              // );\r\n            });\r\n\r\n          // axios\r\n          //   .post(\"/downloadDirectory\", {\r\n          //     path: currentDirectoryPath,\r\n          //     name: fileName,\r\n          //     connectionDetails: connectionDetails,\r\n          //   })\r\n          //   .then((res) => {\r\n          //     setDownloaderComponentUI(false);\r\n          //     setTransferModalState(false);\r\n          //     setSnackbarStatus(true);\r\n          //     setTimeout(() => {\r\n          //       setSnackbarStatus(false);\r\n          //     }, 2000);\r\n          //     // alert(res.data + ' Implement a download progress bar');\r\n          //   })\r\n          //   .catch(() => {\r\n          //     console.log(\"error while downloading\");\r\n          //     setConnectionLiveStatus(false);\r\n          //     setErrorSVG(\r\n          //       <div className=\"noFilesImage\">\r\n          //         <NoConnection svgHeight={500} svgWidth={336} />\r\n          //       </div>\r\n          //     );\r\n          //   });\r\n        } else {\r\n          // downloading a file\r\n          setTransferModalState(true);\r\n          setDownloaderComponentUI(true);\r\n\r\n          console.log(\"Before download \" + downloaderComponentUI);\r\n\r\n          fetch('http://localhost:8000/downloadFile', {\r\n            method: 'POST',\r\n            responseType: ResponseType.Text,\r\n            body: Body.json({\r\n              path: currentDirectoryPath,\r\n              responseType: ResponseType.Text,\r\n              name: fileName,\r\n              connectionDetails: connectionDetails,\r\n            })\r\n          }).then((res) => {\r\n            console.log(\"After download: \" + downloaderComponentUI);\r\n            setDownloaderComponentUI(false);\r\n            setTransferModalState(false);\r\n            setSnackbarStatus(true);\r\n            setTimeout(() => {\r\n              setSnackbarStatus(false);\r\n            }, 2000);\r\n            // alert(res.data + ' Implement a download progress bar');\r\n          })\r\n            .catch((e) => {\r\n              console.log(\"error while going back \" + e);\r\n              // setConnectionLiveStatus(false);\r\n              // setTransferModalState(false);\r\n              // setErrorSVG(\r\n              //   <div className=\"noFilesImage\">\r\n              //     <NoConnection svgHeight={500} svgWidth={336} />\r\n              //   </div>\r\n              // );\r\n            });\r\n\r\n          // axios\r\n          //   .post(\"/downloadFile\", {\r\n          //     path: currentDirectoryPath,\r\n          //     name: fileName,\r\n          //     connectionDetails: connectionDetails,\r\n          //   })\r\n          //   .then((res) => {\r\n          //     console.log(\"After download: \" + downloaderComponentUI);\r\n          //     setDownloaderComponentUI(false);\r\n          //     setTransferModalState(false);\r\n          //     setSnackbarStatus(true);\r\n          //     setTimeout(() => {\r\n          //       setSnackbarStatus(false);\r\n          //     }, 2000);\r\n          //     // alert(res.data + ' Implement a download progress bar');\r\n          //   })\r\n          //   .catch((e) => {\r\n          //     console.log(\"error while going back \" + e);\r\n          //     setConnectionLiveStatus(false);\r\n          //     setErrorSVG(\r\n          //       <div className=\"noFilesImage\">\r\n          //         <NoConnection svgHeight={500} svgWidth={336} />\r\n          //       </div>\r\n          //     );\r\n          //   });\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const updateSearchResult = async (input) => {\r\n    // setSearchTerm(event.target.value)\r\n    let results = [];\r\n    if (fileList.length > 0) {\r\n      fileList.map((jsFrameworksSearch) => {\r\n        if (jsFrameworksSearch.name.toLowerCase().includes(input.trim()))\r\n          results.push(jsFrameworksSearch);\r\n      });\r\n    }\r\n    setSearchTerm(input);\r\n    setSearchResults(results);\r\n  };\r\n\r\n  // const displayMenu = (e) => {\r\n  //     // put whatever custom logic you need\r\n  //     // you can even decide to not display the Menu\r\n  //     console.log('reaching displayMenu (e)');\r\n  //     show(e, { props: { id: e.currentTarget.id } });\r\n  // }\r\n\r\n  const displayMenu = (e, fileName, fileType, fileSize) => {\r\n    e.preventDefault();\r\n    setAnchorPoint({ x: e.clientX, y: e.clientY });\r\n    setOpen(true);\r\n    setItemDataa({\r\n      fileName: fileName,\r\n      fileType: fileType,\r\n      fileSize: fileSize,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"explorer-main-menu\">\r\n      <div className=\"explorer-title\">\r\n        <h1 className=\"dashboard-copy poppins-bold-black-27-3px\">\r\n          File Explorer\r\n        </h1>\r\n        <div className=\"overlap-group2\">\r\n          {/* <img\r\n                        alt=\"magnifier\"\r\n                        className=\"oval-9\"\r\n                        src=\"/images/icons/Magnifier.svg\"\r\n                    />*/}\r\n          <SearchBar input={searchTerm} onChange={updateSearchResult} />\r\n          {/* <img\r\n                        className=\"path-6\"\r\n                        src=\"/images/icons/Magnifier.svg\"\r\n                    /> */}\r\n        </div>\r\n      </div>\r\n      <div className=\"directory-path\">\r\n        <div className=\"directory-path-section-1\">\r\n          <div className=\"overlap-group-1\">\r\n            <div className=\"rectangle-9\"></div>\r\n            <div className=\"rectangle-10\"></div>\r\n            <div className=\"rectangle-5-copy\"></div>\r\n          </div>\r\n          <p className=\"explorer-path valign-text-middle poppins-medium-black-14px\">\r\n            {currentDirectoryPath === \"/\"\r\n              ? \"Internal Storage >\"\r\n              : currentDirectoryPath.slice(2).replaceAll(\"/\", \" > \")}\r\n          </p>\r\n          {currentDirectoryPath !== \"/\" ? (\r\n            <span className=\"goBack\">\r\n              <img\r\n                alt=\"goBack\"\r\n                onClick={() => goBack()}\r\n                className=\"goBackImg\"\r\n                src=\"/images/icons/goBack.svg\"\r\n              ></img>\r\n            </span>\r\n          ) : null}\r\n        </div>\r\n\r\n        <div className=\"frame-1\">\r\n          <div className=\"overlap-group\" onClick={() => setModalState(true)}>\r\n            <div className=\"rectangle-1 bizarre-border-1px\"></div>\r\n            <div className=\"rectangle-1 bizarre-border-1px\"></div>\r\n            <div className=\"create-folder valign-text-middle poppins-light-black-14px\">\r\n              Create Folder\r\n            </div>\r\n            <img\r\n              alt=\"addFolder\"\r\n              className=\"icons8-add-older-50-1\"\r\n              src=\"/images/icons/addFolder.svg\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/*\r\n                <span className=\"upload\">\r\n                    <input type=\"file\" name=\"u\" />\r\n                </span> */}\r\n      {/* Modal */}\r\n      <Modal show={modalState} modalClosed={closeModal} color=\"#fff\">\r\n        <ModifyContent\r\n          desc=\"Are you sure to create folder ?\"\r\n          placeholder=\"Enter folder name\"\r\n          title=\"Create Folder\"\r\n          action=\"Create\"\r\n          create={(folderName) => createFolder(folderName)}\r\n          closeHandler={closeModal}\r\n          path={currentDirectoryPath}\r\n        />\r\n      </Modal>\r\n\r\n      <div className=\"explorer-snackbar\">\r\n        <Snackbar\r\n          // text={transferItemDetails.transferType === \"Download\" ? \"Downloaded Successfully!  Check Desktop/NoWires\" : \"Uploaded Successfully! \"}\r\n          transferType={transferItemDetails.transferType}\r\n          handleSnackbarClose={closeSnackbar}\r\n          show={snackbarStatus}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"explorer-header\">\r\n        <div className=\"place valign-text-middle poppins-light-black-14px\">\r\n          Name\r\n        </div>\r\n        <div className=\"explorer-last-modified valign-text-middle poppins-light-black-14px\">\r\n          Last Modified\r\n        </div>\r\n        <div className=\"size valign-text-middle poppins-light-black-14px\">\r\n          Size\r\n        </div>\r\n      </div>\r\n\r\n      {/* popup for rename */}\r\n      <Modal\r\n        show={renameModalState}\r\n        modalClosed={closeRenameModal}\r\n        color=\"#fff\"\r\n      >\r\n        <ModifyContent\r\n          desc=\"Are you sure to rename this content ? This will rename the content\r\n          permanently.\"\r\n          placeholder=\"Enter new name\"\r\n          title={\"Rename \" + itemDataa.fileName}\r\n          create={(newName) => renameItem(newName)}\r\n          closeHandler={closeRenameModal}\r\n          action=\"Rename\"\r\n          path={currentDirectoryPath + \"/\" + itemDataa.fileName}\r\n        />\r\n      </Modal>\r\n\r\n      {/* popup for delete */}\r\n      <Modal\r\n        show={deleteModalState}\r\n        modalClosed={closeDeleteModal}\r\n        color=\"#fff\"\r\n      >\r\n        <ConfirmDelete\r\n          title={itemDataa.fileName}\r\n          delete={confirmDel}\r\n          closeHandler={closeDeleteModal}\r\n          path={currentDirectoryPath + \"/\" + itemDataa.fileName}\r\n        />\r\n      </Modal>\r\n\r\n      {/* popup for transfer progress */}\r\n      <Modal\r\n        show={transferModalState}\r\n        // modalClosed={closeTransferModal}\r\n        color=\"#fff\"\r\n      >\r\n        <DownloadPopup\r\n          placeholder={transferItemDetails.transferType}\r\n          name={transferItemDetails.fileName}\r\n          // create={(newName) => renameItem(newName)}\r\n          type={transferItemDetails.fileType}\r\n          closeHandler={closeTransferModal}\r\n          size={transferItemDetails.fileSize}\r\n          path={\r\n            currentDirectoryPath +\r\n            \"/\" +\r\n            transferItemDetails.fileName.split(\".\").slice(0, -1).join(\".\")\r\n          }\r\n        />\r\n      </Modal>\r\n\r\n      {/* popup for upload progress */}\r\n      {/* <Modal\r\n                show={transferModalState}\r\n                // modalClosed={closeTransferModal}\r\n                color=\"#fff\">\r\n                <DownloadPopup\r\n                    placeholder=\"Upload\"\r\n                    // name={transferItemDetails.fileName.split('.').slice(0, -1).join('.')}\r\n                    name={transferItemDetails.fileName}\r\n                    // create={(newName) => renameItem(newName)}\r\n                    type={transferItemDetails.fileType}\r\n                    closeHandler={closeTransferModal}\r\n                    size={transferItemDetails.fileSize}\r\n                    path={currentDirectoryPath + '/' + transferItemDetails.fileName.split('.').slice(0, -1).join('.')} />\r\n            </Modal> */}\r\n\r\n      <div className=\"App\">{loading && <FileSkeleton />}</div>\r\n      <DragAndDrop handleDrop={handleDrop}>\r\n        <div ref={ref} className=\"explorer-data\" id=\"explorer-data-files\">\r\n          {searchResults.length > 0 && connectionLiveStatus\r\n            ? searchResults.map((item, index) => {\r\n              return (\r\n                <FileComponent\r\n                  key={index}\r\n                  id={item.name + item.type}\r\n                  onContextMenu={(e) =>\r\n                    displayMenu(e, item.name, item.type, item.size)\r\n                  }\r\n                  onClick={() => changePath(item.name, item.type, item.size)}\r\n                  onDoubleClick={() =>\r\n                    changePath(item.name, item.type, item.size)\r\n                  }\r\n                  name={item.name}\r\n                  type={item.type}\r\n                  size={item.size}\r\n                  lastMod={item.modifiedAt}\r\n                />\r\n              );\r\n            })\r\n            : errorSVG}\r\n\r\n          {/* <Menu id={MENU_ID}>\r\n                        <Item id=\"rename\" onClick={handleItemClick}>\r\n                            Rename\r\n                        </Item>\r\n                        <Item id=\"delete\" onClick={handleItemClick}>\r\n                            Delete\r\n                        </Item>\r\n                        <Item id=\"download\" onClick={handleItemClick}>\r\n                            Download\r\n                        </Item>\r\n                    </Menu> */}\r\n\r\n          <ControlledMenu\r\n            anchorPoint={anchorPoint}\r\n            isOpen={isOpen}\r\n            onClose={() => setOpen(false)}\r\n          >\r\n            <MenuItem value=\"rename\" onClick={handleItemClick}>\r\n              Rename\r\n            </MenuItem>\r\n            <MenuItem value=\"delete\" onClick={handleItemClick}>\r\n              Delete\r\n            </MenuItem>\r\n            <MenuItem value=\"Download\" onClick={handleItemClick}>\r\n              Download\r\n            </MenuItem>\r\n          </ControlledMenu>\r\n        </div>\r\n      </DragAndDrop>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExplorerMenu;\r\n","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\SideBar\\Sidebar2.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\PlainHeader\\PlainHeader.js",["149","150","151","152"],"import React, {  useState } from \"react\";\r\nimport \"./PlainHeader.css\";\r\nimport { BiMenuAltLeft } from \"react-icons/bi\";\r\nimport { IoCloseOutline } from \"react-icons/io5\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Contact from \"../../pages/Contact/Contact\";\r\n// import { Link } from 'react-router-dom'\r\n\r\nconst PlainHeader = () => {\r\n  let history = useHistory();\r\n  const [contactPageStatus, setContactPageStatus] = useState(false);\r\n\r\n  const changeRoute = (path) => {\r\n    history.push(path);\r\n  };\r\n\r\n  const revealContactPage = () => {\r\n    console.log(\"reached\");\r\n    setContactPageStatus(true);\r\n  };\r\n\r\n  return (\r\n    <header className=\"l-header\">\r\n      <nav className=\"nav bd-grid-header\">\r\n        <div>\r\n          <a href=\"/\" className=\"navLogo\">\r\n            No Wires\r\n          </a>\r\n        </div>\r\n\r\n        <div className=\"navToggle\" id=\"nav-toggle\">\r\n          <BiMenuAltLeft />\r\n        </div>\r\n\r\n        <div className=\"navMenu\" id=\"nav-menu\">\r\n          <div className=\"navClose\" id=\"nav-close\">\r\n            <IoCloseOutline />\r\n          </div>\r\n\r\n          <ul className=\"navList\">\r\n            {/* <Link style={{ textDecoration: \"none\" }} to='/home'> */}\r\n            <li className=\"navItem navLink\">\r\n              <a onClick={() => changeRoute(\"/\")} className=\"navLink\">\r\n                Home\r\n              </a>\r\n            </li>\r\n            {/* </Link> */}\r\n\r\n            {/* <Link style={{ textDecoration: \"none\" }} to='/myOrders'> */}\r\n            <li className=\"navItem\">\r\n              <a onClick={() => changeRoute(\"/explorer\")} className=\"navLink\">\r\n                Explorer\r\n              </a>\r\n            </li>\r\n            {/* </Link> */}\r\n\r\n            {/* <Link style={{ textDecoration: \"none\" }} to='/about'> */}\r\n            <li className=\"navItem\">\r\n              <a onClick={() => changeRoute(\"/about\")} className=\"navLink\">\r\n                About\r\n              </a>\r\n            </li>\r\n            {/* </Link> */}\r\n\r\n            {/* <Link style={{ textDecoration: \"none\" }} to='/contact'> */}\r\n            <li className=\"navItem\">\r\n              <a onClick={() => revealContactPage()} className=\"navLink\">\r\n                Contact\r\n              </a>\r\n            </li>\r\n            {/* </Link> */}\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n      {contactPageStatus && (\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n          }}\r\n        >\r\n          <Contact closeHandler={() => setContactPageStatus(false)} />\r\n        </div>\r\n      )}\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default PlainHeader;\r\n","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\PhoneSection\\Phone.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\Header\\Header.js",["153","154","155","156"],"import React, { useEffect, useState } from \"react\";\r\nimport \"./Header.css\";\r\nimport { BiMenuAltLeft } from \"react-icons/bi\";\r\nimport { IoCloseOutline } from \"react-icons/io5\";\r\nimport { TweenMax } from \"gsap\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Contact from \"../../pages/Contact/Contact\";\r\n// import { Link } from 'react-router-dom'\r\n\r\nconst Header = () => {\r\n  let history = useHistory();\r\n  const [contactPageStatus, setContactPageStatus] = useState(false);\r\n\r\n  const changeRoute = (path) => {\r\n    history.push(path);\r\n  };\r\n\r\n  useEffect(() => {\r\n    TweenMax.from(\".navLogo\", {\r\n      autoAlpha: 0,\r\n      duration: 1,\r\n      opacity: 0,\r\n      y: 10,\r\n      delay: 2,\r\n    });\r\n    TweenMax.from(\".navToggle\", {\r\n      autoAlpha: 0,\r\n      duration: 1,\r\n      opacity: 0,\r\n      y: 10,\r\n      delay: 2,\r\n    });\r\n    TweenMax.from(\".navItem\", {\r\n      autoAlpha: 0,\r\n      opacity: 0,\r\n      duration: 1,\r\n      delay: 2.1,\r\n      y: 30,\r\n      stagger: 0.2,\r\n    });\r\n  }, []);\r\n\r\n  const revealContactPage = () => {\r\n    console.log(\"reached\");\r\n    setContactPageStatus(true);\r\n  };\r\n\r\n  return (\r\n    <header className=\"l-header\">\r\n      <nav className=\"nav bd-grid-header\">\r\n        <div>\r\n          <a href=\"/\" className=\"navLogo\">\r\n            No Wires\r\n          </a>\r\n        </div>\r\n\r\n        <div className=\"navToggle\" id=\"nav-toggle\">\r\n          <BiMenuAltLeft />\r\n        </div>\r\n\r\n        <div className=\"navMenu\" id=\"nav-menu\">\r\n          <div className=\"navClose\" id=\"nav-close\">\r\n            <IoCloseOutline />\r\n          </div>\r\n\r\n          <ul className=\"navList\">\r\n            {/* <Link style={{ textDecoration: \"none\" }} to='/home'> */}\r\n            <li className=\"navItem navLink\">\r\n              <a onClick={() => changeRoute(\"/\")} className=\"navLink\">\r\n                Home\r\n              </a>\r\n            </li>\r\n            {/* </Link> */}\r\n\r\n            {/* <Link style={{ textDecoration: \"none\" }} to='/myOrders'> */}\r\n            <li className=\"navItem\">\r\n              <a onClick={() => changeRoute(\"/explorer\")} className=\"navLink\">\r\n                Explorer\r\n              </a>\r\n            </li>\r\n            {/* </Link> */}\r\n\r\n            {/* <Link style={{ textDecoration: \"none\" }} to='/about'> */}\r\n            <li className=\"navItem\">\r\n              <a onClick={() => changeRoute(\"/about\")} className=\"navLink\">\r\n                About\r\n              </a>\r\n            </li>\r\n            {/* </Link> */}\r\n\r\n            {/* <Link style={{ textDecoration: \"none\" }} to='/contact'> */}\r\n            <li className=\"navItem\">\r\n              <a onClick={() => revealContactPage()} className=\"navLink\">\r\n                Contact\r\n              </a>\r\n            </li>\r\n            {/* </Link> */}\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n      {contactPageStatus && (\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n          }}\r\n        >\r\n          <Contact closeHandler={() => setContactPageStatus(false)} />\r\n        </div>\r\n      )}\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\pages\\Dashboard\\FilesMenu\\FilesMenu2.js",["157","158","159","160"],"import { React, useEffect, useState, useRef } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport \"./FilesMenu2.css\";\r\nimport DragAndDrop from \"../../../components/DragAndDrop/DragAndDrop\";\r\nimport FileComponent from \"../../../components/FileExplorer/FileComponent/FileComponent\";\r\nimport NoFiles from \"../../../Errors/NoFiles/NoFiles\";\r\nimport Snackbar from \"../../../components/Snackbar/Snackbar\";\r\nimport Modal from \"../../../components/Modal/Modal\";\r\nimport DownloadPopup from \"../../../components/FileExplorer/ExplorerMenu/DownloadPopup/DownloadPopup\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport SearchBar from \"../../../components/FileExplorer/ExplorerMenu/SearchBar/SearchBar\";\r\nimport NoConnection from \"../../../Errors/NoConnection/NoConnection\";\r\nimport FileSkeleton from \"../../../components/skeleton/FileSkeleton2\";\r\nimport ConfirmDelete from \"../../../components/FileExplorer/ExplorerMenu/ConfirmDelete/ConfirmDelete\";\r\nimport ModifyContent from \"../../../components/FileExplorer/ExplorerMenu/ModifyContent/ModifyContent\";\r\n\r\nimport { MenuItem, ControlledMenu } from \"@szhsin/react-menu\";\r\n\r\nimport { fetch, Body, ResponseType } from \"@tauri-apps/api/http\";\r\n\r\n\r\nconst FilesMenu2 = () => {\r\n  const connectionDetails = useSelector((state) =>\r\n    state != null ? state.connectionDetails : null\r\n  );\r\n  const [connectionLiveStatus, setConnectionLiveStatus] = useState(true);\r\n\r\n  const [fileList, setFileList] = useState([]);\r\n\r\n  const [isOpen, setOpen] = useState(false);\r\n  const [anchorPoint, setAnchorPoint] = useState({ x: 0, y: 0 });\r\n  const [itemDataa, setItemDataa] = useState({\r\n    fileName: \"fileName\",\r\n    fileType: 1,\r\n    fileSize: \"230 Mb\",\r\n  });\r\n\r\n  // current directory and transfer states\r\n  const [currentDirectoryPath, setCurrentDirectoryPath] = useState(\"/Download\");\r\n  const [transferModalState, setTransferModalState] = useState(false);\r\n  const [deleteModalState, setDeleteModalState] = useState(false);\r\n\r\n  const [transferItemDetails, setTransferItemDetails] = useState({\r\n    fileName: \"filename\",\r\n    fileType: 1,\r\n    fileSize: \"200 Mb\",\r\n    transferType: \"Download\",\r\n  });\r\n\r\n  // rename states\r\n  const [renameModalState, setRenameModalState] = useState(false);\r\n\r\n  const [downloaderComponentUI, setDownloaderComponentUI] = useState(true);\r\n  const [snackbarStatus, setSnackbarStatus] = useState(false);\r\n\r\n  // Search states\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [searchResults, setSearchResults] = useState([]);\r\n\r\n  // Error SVG\r\n  const [errorSVG, setErrorSVG] = useState(null);\r\n\r\n  let storagePercent =\r\n    (connectionDetails.usedSpace / connectionDetails.totalSize) * 100;\r\n\r\n  // ref for scroll\r\n  const ref = useRef();\r\n\r\n  // lazy loading\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n\r\n    fetch('http://localhost:8000/changePath', {\r\n      method: 'POST',\r\n      body: Body.json({\r\n        path: currentDirectoryPath,\r\n        connectionDetails: connectionDetails,\r\n      })\r\n    }).then((res) => {\r\n      setFileList(res.data);\r\n      setLoading(false);\r\n      setSearchTerm(\"\");\r\n      refreshScrollBar();\r\n    })\r\n      .catch((e) => {\r\n        setConnectionLiveStatus(false);\r\n        setLoading(false);\r\n        console.log(\"error while fetching files list \" + e);\r\n        setErrorSVG(\r\n          <div className=\"noFilesImageDashboard\">\r\n            <NoConnection svgHeight={290} svgWidth={336} />\r\n          </div>\r\n        );\r\n      });\r\n\r\n    // axios\r\n    //   .post(\"/changePath\", {\r\n    //     path: currentDirectoryPath,\r\n    //     connectionDetails: connectionDetails,\r\n    //   })\r\n    //   .then((res) => {\r\n    //     setFileList(res.data);\r\n    //     setLoading(false);\r\n    //     setSearchTerm(\"\");\r\n    //     refreshScrollBar();\r\n    //   })\r\n    //   .catch((e) => {\r\n    //     setConnectionLiveStatus(false);\r\n    //     setLoading(false);\r\n    //     console.log(\"error while fetching files list \" + e);\r\n    //     setErrorSVG(\r\n    //       <div className=\"noFilesImageDashboard\">\r\n    //         <NoConnection svgHeight={290} svgWidth={336} />\r\n    //       </div>\r\n    //     );\r\n    //   });\r\n  }, [currentDirectoryPath, connectionDetails]);\r\n\r\n  useEffect(() => {\r\n    let results = [];\r\n    if (fileList.length > 0) {\r\n      fileList.map((jsFrameworksSearch) => {\r\n        if (jsFrameworksSearch.name.toLowerCase().includes(searchTerm.trim()))\r\n          results.push(jsFrameworksSearch);\r\n      });\r\n    } else if (connectionDetails.host != null) {\r\n      setErrorSVG(\r\n        <div className=\"noFilesImageDashboard\">\r\n          <NoFiles />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    setSearchResults(results);\r\n  }, [searchTerm, fileList, connectionDetails.host]);\r\n\r\n  const refreshScrollBar = () => {\r\n    ref.current.scrollTo(0, 0);\r\n  };\r\n\r\n  let history = useHistory();\r\n\r\n  const changeRoute = (path) => {\r\n    history.push(path);\r\n  };\r\n\r\n  const changePath = (name, type, size) => {\r\n    setTransferItemDetails({\r\n      fileSize: size,\r\n      fileType: type,\r\n      fileName: name,\r\n      transferType: \"Download\",\r\n    });\r\n    if (type === 2) {\r\n      setLoading(true);\r\n      setCurrentDirectoryPath(currentDirectoryPath + \"/\" + name); // works for ftp-server app\r\n      // setCurrentDirectoryPath(currentDirectoryPath + name)\r\n    } else {\r\n      // file name without extension = filename.split('.').slice(0, -1).join('.')\r\n\r\n      // const file = {\r\n      //     name: name,\r\n      //     // name: \"photo-1\",\r\n      //     thumb:\r\n      //         \"https://images.unsplash.com/photo-1604263439201-171fb8c0fddc?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=427&q=80 427w\",\r\n      //     file:\r\n      //         \"https://images.unsplash.com/photo-1604263439201-171fb8c0fddc?rnd=\" +\r\n      //         Math.random(),\r\n\r\n      //     filename: name,\r\n      //     // filename: \"photo-1.jpg\",\r\n      //     currentDirectoryPath: currentDirectoryPath,\r\n      //     connectionDetails: connectionDetails\r\n      // };\r\n\r\n      // downloadFile(file)\r\n\r\n      // Download file function..\r\n      setTransferModalState(true);\r\n      setDownloaderComponentUI(true);\r\n\r\n      console.log(\"Before download \" + downloaderComponentUI);\r\n\r\n      fetch('http://localhost:8000/downloadFile', {\r\n        method: 'POST',\r\n        responseType: ResponseType.Text,\r\n        body: Body.json({\r\n          path: currentDirectoryPath,\r\n          name: name,\r\n          connectionDetails: connectionDetails,\r\n        })\r\n      }).then((res) => {\r\n        console.log(\"After download: \" + downloaderComponentUI);\r\n        setDownloaderComponentUI(false);\r\n        setTransferModalState(false);\r\n        setSnackbarStatus(true);\r\n        setTimeout(() => {\r\n          setSnackbarStatus(false);\r\n        }, 2000);\r\n        setSearchTerm(\"\");\r\n        // alert(res.data + ' Implement a download progress bar');\r\n      })\r\n        .catch((e) => {\r\n          console.log(\"error while going back \" + e);\r\n          setConnectionLiveStatus(false);\r\n          setErrorSVG(\r\n            <div className=\"noFilesImageDashboard\">\r\n              <NoConnection svgHeight={290} svgWidth={336} />\r\n            </div>\r\n          );\r\n        });\r\n\r\n      // axios\r\n      //   .post(\"/downloadFile\", {\r\n      //     path: currentDirectoryPath,\r\n      //     name: name,\r\n      //     connectionDetails: connectionDetails,\r\n      //   })\r\n      //   .then((res) => {\r\n      //     console.log(\"After download: \" + downloaderComponentUI);\r\n      //     setDownloaderComponentUI(false);\r\n      //     setTransferModalState(false);\r\n      //     setSnackbarStatus(true);\r\n      //     setTimeout(() => {\r\n      //       setSnackbarStatus(false);\r\n      //     }, 2000);\r\n      //     setSearchTerm(\"\");\r\n      //     // alert(res.data + ' Implement a download progress bar');\r\n      //   })\r\n      //   .catch((e) => {\r\n      //     console.log(\"error while going back \" + e);\r\n      //     setConnectionLiveStatus(false);\r\n      //     setErrorSVG(\r\n      //       <div className=\"noFilesImageDashboard\">\r\n      //         <NoConnection svgHeight={290} svgWidth={336} />\r\n      //       </div>\r\n      //     );\r\n      //   });\r\n      // }\r\n    }\r\n  };\r\n\r\n  const getCodedBuffer = (file) => {\r\n    return new Promise(function (resolve, reject) {\r\n      let fileReader = new FileReader();\r\n      fileReader.readAsArrayBuffer(file);\r\n\r\n      fileReader.onload = function (ev) {\r\n        const array = new Uint8Array(ev.target.result);\r\n        // const fileByteArray = [];\r\n        let codedBuffer = \"\";\r\n\r\n        for (let i = 0; i < array.length; i++) {\r\n          // fileByteArray.push(array[i]);\r\n          codedBuffer += String.fromCharCode(array[i]);\r\n        }\r\n        resolve(codedBuffer); // successful\r\n      };\r\n      fileReader.onerror = reject; // call reject if error\r\n    });\r\n  };\r\n\r\n  const getFileName = (fileName) => new URL(fileName).pathname.split(\"/\").pop();\r\n\r\n\r\n  const isFile = (path) => {\r\n    return !path.includes('.');\r\n  }\r\n\r\n  const handleDrop = (files) => {\r\n    // Implement upload function\r\n    console.log(files);\r\n    // setTransferModalState(true);\r\n\r\n    for (let i = 0; i < files.length; i++) {\r\n      let fileType = \"Folder\";\r\n      let fileSize = \"123\";\r\n      let fileName = getFileName(files[i]);\r\n      console.log(isFile(files[i]));\r\n\r\n      if (isFile(files[i])) {\r\n        console.log('file');\r\n        fileType = 1;\r\n        fileSize = fileSize;\r\n      }\r\n\r\n      setTransferItemDetails({\r\n        fileName: fileName,\r\n        fileType: fileType,\r\n        fileSize: fileSize,\r\n        transferType: \"Upload\",\r\n      });\r\n\r\n      console.log(Body.json({ fileName: fileName, localPath: files[i], remotePath: currentDirectoryPath }))\r\n\r\n      fetch('http://localhost:8000/uploadFile', {\r\n        method: 'POST',\r\n        body: Body.json({\r\n          fileName: fileName,\r\n          localPath: files[i],\r\n          remotePath: currentDirectoryPath,\r\n          connectionDetails: connectionDetails\r\n        })\r\n      }).then((res) => {\r\n        setTransferModalState(false);\r\n        setFileList(res.data);\r\n        setSnackbarStatus(true);\r\n        setTimeout(() => {\r\n          setSnackbarStatus(false);\r\n        }, 2000);\r\n      })\r\n        .catch((err) => {\r\n          alert(\"error occured while uploading \" + err);\r\n          setConnectionLiveStatus(false);\r\n          setErrorSVG(\r\n            <div className=\"noFilesImage\">\r\n              <NoConnection svgHeight={500} svgWidth={336} />\r\n            </div>\r\n          );\r\n        });\r\n    }\r\n  };\r\n\r\n  const confirmDel = () => {\r\n    let fileName = itemDataa.fileName;\r\n    let fileType = itemDataa.fileType;\r\n    let fileSize = itemDataa.fileSize;\r\n\r\n    let deletePath = currentDirectoryPath + \"/\" + fileName;\r\n    console.log(deletePath);\r\n\r\n    setTransferItemDetails({\r\n      fileSize: fileSize,\r\n      fileType: fileType,\r\n      fileName: fileName,\r\n      transferType: \"Delete\",\r\n    });\r\n\r\n    if (fileType === 2) {\r\n      setTransferModalState(true);\r\n\r\n      // Delete a directory\r\n      console.log(\"deleting a folder\");\r\n\r\n      fetch('http://localhost:8000/deleteDir', {\r\n        method: 'POST',\r\n        body: Body.json({\r\n          path: currentDirectoryPath,\r\n          fileName: fileName,\r\n          connectionDetails: connectionDetails,\r\n        })\r\n      }).then((res) => {\r\n        setTransferModalState(false);\r\n\r\n        setFileList(res.data);\r\n        setSnackbarStatus(true);\r\n        setTimeout(() => {\r\n          setSnackbarStatus(false);\r\n        }, 2000);\r\n        setSearchTerm(\"\");\r\n      })\r\n        .catch(() => {\r\n          setConnectionLiveStatus(false);\r\n          setErrorSVG(\r\n            <div className=\"noFilesImage\">\r\n              <NoConnection svgHeight={500} svgWidth={336} />\r\n            </div>\r\n          );\r\n          console.log(\"error while deleting file\");\r\n        });\r\n\r\n      // axios\r\n      //   .post(\"/deleteDir\", {\r\n      //     path: currentDirectoryPath,\r\n      //     fileName: fileName,\r\n      //     connectionDetails: connectionDetails,\r\n      //   })\r\n      //   .then((res) => {\r\n      //     setTransferModalState(false);\r\n\r\n      //     setFileList(res.data);\r\n      //     setSnackbarStatus(true);\r\n      //     setTimeout(() => {\r\n      //       setSnackbarStatus(false);\r\n      //     }, 2000);\r\n      //     setSearchTerm(\"\");\r\n      //   })\r\n      //   .catch(() => {\r\n      //     setConnectionLiveStatus(false);\r\n      //     setErrorSVG(\r\n      //       <div className=\"noFilesImage\">\r\n      //         <NoConnection svgHeight={500} svgWidth={336} />\r\n      //       </div>\r\n      //     );\r\n      //     console.log(\"error while deleting file\");\r\n      //   });\r\n    } else {\r\n      setTransferModalState(true);\r\n\r\n      // Delete a file\r\n      console.log(\"deleting a file\");\r\n\r\n      fetch('http://localhost:8000/deleteFile', {\r\n        method: 'POST',\r\n        body: Body.json({\r\n          path: currentDirectoryPath,\r\n          fileName: fileName,\r\n          connectionDetails: connectionDetails,\r\n        })\r\n      }).then((res) => {\r\n        setTransferModalState(false);\r\n        setFileList(res.data);\r\n        setSnackbarStatus(true);\r\n        setTimeout(() => {\r\n          setSnackbarStatus(false);\r\n        }, 2000);\r\n        setSearchTerm(\"\");\r\n      })\r\n        .catch(() => {\r\n          console.log(\"error while deleting file\");\r\n          setConnectionLiveStatus(false);\r\n          setErrorSVG(\r\n            <div className=\"noFilesImage\">\r\n              <NoConnection svgHeight={500} svgWidth={336} />\r\n            </div>\r\n          );\r\n        });\r\n\r\n      // axios\r\n      //   .post(\"/deleteFile\", {\r\n      //     path: currentDirectoryPath,\r\n      //     fileName: fileName,\r\n      //     connectionDetails: connectionDetails,\r\n      //   })\r\n      //   .then((res) => {\r\n      //     setTransferModalState(false);\r\n      //     setFileList(res.data);\r\n      //     setSnackbarStatus(true);\r\n      //     setTimeout(() => {\r\n      //       setSnackbarStatus(false);\r\n      //     }, 2000);\r\n      //     setSearchTerm(\"\");\r\n      //   })\r\n      //   .catch(() => {\r\n      //     console.log(\"error while deleting file\");\r\n      //     setConnectionLiveStatus(false);\r\n      //     setErrorSVG(\r\n      //       <div className=\"noFilesImage\">\r\n      //         <NoConnection svgHeight={500} svgWidth={336} />\r\n      //       </div>\r\n      //     );\r\n      //   });\r\n    }\r\n  };\r\n\r\n  const handleItemClick = (e) => {\r\n    let fileName = itemDataa.fileName;\r\n    let fileType = itemDataa.fileType;\r\n    let fileSize = itemDataa.fileSize;\r\n\r\n    switch (e.value) {\r\n      case \"rename\":\r\n        // logic to remove the row\r\n        setRenameModalState(true);\r\n        break;\r\n\r\n      case \"delete\":\r\n        console.log(\" delete \" + fileType);\r\n\r\n        setDeleteModalState(true);\r\n        // confirmDel(fileName, fileType, fileSize);\r\n        break;\r\n      case \"download\":\r\n        console.log(fileType + \" download\");\r\n        // downloading a file..\r\n        setTransferItemDetails({\r\n          fileSize: fileSize,\r\n          fileType: fileType,\r\n          fileName: fileName,\r\n          transferType: \"Download\",\r\n        });\r\n\r\n        if (fileType === 2) {\r\n          console.log(\"downloading a folder\");\r\n\r\n          setTransferModalState(true);\r\n          setDownloaderComponentUI(true);\r\n\r\n          fetch('http://localhost:8000/downloadDirectory', {\r\n            method: 'POST',\r\n            body: Body.json({\r\n              path: currentDirectoryPath,\r\n              name: fileName,\r\n              connectionDetails: connectionDetails,\r\n            })\r\n          }).then((res) => {\r\n            setDownloaderComponentUI(false);\r\n            setTransferModalState(false);\r\n            setSnackbarStatus(true);\r\n            setTimeout(() => {\r\n              setSnackbarStatus(false);\r\n            }, 2000);\r\n            // alert(res.data + ' Implement a download progress bar');\r\n          })\r\n            .catch(() => {\r\n              console.log(\"error while going back\");\r\n              setConnectionLiveStatus(false);\r\n              setErrorSVG(\r\n                <div className=\"noFilesImageDashboard\">\r\n                  <NoConnection svgHeight={290} svgWidth={336} />\r\n                </div>\r\n              );\r\n            });\r\n\r\n\r\n          // axios\r\n          //   .post(\"/downloadDirectory\", {\r\n          //     path: currentDirectoryPath,\r\n          //     name: fileName,\r\n          //     connectionDetails: connectionDetails,\r\n          //   })\r\n          //   .then((res) => {\r\n          //     setDownloaderComponentUI(false);\r\n          //     setTransferModalState(false);\r\n          //     setSnackbarStatus(true);\r\n          //     setTimeout(() => {\r\n          //       setSnackbarStatus(false);\r\n          //     }, 2000);\r\n          //     // alert(res.data + ' Implement a download progress bar');\r\n          //   })\r\n          //   .catch(() => {\r\n          //     console.log(\"error while going back\");\r\n          //     setConnectionLiveStatus(false);\r\n          //     setErrorSVG(\r\n          //       <div className=\"noFilesImageDashboard\">\r\n          //         <NoConnection svgHeight={290} svgWidth={336} />\r\n          //       </div>\r\n          //     );\r\n          //   });\r\n        } else {\r\n          // downloading a file\r\n          setTransferModalState(true);\r\n          setDownloaderComponentUI(true);\r\n\r\n          console.log(\"Before download \" + downloaderComponentUI);\r\n\r\n          fetch('http://localhost:8000/downloadFile', {\r\n            method: 'POST',\r\n            responseType: ResponseType.Text,\r\n            body: Body.json({\r\n              path: currentDirectoryPath,\r\n              responseType: ResponseType.Text,\r\n              fileName: fileName,\r\n              connectionDetails: connectionDetails,\r\n            })\r\n          }).then((res) => {\r\n            console.log(\"After download: \" + downloaderComponentUI);\r\n            setDownloaderComponentUI(false);\r\n            setTransferModalState(false);\r\n            setSnackbarStatus(true);\r\n            setTimeout(() => {\r\n              setSnackbarStatus(false);\r\n            }, 2000);\r\n            // alert(res.data + ' Implement a download progress bar');\r\n          })\r\n            .catch((e) => {\r\n              setConnectionLiveStatus(false);\r\n              setErrorSVG(\r\n                <div className=\"noFilesImageDashboard\">\r\n                  <NoConnection svgHeight={290} svgWidth={336} />\r\n                </div>\r\n              );\r\n            });\r\n\r\n          // axios\r\n          //   .post(\"/downloadFile\", {\r\n          //     path: currentDirectoryPath,\r\n          //     name: fileName,\r\n          //     connectionDetails: connectionDetails,\r\n          //   })\r\n          //   .then((res) => {\r\n          //     console.log(\"After download: \" + downloaderComponentUI);\r\n          //     setDownloaderComponentUI(false);\r\n          //     setTransferModalState(false);\r\n          //     setSnackbarStatus(true);\r\n          //     setTimeout(() => {\r\n          //       setSnackbarStatus(false);\r\n          //     }, 2000);\r\n          //     // alert(res.data + ' Implement a download progress bar');\r\n          //   })\r\n          //   .catch((e) => {\r\n          //     setConnectionLiveStatus(false);\r\n          //     setErrorSVG(\r\n          //       <div className=\"noFilesImageDashboard\">\r\n          //         <NoConnection svgHeight={290} svgWidth={336} />\r\n          //       </div>\r\n          //     );\r\n          //   });\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const renameItem = (newName) => {\r\n    // let oldName = itemData.slice(0, -1);\r\n\r\n    setTransferItemDetails({\r\n      fileSize: itemDataa.fileSize,\r\n      fileType: itemDataa.fileType,\r\n      fileName: itemDataa.fileName,\r\n      transferType: \"Rename\",\r\n    });\r\n\r\n    let oldName = itemDataa.fileName;\r\n\r\n    if (itemDataa.fileType !== 2) {\r\n      let ext = oldName.split(\".\").pop();\r\n      newName = newName + \".\" + ext;\r\n    }\r\n\r\n    fetch('http://localhost:8000/renameFile', {\r\n      method: 'POST',\r\n      body: Body.json({\r\n        oldName: oldName,\r\n        path: currentDirectoryPath,\r\n        newName: newName,\r\n        connectionDetails: connectionDetails,\r\n      })\r\n    }).then((res) => {\r\n      setFileList(res.data);\r\n      setSnackbarStatus(true);\r\n      setTimeout(() => {\r\n        setSnackbarStatus(false);\r\n      }, 2000);\r\n      setSearchTerm(\"\");\r\n    })\r\n      .catch((e) => {\r\n        setSearchTerm(\"\");\r\n        console.log(\"error while renaming file \" + e);\r\n      });\r\n\r\n    // axios\r\n    //   .post(\"/renameFile\", {\r\n    //     oldName: oldName,\r\n    //     path: currentDirectoryPath,\r\n    //     newName: newName,\r\n    //     connectionDetails: connectionDetails,\r\n    //   })\r\n    //   .then((res) => {\r\n    //     setFileList(res.data);\r\n    //     setSnackbarStatus(true);\r\n    //     setTimeout(() => {\r\n    //       setSnackbarStatus(false);\r\n    //     }, 2000);\r\n    //     setSearchTerm(\"\");\r\n    //   })\r\n    //   .catch((e) => {\r\n    //     setSearchTerm(\"\");\r\n    //     console.log(\"error while renaming file \" + e);\r\n    //   });\r\n  };\r\n\r\n  const closeRenameModal = () => {\r\n    setRenameModalState(false);\r\n  };\r\n\r\n  const closeTransferModal = () => {\r\n    setTransferModalState(false);\r\n  };\r\n\r\n  const closeDeleteModal = () => {\r\n    setDeleteModalState(false);\r\n  };\r\n\r\n  const closeSnackbar = () => {\r\n    setSnackbarStatus(false);\r\n  };\r\n\r\n  const goBack = () => {\r\n    setLoading(true);\r\n    const p = currentDirectoryPath.slice(\r\n      0,\r\n      currentDirectoryPath.lastIndexOf(\"/\")\r\n    );\r\n    if (p !== \"\") {\r\n\r\n      fetch('http://localhost:8000/changePath', {\r\n        method: 'POST',\r\n        body: Body.json({ path: p, connectionDetails: connectionDetails })\r\n      }).then((res) => {\r\n        setLoading(false);\r\n        setFileList(res.data);\r\n      })\r\n        .catch((e) => {\r\n          setLoading(false);\r\n          console.log(\"error while going back \" + e);\r\n        });\r\n\r\n      // axios\r\n      //   .post(\"/changePath\", { path: p, connectionDetails: connectionDetails })\r\n      //   .then((res) => {\r\n      //     setLoading(false);\r\n      //     setFileList(res.data);\r\n      //   })\r\n      //   .catch((e) => {\r\n      //     setLoading(false);\r\n      //     console.log(\"error while going back \" + e);\r\n      //   });\r\n      setCurrentDirectoryPath(\r\n        currentDirectoryPath.slice(0, currentDirectoryPath.lastIndexOf(\"/\"))\r\n      );\r\n    } else {\r\n      setLoading(false);\r\n      alert(\"nope nope\");\r\n    }\r\n  };\r\n\r\n  const displayMenu = (e, fileName, fileType, fileSize) => {\r\n    e.preventDefault();\r\n    setAnchorPoint({ x: e.clientX, y: e.clientY });\r\n    setOpen(true);\r\n    setItemDataa({\r\n      fileName: fileName,\r\n      fileType: fileType,\r\n      fileSize: fileSize,\r\n    });\r\n  };\r\n\r\n  const updateSearchResult = async (input) => {\r\n    // setSearchTerm(event.target.value)\r\n    let results = [];\r\n    if (fileList.length > 0) {\r\n      fileList.map((jsFrameworksSearch) => {\r\n        if (jsFrameworksSearch.name.toLowerCase().includes(input.trim()))\r\n          results.push(jsFrameworksSearch);\r\n      });\r\n    }\r\n    setSearchTerm(input);\r\n    setSearchResults(results);\r\n  };\r\n\r\n  return (\r\n    <div className=\"dashboard-screen\">\r\n      <h1 className=\"dashboard-copy poppins-bold-black-27-3px\">Dashboard</h1>\r\n      <div className=\"dashboard-storage-details\">\r\n        <div\r\n          className=\"dashboard-overlap-group\"\r\n          onClick={() => changeRoute(\"/explorer\")}\r\n        >\r\n          <div className=\"dashboard-overlap-group-header\">\r\n            <img\r\n              alt=\"macos-folder-icon\"\r\n              className=\"macos-folder-icon\"\r\n              src=\"/images/macos-folder-icon.png\"\r\n            />\r\n            <div className=\"internal-storage poppins-medium-black-14px\">\r\n              Internal Storage\r\n            </div>\r\n          </div>\r\n          <div className=\"storage-progress\">\r\n            <progress max=\"100\" value={storagePercent}></progress>\r\n            <div className=\"storage-progress-count poppins-regular-black-12px\">\r\n              {console.log(connectionDetails)}\r\n              <p>{connectionDetails.usedSpace + \" GB\"}</p>\r\n              <p>{connectionDetails.totalSize + \" GB\"}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"recently-used\">\r\n        <div className=\"dashboard-recently-used-title\">\r\n          <div className=\"downloadsPath\">\r\n            {currentDirectoryPath === \"/Download\" && (\r\n              <div className=\"recently-used-1 poppins-medium-black-18px\">\r\n                Downloads\r\n              </div>\r\n            )}\r\n\r\n            {currentDirectoryPath !== \"/Download\" && (\r\n              <div className=\"dashboard-file-icon\">\r\n                <div className=\"overlap-group-1\">\r\n                  <div className=\"rectangle-9\"></div>\r\n                  <div className=\"rectangle-10\"></div>\r\n                  <div className=\"rectangle-5-copy\"></div>\r\n                </div>\r\n                <div className=\"recently-used-1 poppins-medium-black-14px\">\r\n                  <span style={{ marginLeft: \"13px\" }}>\r\n                    {currentDirectoryPath.slice(1).replaceAll(\"/\", \">\")}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            {/* <div className=\"recently-used-1 poppins-medium-black-18px\">\r\n              {currentDirectoryPath === \"/Download\"\r\n                ? \"Downloads \"\r\n                : currentDirectoryPath.slice(1).replaceAll(\"/\", \" > \")}\r\n            </div> */}\r\n\r\n            {currentDirectoryPath !== \"/Download\" ? (\r\n              <span className=\"goBack\">\r\n                <img\r\n                  alt=\"goBack\"\r\n                  onClick={() => goBack()}\r\n                  className=\"goBackImg\"\r\n                  src=\"/images/icons/goBack.svg\"\r\n                ></img>\r\n              </span>\r\n            ) : null}\r\n            {/* <span className=\"goBack\">\r\n                            <img alt=\"goBack\" onClick={() => goBack()}\r\n                                className=\"goBackImg\" src=\"/images/icons/goBack.svg\"></img>\r\n                        </span> */}\r\n            <SearchBar input={searchTerm} onChange={updateSearchResult} />\r\n          </div>\r\n          <div\r\n            className=\"view-all poppins-regular-normal-black-14px\"\r\n            onClick={() => changeRoute(\"/explorer\")}\r\n          >\r\n            View all\r\n          </div>\r\n        </div>\r\n        <div className=\"recently-used-data\">\r\n          <div className=\"recently-used-name valign-text-middle poppins-light-black-14px\">\r\n            Name\r\n          </div>\r\n          <div className=\"recently-used-last-m valign-text-middle poppins-light-black-14px\">\r\n            Last Modified\r\n          </div>\r\n          <div className=\"size valign-text-middle poppins-light-black-14px\">\r\n            Size\r\n          </div>\r\n        </div>\r\n\r\n        {/* popup for rename */}\r\n        <Modal\r\n          show={renameModalState}\r\n          modalClosed={closeRenameModal}\r\n          color=\"#fff\"\r\n        >\r\n          <ModifyContent\r\n            desc=\"Are you sure to rename this content ? This will rename the content\r\n          permanently.\"\r\n            placeholder=\"Enter new name\"\r\n            title={\"Rename \" + itemDataa.fileName}\r\n            create={(newName) => renameItem(newName)}\r\n            closeHandler={closeRenameModal}\r\n            action=\"Rename\"\r\n            path={currentDirectoryPath + \"/\" + itemDataa.fileName}\r\n          />\r\n        </Modal>\r\n\r\n        {/* popup for delete */}\r\n        <Modal\r\n          show={deleteModalState}\r\n          modalClosed={closeDeleteModal}\r\n          color=\"#fff\"\r\n        >\r\n          <ConfirmDelete\r\n            title={itemDataa.fileName}\r\n            delete={confirmDel}\r\n            closeHandler={closeDeleteModal}\r\n            path={currentDirectoryPath + \"/\" + itemDataa.fileName}\r\n          />\r\n        </Modal>\r\n\r\n        {/* popup for transfer progress */}\r\n        <Modal\r\n          show={transferModalState}\r\n          // modalClosed={closeTransferModal}\r\n          color=\"#fff\"\r\n        >\r\n          <DownloadPopup\r\n            placeholder={transferItemDetails.transferType}\r\n            name={transferItemDetails.fileName}\r\n            // create={(newName) => renameItem(newName)}\r\n            type={transferItemDetails.fileType}\r\n            closeHandler={closeTransferModal}\r\n            size={transferItemDetails.fileSize}\r\n            path={\r\n              currentDirectoryPath +\r\n              \"/\" +\r\n              transferItemDetails.fileName.split(\".\").slice(0, -1).join(\".\")\r\n            }\r\n          />\r\n        </Modal>\r\n\r\n        {/* Snackbar */}\r\n        <div className=\"explorer-snackbar\">\r\n          <Snackbar\r\n            transferType={transferItemDetails.transferType}\r\n            handleSnackbarClose={closeSnackbar}\r\n            show={snackbarStatus}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"App\">{loading && <FileSkeleton />}</div>\r\n\r\n        <DragAndDrop handleDrop={handleDrop}>\r\n          <div className=\"recently-used-explorer-data\" ref={ref}>\r\n            {searchResults.length > 0 && connectionLiveStatus\r\n              ? searchResults.map((item, index) => {\r\n                return (\r\n                  <FileComponent\r\n                    key={index}\r\n                    id={item.name + item.type}\r\n                    onContextMenu={(e) =>\r\n                      displayMenu(e, item.name, item.type, item.size)\r\n                    }\r\n                    onClick={() =>\r\n                      changePath(item.name, item.type, item.size)\r\n                    }\r\n                    name={item.name}\r\n                    type={item.type}\r\n                    size={item.size}\r\n                    lastMod={item.modifiedAt}\r\n                  />\r\n                );\r\n              })\r\n              : errorSVG}\r\n\r\n            {/* <Menu id={MENU_ID}>\r\n                        <Item id=\"rename\" onClick={handleItemClick}>\r\n                            Rename\r\n                        </Item>\r\n                        <Item id=\"delete\" onClick={handleItemClick}>\r\n                            Delete\r\n                        </Item>\r\n                        <Item id=\"download\" onClick={handleItemClick}>\r\n                            Download\r\n                        </Item>\r\n                    </Menu> */}\r\n\r\n            <ControlledMenu\r\n              anchorPoint={anchorPoint}\r\n              isOpen={isOpen}\r\n              onClose={() => setOpen(false)}\r\n            >\r\n              <MenuItem value=\"rename\" onClick={handleItemClick}>\r\n                Rename\r\n              </MenuItem>\r\n              <MenuItem value=\"delete\" onClick={handleItemClick}>\r\n                Delete\r\n              </MenuItem>\r\n              <MenuItem value=\"download\" onClick={handleItemClick}>\r\n                Download\r\n              </MenuItem>\r\n            </ControlledMenu>\r\n          </div>\r\n        </DragAndDrop>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FilesMenu2;\r\n","D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\Footer\\Footer.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\Modal\\Modal.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\skeleton\\FileSkeleton2.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\Snackbar\\Snackbar.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\DragAndDrop\\DragAndDrop.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\FileExplorer\\ExplorerMenu\\ConfirmDelete\\ConfirmDelete.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\FileExplorer\\FileComponent\\FileComponent.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\FileExplorer\\ExplorerMenu\\SearchBar\\SearchBar.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\FileExplorer\\ExplorerMenu\\ModifyContent\\ModifyContent.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\FileExplorer\\ExplorerMenu\\DownloadPopup\\DownloadPopup.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\Errors\\NoFiles\\NoFiles.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\Errors\\NoConnection\\NoConnection.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\hoc\\Auxiliary.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\Backdrop\\Backdrop.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\components\\FileExplorer\\FileComponent\\IconComponent\\IconComponent.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\helpers\\useSingleClick\\useSingleAndDoubleClicks.js",[],"D:\\Saikiran\\Projects\\JS\\NoWires\\client\\src\\helpers\\DragAndDrop\\Unlistener.ts",[],{"ruleId":"161","replacedBy":"162"},{"ruleId":"163","replacedBy":"164"},{"ruleId":"165","severity":1,"message":"166","line":8,"column":8,"nodeType":"167","messageId":"168","endLine":8,"endColumn":15},{"ruleId":"169","severity":1,"message":"170","line":165,"column":41,"nodeType":"171","messageId":"172","endLine":165,"endColumn":43},{"ruleId":"173","severity":1,"message":"174","line":182,"column":6,"nodeType":"175","endLine":182,"endColumn":28,"suggestions":"176"},{"ruleId":"165","severity":1,"message":"177","line":463,"column":9,"nodeType":"167","messageId":"168","endLine":463,"endColumn":23},{"ruleId":"178","severity":1,"message":"179","line":505,"column":20,"nodeType":"167","messageId":"180","endLine":505,"endColumn":28},{"ruleId":"181","severity":1,"message":"182","line":789,"column":36,"nodeType":"183","messageId":"184","endLine":789,"endColumn":37},{"ruleId":"169","severity":1,"message":"170","line":940,"column":41,"nodeType":"171","messageId":"172","endLine":940,"endColumn":43},{"ruleId":"185","severity":1,"message":"186","line":43,"column":15,"nodeType":"187","endLine":43,"endColumn":71},{"ruleId":"185","severity":1,"message":"186","line":51,"column":15,"nodeType":"187","endLine":51,"endColumn":79},{"ruleId":"185","severity":1,"message":"186","line":59,"column":15,"nodeType":"187","endLine":59,"endColumn":76},{"ruleId":"185","severity":1,"message":"186","line":67,"column":15,"nodeType":"187","endLine":67,"endColumn":74},{"ruleId":"185","severity":1,"message":"186","line":69,"column":15,"nodeType":"187","endLine":69,"endColumn":71},{"ruleId":"185","severity":1,"message":"186","line":77,"column":15,"nodeType":"187","endLine":77,"endColumn":79},{"ruleId":"185","severity":1,"message":"186","line":85,"column":15,"nodeType":"187","endLine":85,"endColumn":76},{"ruleId":"185","severity":1,"message":"186","line":93,"column":15,"nodeType":"187","endLine":93,"endColumn":74},{"ruleId":"169","severity":1,"message":"170","line":123,"column":41,"nodeType":"171","messageId":"172","endLine":123,"endColumn":43},{"ruleId":"165","severity":1,"message":"177","line":244,"column":9,"nodeType":"167","messageId":"168","endLine":244,"endColumn":23},{"ruleId":"178","severity":1,"message":"179","line":285,"column":20,"nodeType":"167","messageId":"180","endLine":285,"endColumn":28},{"ruleId":"169","severity":1,"message":"170","line":736,"column":41,"nodeType":"171","messageId":"172","endLine":736,"endColumn":43},"no-native-reassign",["188"],"no-negated-in-lhs",["189"],"no-unused-vars","'Contact' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'connectionDetails.host'. Either include it or remove the dependency array.","ArrayExpression",["190"],"'getCodedBuffer' is assigned a value but never used.","no-self-assign","'fileSize' is assigned to itself.","selfAssignment","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"191","fix":"192"},"Update the dependencies array to be: [searchTerm, fileList, connectionDetails.host]",{"range":"193","text":"194"},[6550,6572],"[searchTerm, fileList, connectionDetails.host]"]